                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module lab6
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _read_keypad
                                     13 	.globl _strlen
                                     14 	.globl _putchar
                                     15 	.globl _getchar
                                     16 	.globl _vsprintf
                                     17 	.globl _printf
                                     18 	.globl _getchar_nw
                                     19 	.globl _Sys_Init
                                     20 	.globl _UART0_Init
                                     21 	.globl _SYSCLK_Init
                                     22 	.globl _BUS_SCL
                                     23 	.globl _BUS_TOE
                                     24 	.globl _BUS_FTE
                                     25 	.globl _BUS_AA
                                     26 	.globl _BUS_INT
                                     27 	.globl _BUS_STOP
                                     28 	.globl _BUS_START
                                     29 	.globl _BUS_EN
                                     30 	.globl _BUS_BUSY
                                     31 	.globl _SPIF
                                     32 	.globl _WCOL
                                     33 	.globl _MODF
                                     34 	.globl _RXOVRN
                                     35 	.globl _TXBSY
                                     36 	.globl _SLVSEL
                                     37 	.globl _MSTEN
                                     38 	.globl _SPIEN
                                     39 	.globl _AD0EN
                                     40 	.globl _ADCEN
                                     41 	.globl _AD0TM
                                     42 	.globl _ADCTM
                                     43 	.globl _AD0INT
                                     44 	.globl _ADCINT
                                     45 	.globl _AD0BUSY
                                     46 	.globl _ADBUSY
                                     47 	.globl _AD0CM1
                                     48 	.globl _ADSTM1
                                     49 	.globl _AD0CM0
                                     50 	.globl _ADSTM0
                                     51 	.globl _AD0WINT
                                     52 	.globl _ADWINT
                                     53 	.globl _AD0LJST
                                     54 	.globl _ADLJST
                                     55 	.globl _CF
                                     56 	.globl _CR
                                     57 	.globl _CCF4
                                     58 	.globl _CCF3
                                     59 	.globl _CCF2
                                     60 	.globl _CCF1
                                     61 	.globl _CCF0
                                     62 	.globl _CY
                                     63 	.globl _AC
                                     64 	.globl _F0
                                     65 	.globl _RS1
                                     66 	.globl _RS0
                                     67 	.globl _OV
                                     68 	.globl _F1
                                     69 	.globl _P
                                     70 	.globl _TF2
                                     71 	.globl _EXF2
                                     72 	.globl _RCLK
                                     73 	.globl _TCLK
                                     74 	.globl _EXEN2
                                     75 	.globl _TR2
                                     76 	.globl _CT2
                                     77 	.globl _CPRL2
                                     78 	.globl _BUSY
                                     79 	.globl _ENSMB
                                     80 	.globl _STA
                                     81 	.globl _STO
                                     82 	.globl _SI
                                     83 	.globl _AA
                                     84 	.globl _SMBFTE
                                     85 	.globl _SMBTOE
                                     86 	.globl _PT2
                                     87 	.globl _PS
                                     88 	.globl _PS0
                                     89 	.globl _PT1
                                     90 	.globl _PX1
                                     91 	.globl _PT0
                                     92 	.globl _PX0
                                     93 	.globl _P3_7
                                     94 	.globl _P3_6
                                     95 	.globl _P3_5
                                     96 	.globl _P3_4
                                     97 	.globl _P3_3
                                     98 	.globl _P3_2
                                     99 	.globl _P3_1
                                    100 	.globl _P3_0
                                    101 	.globl _EA
                                    102 	.globl _ET2
                                    103 	.globl _ES
                                    104 	.globl _ES0
                                    105 	.globl _ET1
                                    106 	.globl _EX1
                                    107 	.globl _ET0
                                    108 	.globl _EX0
                                    109 	.globl _P2_7
                                    110 	.globl _P2_6
                                    111 	.globl _P2_5
                                    112 	.globl _P2_4
                                    113 	.globl _P2_3
                                    114 	.globl _P2_2
                                    115 	.globl _P2_1
                                    116 	.globl _P2_0
                                    117 	.globl _S0MODE
                                    118 	.globl _SM00
                                    119 	.globl _SM0
                                    120 	.globl _SM10
                                    121 	.globl _SM1
                                    122 	.globl _MCE0
                                    123 	.globl _SM20
                                    124 	.globl _SM2
                                    125 	.globl _REN0
                                    126 	.globl _REN
                                    127 	.globl _TB80
                                    128 	.globl _TB8
                                    129 	.globl _RB80
                                    130 	.globl _RB8
                                    131 	.globl _TI0
                                    132 	.globl _TI
                                    133 	.globl _RI0
                                    134 	.globl _RI
                                    135 	.globl _P1_7
                                    136 	.globl _P1_6
                                    137 	.globl _P1_5
                                    138 	.globl _P1_4
                                    139 	.globl _P1_3
                                    140 	.globl _P1_2
                                    141 	.globl _P1_1
                                    142 	.globl _P1_0
                                    143 	.globl _TF1
                                    144 	.globl _TR1
                                    145 	.globl _TF0
                                    146 	.globl _TR0
                                    147 	.globl _IE1
                                    148 	.globl _IT1
                                    149 	.globl _IE0
                                    150 	.globl _IT0
                                    151 	.globl _P0_7
                                    152 	.globl _P0_6
                                    153 	.globl _P0_5
                                    154 	.globl _P0_4
                                    155 	.globl _P0_3
                                    156 	.globl _P0_2
                                    157 	.globl _P0_1
                                    158 	.globl _P0_0
                                    159 	.globl _PCA0CP4
                                    160 	.globl _PCA0CP3
                                    161 	.globl _PCA0CP2
                                    162 	.globl _PCA0CP1
                                    163 	.globl _PCA0CP0
                                    164 	.globl _PCA0
                                    165 	.globl _DAC1
                                    166 	.globl _DAC0
                                    167 	.globl _ADC0LT
                                    168 	.globl _ADC0GT
                                    169 	.globl _ADC0
                                    170 	.globl _RCAP4
                                    171 	.globl _TMR4
                                    172 	.globl _TMR3RL
                                    173 	.globl _TMR3
                                    174 	.globl _RCAP2
                                    175 	.globl _TMR2
                                    176 	.globl _TMR1
                                    177 	.globl _TMR0
                                    178 	.globl _WDTCN
                                    179 	.globl _PCA0CPH4
                                    180 	.globl _PCA0CPH3
                                    181 	.globl _PCA0CPH2
                                    182 	.globl _PCA0CPH1
                                    183 	.globl _PCA0CPH0
                                    184 	.globl _PCA0H
                                    185 	.globl _SPI0CN
                                    186 	.globl _EIP2
                                    187 	.globl _EIP1
                                    188 	.globl _TH4
                                    189 	.globl _TL4
                                    190 	.globl _SADDR1
                                    191 	.globl _SBUF1
                                    192 	.globl _SCON1
                                    193 	.globl _B
                                    194 	.globl _RSTSRC
                                    195 	.globl _PCA0CPL4
                                    196 	.globl _PCA0CPL3
                                    197 	.globl _PCA0CPL2
                                    198 	.globl _PCA0CPL1
                                    199 	.globl _PCA0CPL0
                                    200 	.globl _PCA0L
                                    201 	.globl _ADC0CN
                                    202 	.globl _EIE2
                                    203 	.globl _EIE1
                                    204 	.globl _RCAP4H
                                    205 	.globl _RCAP4L
                                    206 	.globl _XBR2
                                    207 	.globl _XBR1
                                    208 	.globl _XBR0
                                    209 	.globl _ACC
                                    210 	.globl _PCA0CPM4
                                    211 	.globl _PCA0CPM3
                                    212 	.globl _PCA0CPM2
                                    213 	.globl _PCA0CPM1
                                    214 	.globl _PCA0CPM0
                                    215 	.globl _PCA0MD
                                    216 	.globl _PCA0CN
                                    217 	.globl _DAC1CN
                                    218 	.globl _DAC1H
                                    219 	.globl _DAC1L
                                    220 	.globl _DAC0CN
                                    221 	.globl _DAC0H
                                    222 	.globl _DAC0L
                                    223 	.globl _REF0CN
                                    224 	.globl _PSW
                                    225 	.globl _SMB0CR
                                    226 	.globl _TH2
                                    227 	.globl _TL2
                                    228 	.globl _RCAP2H
                                    229 	.globl _RCAP2L
                                    230 	.globl _T4CON
                                    231 	.globl _T2CON
                                    232 	.globl _ADC0LTH
                                    233 	.globl _ADC0LTL
                                    234 	.globl _ADC0GTH
                                    235 	.globl _ADC0GTL
                                    236 	.globl _SMB0ADR
                                    237 	.globl _SMB0DAT
                                    238 	.globl _SMB0STA
                                    239 	.globl _SMB0CN
                                    240 	.globl _ADC0H
                                    241 	.globl _ADC0L
                                    242 	.globl _P1MDIN
                                    243 	.globl _ADC0CF
                                    244 	.globl _AMX0SL
                                    245 	.globl _AMX0CF
                                    246 	.globl _SADEN0
                                    247 	.globl _IP
                                    248 	.globl _FLACL
                                    249 	.globl _FLSCL
                                    250 	.globl _P74OUT
                                    251 	.globl _OSCICN
                                    252 	.globl _OSCXCN
                                    253 	.globl _P3
                                    254 	.globl __XPAGE
                                    255 	.globl _EMI0CN
                                    256 	.globl _SADEN1
                                    257 	.globl _P3IF
                                    258 	.globl _AMX1SL
                                    259 	.globl _ADC1CF
                                    260 	.globl _ADC1CN
                                    261 	.globl _SADDR0
                                    262 	.globl _IE
                                    263 	.globl _P3MDOUT
                                    264 	.globl _PRT3CF
                                    265 	.globl _P2MDOUT
                                    266 	.globl _PRT2CF
                                    267 	.globl _P1MDOUT
                                    268 	.globl _PRT1CF
                                    269 	.globl _P0MDOUT
                                    270 	.globl _PRT0CF
                                    271 	.globl _EMI0CF
                                    272 	.globl _EMI0TC
                                    273 	.globl _P2
                                    274 	.globl _CPT1CN
                                    275 	.globl _CPT0CN
                                    276 	.globl _SPI0CKR
                                    277 	.globl _ADC1
                                    278 	.globl _SPI0DAT
                                    279 	.globl _SPI0CFG
                                    280 	.globl _SBUF0
                                    281 	.globl _SBUF
                                    282 	.globl _SCON0
                                    283 	.globl _SCON
                                    284 	.globl _P7
                                    285 	.globl _TMR3H
                                    286 	.globl _TMR3L
                                    287 	.globl _TMR3RLH
                                    288 	.globl _TMR3RLL
                                    289 	.globl _TMR3CN
                                    290 	.globl _P1
                                    291 	.globl _PSCTL
                                    292 	.globl _CKCON
                                    293 	.globl _TH1
                                    294 	.globl _TH0
                                    295 	.globl _TL1
                                    296 	.globl _TL0
                                    297 	.globl _TMOD
                                    298 	.globl _TCON
                                    299 	.globl _PCON
                                    300 	.globl _P6
                                    301 	.globl _P5
                                    302 	.globl _P4
                                    303 	.globl _DPH
                                    304 	.globl _DPL
                                    305 	.globl _SP
                                    306 	.globl _P0
                                    307 	.globl _angle_PW
                                    308 	.globl _PW_vert
                                    309 	.globl _kd
                                    310 	.globl _kp
                                    311 	.globl _prev_error
                                    312 	.globl _error
                                    313 	.globl _right_PW
                                    314 	.globl _left_PW
                                    315 	.globl _rangervalue
                                    316 	.globl _battery
                                    317 	.globl _Data
                                    318 	.globl _input
                                    319 	.globl _print_count
                                    320 	.globl _desired_original
                                    321 	.globl _desired
                                    322 	.globl _heading
                                    323 	.globl _count
                                    324 	.globl _rcount
                                    325 	.globl _ccount
                                    326 	.globl _i2c_read_data_PARM_4
                                    327 	.globl _i2c_read_data_PARM_3
                                    328 	.globl _i2c_read_data_PARM_2
                                    329 	.globl _i2c_write_data_PARM_4
                                    330 	.globl _i2c_write_data_PARM_3
                                    331 	.globl _i2c_write_data_PARM_2
                                    332 	.globl _aligned_alloc_PARM_2
                                    333 	.globl _Data2
                                    334 	.globl _lcd_print
                                    335 	.globl _lcd_clear
                                    336 	.globl _kpd_input
                                    337 	.globl _delay_time
                                    338 	.globl _i2c_start
                                    339 	.globl _i2c_write
                                    340 	.globl _i2c_write_and_stop
                                    341 	.globl _i2c_read
                                    342 	.globl _i2c_read_and_stop
                                    343 	.globl _i2c_write_data
                                    344 	.globl _i2c_read_data
                                    345 	.globl _Accel_Init
                                    346 	.globl _Accel_Init_C
                                    347 	.globl _Ranger
                                    348 	.globl _ReadRanger
                                    349 	.globl _Read_Compass
                                    350 	.globl _Steering_Servo
                                    351 	.globl _Port_Init
                                    352 	.globl _XBR0_Init
                                    353 	.globl _SMB_Init
                                    354 	.globl _ADC_Init
                                    355 	.globl _ADC_Convert
                                    356 	.globl _PCA_Init
                                    357 	.globl _Interrupt_Init
                                    358 	.globl _PCA_ISR
                                    359 ;--------------------------------------------------------
                                    360 ; special function registers
                                    361 ;--------------------------------------------------------
                                    362 	.area RSEG    (ABS,DATA)
      000000                        363 	.org 0x0000
                           000080   364 G$P0$0$0 == 0x0080
                           000080   365 _P0	=	0x0080
                           000081   366 G$SP$0$0 == 0x0081
                           000081   367 _SP	=	0x0081
                           000082   368 G$DPL$0$0 == 0x0082
                           000082   369 _DPL	=	0x0082
                           000083   370 G$DPH$0$0 == 0x0083
                           000083   371 _DPH	=	0x0083
                           000084   372 G$P4$0$0 == 0x0084
                           000084   373 _P4	=	0x0084
                           000085   374 G$P5$0$0 == 0x0085
                           000085   375 _P5	=	0x0085
                           000086   376 G$P6$0$0 == 0x0086
                           000086   377 _P6	=	0x0086
                           000087   378 G$PCON$0$0 == 0x0087
                           000087   379 _PCON	=	0x0087
                           000088   380 G$TCON$0$0 == 0x0088
                           000088   381 _TCON	=	0x0088
                           000089   382 G$TMOD$0$0 == 0x0089
                           000089   383 _TMOD	=	0x0089
                           00008A   384 G$TL0$0$0 == 0x008a
                           00008A   385 _TL0	=	0x008a
                           00008B   386 G$TL1$0$0 == 0x008b
                           00008B   387 _TL1	=	0x008b
                           00008C   388 G$TH0$0$0 == 0x008c
                           00008C   389 _TH0	=	0x008c
                           00008D   390 G$TH1$0$0 == 0x008d
                           00008D   391 _TH1	=	0x008d
                           00008E   392 G$CKCON$0$0 == 0x008e
                           00008E   393 _CKCON	=	0x008e
                           00008F   394 G$PSCTL$0$0 == 0x008f
                           00008F   395 _PSCTL	=	0x008f
                           000090   396 G$P1$0$0 == 0x0090
                           000090   397 _P1	=	0x0090
                           000091   398 G$TMR3CN$0$0 == 0x0091
                           000091   399 _TMR3CN	=	0x0091
                           000092   400 G$TMR3RLL$0$0 == 0x0092
                           000092   401 _TMR3RLL	=	0x0092
                           000093   402 G$TMR3RLH$0$0 == 0x0093
                           000093   403 _TMR3RLH	=	0x0093
                           000094   404 G$TMR3L$0$0 == 0x0094
                           000094   405 _TMR3L	=	0x0094
                           000095   406 G$TMR3H$0$0 == 0x0095
                           000095   407 _TMR3H	=	0x0095
                           000096   408 G$P7$0$0 == 0x0096
                           000096   409 _P7	=	0x0096
                           000098   410 G$SCON$0$0 == 0x0098
                           000098   411 _SCON	=	0x0098
                           000098   412 G$SCON0$0$0 == 0x0098
                           000098   413 _SCON0	=	0x0098
                           000099   414 G$SBUF$0$0 == 0x0099
                           000099   415 _SBUF	=	0x0099
                           000099   416 G$SBUF0$0$0 == 0x0099
                           000099   417 _SBUF0	=	0x0099
                           00009A   418 G$SPI0CFG$0$0 == 0x009a
                           00009A   419 _SPI0CFG	=	0x009a
                           00009B   420 G$SPI0DAT$0$0 == 0x009b
                           00009B   421 _SPI0DAT	=	0x009b
                           00009C   422 G$ADC1$0$0 == 0x009c
                           00009C   423 _ADC1	=	0x009c
                           00009D   424 G$SPI0CKR$0$0 == 0x009d
                           00009D   425 _SPI0CKR	=	0x009d
                           00009E   426 G$CPT0CN$0$0 == 0x009e
                           00009E   427 _CPT0CN	=	0x009e
                           00009F   428 G$CPT1CN$0$0 == 0x009f
                           00009F   429 _CPT1CN	=	0x009f
                           0000A0   430 G$P2$0$0 == 0x00a0
                           0000A0   431 _P2	=	0x00a0
                           0000A1   432 G$EMI0TC$0$0 == 0x00a1
                           0000A1   433 _EMI0TC	=	0x00a1
                           0000A3   434 G$EMI0CF$0$0 == 0x00a3
                           0000A3   435 _EMI0CF	=	0x00a3
                           0000A4   436 G$PRT0CF$0$0 == 0x00a4
                           0000A4   437 _PRT0CF	=	0x00a4
                           0000A4   438 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   439 _P0MDOUT	=	0x00a4
                           0000A5   440 G$PRT1CF$0$0 == 0x00a5
                           0000A5   441 _PRT1CF	=	0x00a5
                           0000A5   442 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   443 _P1MDOUT	=	0x00a5
                           0000A6   444 G$PRT2CF$0$0 == 0x00a6
                           0000A6   445 _PRT2CF	=	0x00a6
                           0000A6   446 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   447 _P2MDOUT	=	0x00a6
                           0000A7   448 G$PRT3CF$0$0 == 0x00a7
                           0000A7   449 _PRT3CF	=	0x00a7
                           0000A7   450 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   451 _P3MDOUT	=	0x00a7
                           0000A8   452 G$IE$0$0 == 0x00a8
                           0000A8   453 _IE	=	0x00a8
                           0000A9   454 G$SADDR0$0$0 == 0x00a9
                           0000A9   455 _SADDR0	=	0x00a9
                           0000AA   456 G$ADC1CN$0$0 == 0x00aa
                           0000AA   457 _ADC1CN	=	0x00aa
                           0000AB   458 G$ADC1CF$0$0 == 0x00ab
                           0000AB   459 _ADC1CF	=	0x00ab
                           0000AC   460 G$AMX1SL$0$0 == 0x00ac
                           0000AC   461 _AMX1SL	=	0x00ac
                           0000AD   462 G$P3IF$0$0 == 0x00ad
                           0000AD   463 _P3IF	=	0x00ad
                           0000AE   464 G$SADEN1$0$0 == 0x00ae
                           0000AE   465 _SADEN1	=	0x00ae
                           0000AF   466 G$EMI0CN$0$0 == 0x00af
                           0000AF   467 _EMI0CN	=	0x00af
                           0000AF   468 G$_XPAGE$0$0 == 0x00af
                           0000AF   469 __XPAGE	=	0x00af
                           0000B0   470 G$P3$0$0 == 0x00b0
                           0000B0   471 _P3	=	0x00b0
                           0000B1   472 G$OSCXCN$0$0 == 0x00b1
                           0000B1   473 _OSCXCN	=	0x00b1
                           0000B2   474 G$OSCICN$0$0 == 0x00b2
                           0000B2   475 _OSCICN	=	0x00b2
                           0000B5   476 G$P74OUT$0$0 == 0x00b5
                           0000B5   477 _P74OUT	=	0x00b5
                           0000B6   478 G$FLSCL$0$0 == 0x00b6
                           0000B6   479 _FLSCL	=	0x00b6
                           0000B7   480 G$FLACL$0$0 == 0x00b7
                           0000B7   481 _FLACL	=	0x00b7
                           0000B8   482 G$IP$0$0 == 0x00b8
                           0000B8   483 _IP	=	0x00b8
                           0000B9   484 G$SADEN0$0$0 == 0x00b9
                           0000B9   485 _SADEN0	=	0x00b9
                           0000BA   486 G$AMX0CF$0$0 == 0x00ba
                           0000BA   487 _AMX0CF	=	0x00ba
                           0000BB   488 G$AMX0SL$0$0 == 0x00bb
                           0000BB   489 _AMX0SL	=	0x00bb
                           0000BC   490 G$ADC0CF$0$0 == 0x00bc
                           0000BC   491 _ADC0CF	=	0x00bc
                           0000BD   492 G$P1MDIN$0$0 == 0x00bd
                           0000BD   493 _P1MDIN	=	0x00bd
                           0000BE   494 G$ADC0L$0$0 == 0x00be
                           0000BE   495 _ADC0L	=	0x00be
                           0000BF   496 G$ADC0H$0$0 == 0x00bf
                           0000BF   497 _ADC0H	=	0x00bf
                           0000C0   498 G$SMB0CN$0$0 == 0x00c0
                           0000C0   499 _SMB0CN	=	0x00c0
                           0000C1   500 G$SMB0STA$0$0 == 0x00c1
                           0000C1   501 _SMB0STA	=	0x00c1
                           0000C2   502 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   503 _SMB0DAT	=	0x00c2
                           0000C3   504 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   505 _SMB0ADR	=	0x00c3
                           0000C4   506 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   507 _ADC0GTL	=	0x00c4
                           0000C5   508 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   509 _ADC0GTH	=	0x00c5
                           0000C6   510 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   511 _ADC0LTL	=	0x00c6
                           0000C7   512 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   513 _ADC0LTH	=	0x00c7
                           0000C8   514 G$T2CON$0$0 == 0x00c8
                           0000C8   515 _T2CON	=	0x00c8
                           0000C9   516 G$T4CON$0$0 == 0x00c9
                           0000C9   517 _T4CON	=	0x00c9
                           0000CA   518 G$RCAP2L$0$0 == 0x00ca
                           0000CA   519 _RCAP2L	=	0x00ca
                           0000CB   520 G$RCAP2H$0$0 == 0x00cb
                           0000CB   521 _RCAP2H	=	0x00cb
                           0000CC   522 G$TL2$0$0 == 0x00cc
                           0000CC   523 _TL2	=	0x00cc
                           0000CD   524 G$TH2$0$0 == 0x00cd
                           0000CD   525 _TH2	=	0x00cd
                           0000CF   526 G$SMB0CR$0$0 == 0x00cf
                           0000CF   527 _SMB0CR	=	0x00cf
                           0000D0   528 G$PSW$0$0 == 0x00d0
                           0000D0   529 _PSW	=	0x00d0
                           0000D1   530 G$REF0CN$0$0 == 0x00d1
                           0000D1   531 _REF0CN	=	0x00d1
                           0000D2   532 G$DAC0L$0$0 == 0x00d2
                           0000D2   533 _DAC0L	=	0x00d2
                           0000D3   534 G$DAC0H$0$0 == 0x00d3
                           0000D3   535 _DAC0H	=	0x00d3
                           0000D4   536 G$DAC0CN$0$0 == 0x00d4
                           0000D4   537 _DAC0CN	=	0x00d4
                           0000D5   538 G$DAC1L$0$0 == 0x00d5
                           0000D5   539 _DAC1L	=	0x00d5
                           0000D6   540 G$DAC1H$0$0 == 0x00d6
                           0000D6   541 _DAC1H	=	0x00d6
                           0000D7   542 G$DAC1CN$0$0 == 0x00d7
                           0000D7   543 _DAC1CN	=	0x00d7
                           0000D8   544 G$PCA0CN$0$0 == 0x00d8
                           0000D8   545 _PCA0CN	=	0x00d8
                           0000D9   546 G$PCA0MD$0$0 == 0x00d9
                           0000D9   547 _PCA0MD	=	0x00d9
                           0000DA   548 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   549 _PCA0CPM0	=	0x00da
                           0000DB   550 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   551 _PCA0CPM1	=	0x00db
                           0000DC   552 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   553 _PCA0CPM2	=	0x00dc
                           0000DD   554 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   555 _PCA0CPM3	=	0x00dd
                           0000DE   556 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   557 _PCA0CPM4	=	0x00de
                           0000E0   558 G$ACC$0$0 == 0x00e0
                           0000E0   559 _ACC	=	0x00e0
                           0000E1   560 G$XBR0$0$0 == 0x00e1
                           0000E1   561 _XBR0	=	0x00e1
                           0000E2   562 G$XBR1$0$0 == 0x00e2
                           0000E2   563 _XBR1	=	0x00e2
                           0000E3   564 G$XBR2$0$0 == 0x00e3
                           0000E3   565 _XBR2	=	0x00e3
                           0000E4   566 G$RCAP4L$0$0 == 0x00e4
                           0000E4   567 _RCAP4L	=	0x00e4
                           0000E5   568 G$RCAP4H$0$0 == 0x00e5
                           0000E5   569 _RCAP4H	=	0x00e5
                           0000E6   570 G$EIE1$0$0 == 0x00e6
                           0000E6   571 _EIE1	=	0x00e6
                           0000E7   572 G$EIE2$0$0 == 0x00e7
                           0000E7   573 _EIE2	=	0x00e7
                           0000E8   574 G$ADC0CN$0$0 == 0x00e8
                           0000E8   575 _ADC0CN	=	0x00e8
                           0000E9   576 G$PCA0L$0$0 == 0x00e9
                           0000E9   577 _PCA0L	=	0x00e9
                           0000EA   578 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   579 _PCA0CPL0	=	0x00ea
                           0000EB   580 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   581 _PCA0CPL1	=	0x00eb
                           0000EC   582 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   583 _PCA0CPL2	=	0x00ec
                           0000ED   584 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   585 _PCA0CPL3	=	0x00ed
                           0000EE   586 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   587 _PCA0CPL4	=	0x00ee
                           0000EF   588 G$RSTSRC$0$0 == 0x00ef
                           0000EF   589 _RSTSRC	=	0x00ef
                           0000F0   590 G$B$0$0 == 0x00f0
                           0000F0   591 _B	=	0x00f0
                           0000F1   592 G$SCON1$0$0 == 0x00f1
                           0000F1   593 _SCON1	=	0x00f1
                           0000F2   594 G$SBUF1$0$0 == 0x00f2
                           0000F2   595 _SBUF1	=	0x00f2
                           0000F3   596 G$SADDR1$0$0 == 0x00f3
                           0000F3   597 _SADDR1	=	0x00f3
                           0000F4   598 G$TL4$0$0 == 0x00f4
                           0000F4   599 _TL4	=	0x00f4
                           0000F5   600 G$TH4$0$0 == 0x00f5
                           0000F5   601 _TH4	=	0x00f5
                           0000F6   602 G$EIP1$0$0 == 0x00f6
                           0000F6   603 _EIP1	=	0x00f6
                           0000F7   604 G$EIP2$0$0 == 0x00f7
                           0000F7   605 _EIP2	=	0x00f7
                           0000F8   606 G$SPI0CN$0$0 == 0x00f8
                           0000F8   607 _SPI0CN	=	0x00f8
                           0000F9   608 G$PCA0H$0$0 == 0x00f9
                           0000F9   609 _PCA0H	=	0x00f9
                           0000FA   610 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   611 _PCA0CPH0	=	0x00fa
                           0000FB   612 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   613 _PCA0CPH1	=	0x00fb
                           0000FC   614 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   615 _PCA0CPH2	=	0x00fc
                           0000FD   616 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   617 _PCA0CPH3	=	0x00fd
                           0000FE   618 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   619 _PCA0CPH4	=	0x00fe
                           0000FF   620 G$WDTCN$0$0 == 0x00ff
                           0000FF   621 _WDTCN	=	0x00ff
                           008C8A   622 G$TMR0$0$0 == 0x8c8a
                           008C8A   623 _TMR0	=	0x8c8a
                           008D8B   624 G$TMR1$0$0 == 0x8d8b
                           008D8B   625 _TMR1	=	0x8d8b
                           00CDCC   626 G$TMR2$0$0 == 0xcdcc
                           00CDCC   627 _TMR2	=	0xcdcc
                           00CBCA   628 G$RCAP2$0$0 == 0xcbca
                           00CBCA   629 _RCAP2	=	0xcbca
                           009594   630 G$TMR3$0$0 == 0x9594
                           009594   631 _TMR3	=	0x9594
                           009392   632 G$TMR3RL$0$0 == 0x9392
                           009392   633 _TMR3RL	=	0x9392
                           00F5F4   634 G$TMR4$0$0 == 0xf5f4
                           00F5F4   635 _TMR4	=	0xf5f4
                           00E5E4   636 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   637 _RCAP4	=	0xe5e4
                           00BFBE   638 G$ADC0$0$0 == 0xbfbe
                           00BFBE   639 _ADC0	=	0xbfbe
                           00C5C4   640 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   641 _ADC0GT	=	0xc5c4
                           00C7C6   642 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   643 _ADC0LT	=	0xc7c6
                           00D3D2   644 G$DAC0$0$0 == 0xd3d2
                           00D3D2   645 _DAC0	=	0xd3d2
                           00D6D5   646 G$DAC1$0$0 == 0xd6d5
                           00D6D5   647 _DAC1	=	0xd6d5
                           00F9E9   648 G$PCA0$0$0 == 0xf9e9
                           00F9E9   649 _PCA0	=	0xf9e9
                           00FAEA   650 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   651 _PCA0CP0	=	0xfaea
                           00FBEB   652 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   653 _PCA0CP1	=	0xfbeb
                           00FCEC   654 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   655 _PCA0CP2	=	0xfcec
                           00FDED   656 G$PCA0CP3$0$0 == 0xfded
                           00FDED   657 _PCA0CP3	=	0xfded
                           00FEEE   658 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   659 _PCA0CP4	=	0xfeee
                                    660 ;--------------------------------------------------------
                                    661 ; special function bits
                                    662 ;--------------------------------------------------------
                                    663 	.area RSEG    (ABS,DATA)
      000000                        664 	.org 0x0000
                           000080   665 G$P0_0$0$0 == 0x0080
                           000080   666 _P0_0	=	0x0080
                           000081   667 G$P0_1$0$0 == 0x0081
                           000081   668 _P0_1	=	0x0081
                           000082   669 G$P0_2$0$0 == 0x0082
                           000082   670 _P0_2	=	0x0082
                           000083   671 G$P0_3$0$0 == 0x0083
                           000083   672 _P0_3	=	0x0083
                           000084   673 G$P0_4$0$0 == 0x0084
                           000084   674 _P0_4	=	0x0084
                           000085   675 G$P0_5$0$0 == 0x0085
                           000085   676 _P0_5	=	0x0085
                           000086   677 G$P0_6$0$0 == 0x0086
                           000086   678 _P0_6	=	0x0086
                           000087   679 G$P0_7$0$0 == 0x0087
                           000087   680 _P0_7	=	0x0087
                           000088   681 G$IT0$0$0 == 0x0088
                           000088   682 _IT0	=	0x0088
                           000089   683 G$IE0$0$0 == 0x0089
                           000089   684 _IE0	=	0x0089
                           00008A   685 G$IT1$0$0 == 0x008a
                           00008A   686 _IT1	=	0x008a
                           00008B   687 G$IE1$0$0 == 0x008b
                           00008B   688 _IE1	=	0x008b
                           00008C   689 G$TR0$0$0 == 0x008c
                           00008C   690 _TR0	=	0x008c
                           00008D   691 G$TF0$0$0 == 0x008d
                           00008D   692 _TF0	=	0x008d
                           00008E   693 G$TR1$0$0 == 0x008e
                           00008E   694 _TR1	=	0x008e
                           00008F   695 G$TF1$0$0 == 0x008f
                           00008F   696 _TF1	=	0x008f
                           000090   697 G$P1_0$0$0 == 0x0090
                           000090   698 _P1_0	=	0x0090
                           000091   699 G$P1_1$0$0 == 0x0091
                           000091   700 _P1_1	=	0x0091
                           000092   701 G$P1_2$0$0 == 0x0092
                           000092   702 _P1_2	=	0x0092
                           000093   703 G$P1_3$0$0 == 0x0093
                           000093   704 _P1_3	=	0x0093
                           000094   705 G$P1_4$0$0 == 0x0094
                           000094   706 _P1_4	=	0x0094
                           000095   707 G$P1_5$0$0 == 0x0095
                           000095   708 _P1_5	=	0x0095
                           000096   709 G$P1_6$0$0 == 0x0096
                           000096   710 _P1_6	=	0x0096
                           000097   711 G$P1_7$0$0 == 0x0097
                           000097   712 _P1_7	=	0x0097
                           000098   713 G$RI$0$0 == 0x0098
                           000098   714 _RI	=	0x0098
                           000098   715 G$RI0$0$0 == 0x0098
                           000098   716 _RI0	=	0x0098
                           000099   717 G$TI$0$0 == 0x0099
                           000099   718 _TI	=	0x0099
                           000099   719 G$TI0$0$0 == 0x0099
                           000099   720 _TI0	=	0x0099
                           00009A   721 G$RB8$0$0 == 0x009a
                           00009A   722 _RB8	=	0x009a
                           00009A   723 G$RB80$0$0 == 0x009a
                           00009A   724 _RB80	=	0x009a
                           00009B   725 G$TB8$0$0 == 0x009b
                           00009B   726 _TB8	=	0x009b
                           00009B   727 G$TB80$0$0 == 0x009b
                           00009B   728 _TB80	=	0x009b
                           00009C   729 G$REN$0$0 == 0x009c
                           00009C   730 _REN	=	0x009c
                           00009C   731 G$REN0$0$0 == 0x009c
                           00009C   732 _REN0	=	0x009c
                           00009D   733 G$SM2$0$0 == 0x009d
                           00009D   734 _SM2	=	0x009d
                           00009D   735 G$SM20$0$0 == 0x009d
                           00009D   736 _SM20	=	0x009d
                           00009D   737 G$MCE0$0$0 == 0x009d
                           00009D   738 _MCE0	=	0x009d
                           00009E   739 G$SM1$0$0 == 0x009e
                           00009E   740 _SM1	=	0x009e
                           00009E   741 G$SM10$0$0 == 0x009e
                           00009E   742 _SM10	=	0x009e
                           00009F   743 G$SM0$0$0 == 0x009f
                           00009F   744 _SM0	=	0x009f
                           00009F   745 G$SM00$0$0 == 0x009f
                           00009F   746 _SM00	=	0x009f
                           00009F   747 G$S0MODE$0$0 == 0x009f
                           00009F   748 _S0MODE	=	0x009f
                           0000A0   749 G$P2_0$0$0 == 0x00a0
                           0000A0   750 _P2_0	=	0x00a0
                           0000A1   751 G$P2_1$0$0 == 0x00a1
                           0000A1   752 _P2_1	=	0x00a1
                           0000A2   753 G$P2_2$0$0 == 0x00a2
                           0000A2   754 _P2_2	=	0x00a2
                           0000A3   755 G$P2_3$0$0 == 0x00a3
                           0000A3   756 _P2_3	=	0x00a3
                           0000A4   757 G$P2_4$0$0 == 0x00a4
                           0000A4   758 _P2_4	=	0x00a4
                           0000A5   759 G$P2_5$0$0 == 0x00a5
                           0000A5   760 _P2_5	=	0x00a5
                           0000A6   761 G$P2_6$0$0 == 0x00a6
                           0000A6   762 _P2_6	=	0x00a6
                           0000A7   763 G$P2_7$0$0 == 0x00a7
                           0000A7   764 _P2_7	=	0x00a7
                           0000A8   765 G$EX0$0$0 == 0x00a8
                           0000A8   766 _EX0	=	0x00a8
                           0000A9   767 G$ET0$0$0 == 0x00a9
                           0000A9   768 _ET0	=	0x00a9
                           0000AA   769 G$EX1$0$0 == 0x00aa
                           0000AA   770 _EX1	=	0x00aa
                           0000AB   771 G$ET1$0$0 == 0x00ab
                           0000AB   772 _ET1	=	0x00ab
                           0000AC   773 G$ES0$0$0 == 0x00ac
                           0000AC   774 _ES0	=	0x00ac
                           0000AC   775 G$ES$0$0 == 0x00ac
                           0000AC   776 _ES	=	0x00ac
                           0000AD   777 G$ET2$0$0 == 0x00ad
                           0000AD   778 _ET2	=	0x00ad
                           0000AF   779 G$EA$0$0 == 0x00af
                           0000AF   780 _EA	=	0x00af
                           0000B0   781 G$P3_0$0$0 == 0x00b0
                           0000B0   782 _P3_0	=	0x00b0
                           0000B1   783 G$P3_1$0$0 == 0x00b1
                           0000B1   784 _P3_1	=	0x00b1
                           0000B2   785 G$P3_2$0$0 == 0x00b2
                           0000B2   786 _P3_2	=	0x00b2
                           0000B3   787 G$P3_3$0$0 == 0x00b3
                           0000B3   788 _P3_3	=	0x00b3
                           0000B4   789 G$P3_4$0$0 == 0x00b4
                           0000B4   790 _P3_4	=	0x00b4
                           0000B5   791 G$P3_5$0$0 == 0x00b5
                           0000B5   792 _P3_5	=	0x00b5
                           0000B6   793 G$P3_6$0$0 == 0x00b6
                           0000B6   794 _P3_6	=	0x00b6
                           0000B7   795 G$P3_7$0$0 == 0x00b7
                           0000B7   796 _P3_7	=	0x00b7
                           0000B8   797 G$PX0$0$0 == 0x00b8
                           0000B8   798 _PX0	=	0x00b8
                           0000B9   799 G$PT0$0$0 == 0x00b9
                           0000B9   800 _PT0	=	0x00b9
                           0000BA   801 G$PX1$0$0 == 0x00ba
                           0000BA   802 _PX1	=	0x00ba
                           0000BB   803 G$PT1$0$0 == 0x00bb
                           0000BB   804 _PT1	=	0x00bb
                           0000BC   805 G$PS0$0$0 == 0x00bc
                           0000BC   806 _PS0	=	0x00bc
                           0000BC   807 G$PS$0$0 == 0x00bc
                           0000BC   808 _PS	=	0x00bc
                           0000BD   809 G$PT2$0$0 == 0x00bd
                           0000BD   810 _PT2	=	0x00bd
                           0000C0   811 G$SMBTOE$0$0 == 0x00c0
                           0000C0   812 _SMBTOE	=	0x00c0
                           0000C1   813 G$SMBFTE$0$0 == 0x00c1
                           0000C1   814 _SMBFTE	=	0x00c1
                           0000C2   815 G$AA$0$0 == 0x00c2
                           0000C2   816 _AA	=	0x00c2
                           0000C3   817 G$SI$0$0 == 0x00c3
                           0000C3   818 _SI	=	0x00c3
                           0000C4   819 G$STO$0$0 == 0x00c4
                           0000C4   820 _STO	=	0x00c4
                           0000C5   821 G$STA$0$0 == 0x00c5
                           0000C5   822 _STA	=	0x00c5
                           0000C6   823 G$ENSMB$0$0 == 0x00c6
                           0000C6   824 _ENSMB	=	0x00c6
                           0000C7   825 G$BUSY$0$0 == 0x00c7
                           0000C7   826 _BUSY	=	0x00c7
                           0000C8   827 G$CPRL2$0$0 == 0x00c8
                           0000C8   828 _CPRL2	=	0x00c8
                           0000C9   829 G$CT2$0$0 == 0x00c9
                           0000C9   830 _CT2	=	0x00c9
                           0000CA   831 G$TR2$0$0 == 0x00ca
                           0000CA   832 _TR2	=	0x00ca
                           0000CB   833 G$EXEN2$0$0 == 0x00cb
                           0000CB   834 _EXEN2	=	0x00cb
                           0000CC   835 G$TCLK$0$0 == 0x00cc
                           0000CC   836 _TCLK	=	0x00cc
                           0000CD   837 G$RCLK$0$0 == 0x00cd
                           0000CD   838 _RCLK	=	0x00cd
                           0000CE   839 G$EXF2$0$0 == 0x00ce
                           0000CE   840 _EXF2	=	0x00ce
                           0000CF   841 G$TF2$0$0 == 0x00cf
                           0000CF   842 _TF2	=	0x00cf
                           0000D0   843 G$P$0$0 == 0x00d0
                           0000D0   844 _P	=	0x00d0
                           0000D1   845 G$F1$0$0 == 0x00d1
                           0000D1   846 _F1	=	0x00d1
                           0000D2   847 G$OV$0$0 == 0x00d2
                           0000D2   848 _OV	=	0x00d2
                           0000D3   849 G$RS0$0$0 == 0x00d3
                           0000D3   850 _RS0	=	0x00d3
                           0000D4   851 G$RS1$0$0 == 0x00d4
                           0000D4   852 _RS1	=	0x00d4
                           0000D5   853 G$F0$0$0 == 0x00d5
                           0000D5   854 _F0	=	0x00d5
                           0000D6   855 G$AC$0$0 == 0x00d6
                           0000D6   856 _AC	=	0x00d6
                           0000D7   857 G$CY$0$0 == 0x00d7
                           0000D7   858 _CY	=	0x00d7
                           0000D8   859 G$CCF0$0$0 == 0x00d8
                           0000D8   860 _CCF0	=	0x00d8
                           0000D9   861 G$CCF1$0$0 == 0x00d9
                           0000D9   862 _CCF1	=	0x00d9
                           0000DA   863 G$CCF2$0$0 == 0x00da
                           0000DA   864 _CCF2	=	0x00da
                           0000DB   865 G$CCF3$0$0 == 0x00db
                           0000DB   866 _CCF3	=	0x00db
                           0000DC   867 G$CCF4$0$0 == 0x00dc
                           0000DC   868 _CCF4	=	0x00dc
                           0000DE   869 G$CR$0$0 == 0x00de
                           0000DE   870 _CR	=	0x00de
                           0000DF   871 G$CF$0$0 == 0x00df
                           0000DF   872 _CF	=	0x00df
                           0000E8   873 G$ADLJST$0$0 == 0x00e8
                           0000E8   874 _ADLJST	=	0x00e8
                           0000E8   875 G$AD0LJST$0$0 == 0x00e8
                           0000E8   876 _AD0LJST	=	0x00e8
                           0000E9   877 G$ADWINT$0$0 == 0x00e9
                           0000E9   878 _ADWINT	=	0x00e9
                           0000E9   879 G$AD0WINT$0$0 == 0x00e9
                           0000E9   880 _AD0WINT	=	0x00e9
                           0000EA   881 G$ADSTM0$0$0 == 0x00ea
                           0000EA   882 _ADSTM0	=	0x00ea
                           0000EA   883 G$AD0CM0$0$0 == 0x00ea
                           0000EA   884 _AD0CM0	=	0x00ea
                           0000EB   885 G$ADSTM1$0$0 == 0x00eb
                           0000EB   886 _ADSTM1	=	0x00eb
                           0000EB   887 G$AD0CM1$0$0 == 0x00eb
                           0000EB   888 _AD0CM1	=	0x00eb
                           0000EC   889 G$ADBUSY$0$0 == 0x00ec
                           0000EC   890 _ADBUSY	=	0x00ec
                           0000EC   891 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   892 _AD0BUSY	=	0x00ec
                           0000ED   893 G$ADCINT$0$0 == 0x00ed
                           0000ED   894 _ADCINT	=	0x00ed
                           0000ED   895 G$AD0INT$0$0 == 0x00ed
                           0000ED   896 _AD0INT	=	0x00ed
                           0000EE   897 G$ADCTM$0$0 == 0x00ee
                           0000EE   898 _ADCTM	=	0x00ee
                           0000EE   899 G$AD0TM$0$0 == 0x00ee
                           0000EE   900 _AD0TM	=	0x00ee
                           0000EF   901 G$ADCEN$0$0 == 0x00ef
                           0000EF   902 _ADCEN	=	0x00ef
                           0000EF   903 G$AD0EN$0$0 == 0x00ef
                           0000EF   904 _AD0EN	=	0x00ef
                           0000F8   905 G$SPIEN$0$0 == 0x00f8
                           0000F8   906 _SPIEN	=	0x00f8
                           0000F9   907 G$MSTEN$0$0 == 0x00f9
                           0000F9   908 _MSTEN	=	0x00f9
                           0000FA   909 G$SLVSEL$0$0 == 0x00fa
                           0000FA   910 _SLVSEL	=	0x00fa
                           0000FB   911 G$TXBSY$0$0 == 0x00fb
                           0000FB   912 _TXBSY	=	0x00fb
                           0000FC   913 G$RXOVRN$0$0 == 0x00fc
                           0000FC   914 _RXOVRN	=	0x00fc
                           0000FD   915 G$MODF$0$0 == 0x00fd
                           0000FD   916 _MODF	=	0x00fd
                           0000FE   917 G$WCOL$0$0 == 0x00fe
                           0000FE   918 _WCOL	=	0x00fe
                           0000FF   919 G$SPIF$0$0 == 0x00ff
                           0000FF   920 _SPIF	=	0x00ff
                           0000C7   921 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   922 _BUS_BUSY	=	0x00c7
                           0000C6   923 G$BUS_EN$0$0 == 0x00c6
                           0000C6   924 _BUS_EN	=	0x00c6
                           0000C5   925 G$BUS_START$0$0 == 0x00c5
                           0000C5   926 _BUS_START	=	0x00c5
                           0000C4   927 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   928 _BUS_STOP	=	0x00c4
                           0000C3   929 G$BUS_INT$0$0 == 0x00c3
                           0000C3   930 _BUS_INT	=	0x00c3
                           0000C2   931 G$BUS_AA$0$0 == 0x00c2
                           0000C2   932 _BUS_AA	=	0x00c2
                           0000C1   933 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   934 _BUS_FTE	=	0x00c1
                           0000C0   935 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   936 _BUS_TOE	=	0x00c0
                           000083   937 G$BUS_SCL$0$0 == 0x0083
                           000083   938 _BUS_SCL	=	0x0083
                                    939 ;--------------------------------------------------------
                                    940 ; overlayable register banks
                                    941 ;--------------------------------------------------------
                                    942 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        943 	.ds 8
                                    944 ;--------------------------------------------------------
                                    945 ; internal ram data
                                    946 ;--------------------------------------------------------
                                    947 	.area DSEG    (DATA)
                           000000   948 G$Data2$0$0==.
      000000                        949 _Data2::
      000000                        950 	.ds 3
                           000003   951 Llab6.aligned_alloc$size$1$39==.
      000003                        952 _aligned_alloc_PARM_2:
      000003                        953 	.ds 2
                           000005   954 Llab6.lcd_clear$NumBytes$1$85==.
      000005                        955 _lcd_clear_NumBytes_1_85:
      000005                        956 	.ds 1
                           000006   957 Llab6.lcd_clear$Cmd$1$85==.
      000006                        958 _lcd_clear_Cmd_1_85:
      000006                        959 	.ds 2
                           000008   960 Llab6.read_keypad$Data$1$86==.
      000008                        961 _read_keypad_Data_1_86:
      000008                        962 	.ds 2
                           00000A   963 Llab6.i2c_write_data$start_reg$1$105==.
      00000A                        964 _i2c_write_data_PARM_2:
      00000A                        965 	.ds 1
                           00000B   966 Llab6.i2c_write_data$buffer$1$105==.
      00000B                        967 _i2c_write_data_PARM_3:
      00000B                        968 	.ds 3
                           00000E   969 Llab6.i2c_write_data$num_bytes$1$105==.
      00000E                        970 _i2c_write_data_PARM_4:
      00000E                        971 	.ds 1
                           00000F   972 Llab6.i2c_read_data$start_reg$1$107==.
      00000F                        973 _i2c_read_data_PARM_2:
      00000F                        974 	.ds 1
                           000010   975 Llab6.i2c_read_data$buffer$1$107==.
      000010                        976 _i2c_read_data_PARM_3:
      000010                        977 	.ds 3
                           000013   978 Llab6.i2c_read_data$num_bytes$1$107==.
      000013                        979 _i2c_read_data_PARM_4:
      000013                        980 	.ds 1
                           000014   981 G$ccount$0$0==.
      000014                        982 _ccount::
      000014                        983 	.ds 1
                           000015   984 G$rcount$0$0==.
      000015                        985 _rcount::
      000015                        986 	.ds 1
                           000016   987 G$count$0$0==.
      000016                        988 _count::
      000016                        989 	.ds 1
                           000017   990 G$heading$0$0==.
      000017                        991 _heading::
      000017                        992 	.ds 2
                           000019   993 G$desired$0$0==.
      000019                        994 _desired::
      000019                        995 	.ds 2
                           00001B   996 G$desired_original$0$0==.
      00001B                        997 _desired_original::
      00001B                        998 	.ds 2
                           00001D   999 G$print_count$0$0==.
      00001D                       1000 _print_count::
      00001D                       1001 	.ds 1
                           00001E  1002 G$input$0$0==.
      00001E                       1003 _input::
      00001E                       1004 	.ds 1
                           00001F  1005 G$Data$0$0==.
      00001F                       1006 _Data::
      00001F                       1007 	.ds 2
                           000021  1008 G$battery$0$0==.
      000021                       1009 _battery::
      000021                       1010 	.ds 2
                           000023  1011 G$rangervalue$0$0==.
      000023                       1012 _rangervalue::
      000023                       1013 	.ds 2
                           000025  1014 G$left_PW$0$0==.
      000025                       1015 _left_PW::
      000025                       1016 	.ds 4
                           000029  1017 G$right_PW$0$0==.
      000029                       1018 _right_PW::
      000029                       1019 	.ds 4
                           00002D  1020 G$error$0$0==.
      00002D                       1021 _error::
      00002D                       1022 	.ds 2
                           00002F  1023 G$prev_error$0$0==.
      00002F                       1024 _prev_error::
      00002F                       1025 	.ds 2
                           000031  1026 G$kp$0$0==.
      000031                       1027 _kp::
      000031                       1028 	.ds 4
                           000035  1029 G$kd$0$0==.
      000035                       1030 _kd::
      000035                       1031 	.ds 2
                           000037  1032 G$PW_vert$0$0==.
      000037                       1033 _PW_vert::
      000037                       1034 	.ds 2
                           000039  1035 G$angle_PW$0$0==.
      000039                       1036 _angle_PW::
      000039                       1037 	.ds 2
                                   1038 ;--------------------------------------------------------
                                   1039 ; overlayable items in internal ram 
                                   1040 ;--------------------------------------------------------
                                   1041 	.area	OSEG    (OVR,DATA)
                                   1042 	.area	OSEG    (OVR,DATA)
                                   1043 	.area	OSEG    (OVR,DATA)
                                   1044 	.area	OSEG    (OVR,DATA)
                                   1045 	.area	OSEG    (OVR,DATA)
                                   1046 	.area	OSEG    (OVR,DATA)
                                   1047 	.area	OSEG    (OVR,DATA)
                                   1048 ;--------------------------------------------------------
                                   1049 ; Stack segment in internal ram 
                                   1050 ;--------------------------------------------------------
                                   1051 	.area	SSEG
      000000                       1052 __start__stack:
      000000                       1053 	.ds	1
                                   1054 
                                   1055 ;--------------------------------------------------------
                                   1056 ; indirectly addressable internal ram data
                                   1057 ;--------------------------------------------------------
                                   1058 	.area ISEG    (DATA)
                                   1059 ;--------------------------------------------------------
                                   1060 ; absolute internal ram data
                                   1061 ;--------------------------------------------------------
                                   1062 	.area IABS    (ABS,DATA)
                                   1063 	.area IABS    (ABS,DATA)
                                   1064 ;--------------------------------------------------------
                                   1065 ; bit data
                                   1066 ;--------------------------------------------------------
                                   1067 	.area BSEG    (BIT)
                                   1068 ;--------------------------------------------------------
                                   1069 ; paged external ram data
                                   1070 ;--------------------------------------------------------
                                   1071 	.area PSEG    (PAG,XDATA)
                                   1072 ;--------------------------------------------------------
                                   1073 ; external ram data
                                   1074 ;--------------------------------------------------------
                                   1075 	.area XSEG    (XDATA)
                           000000  1076 Llab6.lcd_print$text$1$81==.
      000000                       1077 _lcd_print_text_1_81:
      000000                       1078 	.ds 80
                                   1079 ;--------------------------------------------------------
                                   1080 ; absolute external ram data
                                   1081 ;--------------------------------------------------------
                                   1082 	.area XABS    (ABS,XDATA)
                                   1083 ;--------------------------------------------------------
                                   1084 ; external initialized ram data
                                   1085 ;--------------------------------------------------------
                                   1086 	.area XISEG   (XDATA)
                                   1087 	.area HOME    (CODE)
                                   1088 	.area GSINIT0 (CODE)
                                   1089 	.area GSINIT1 (CODE)
                                   1090 	.area GSINIT2 (CODE)
                                   1091 	.area GSINIT3 (CODE)
                                   1092 	.area GSINIT4 (CODE)
                                   1093 	.area GSINIT5 (CODE)
                                   1094 	.area GSINIT  (CODE)
                                   1095 	.area GSFINAL (CODE)
                                   1096 	.area CSEG    (CODE)
                                   1097 ;--------------------------------------------------------
                                   1098 ; interrupt vector 
                                   1099 ;--------------------------------------------------------
                                   1100 	.area HOME    (CODE)
      000000                       1101 __interrupt_vect:
      000000 02r00r00         [24] 1102 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1103 	reti
      000004                       1104 	.ds	7
      00000B 32               [24] 1105 	reti
      00000C                       1106 	.ds	7
      000013 32               [24] 1107 	reti
      000014                       1108 	.ds	7
      00001B 32               [24] 1109 	reti
      00001C                       1110 	.ds	7
      000023 32               [24] 1111 	reti
      000024                       1112 	.ds	7
      00002B 32               [24] 1113 	reti
      00002C                       1114 	.ds	7
      000033 32               [24] 1115 	reti
      000034                       1116 	.ds	7
      00003B 32               [24] 1117 	reti
      00003C                       1118 	.ds	7
      000043 32               [24] 1119 	reti
      000044                       1120 	.ds	7
      00004B 02r0Ar77         [24] 1121 	ljmp	_PCA_ISR
                                   1122 ;--------------------------------------------------------
                                   1123 ; global & static initialisations
                                   1124 ;--------------------------------------------------------
                                   1125 	.area HOME    (CODE)
                                   1126 	.area GSINIT  (CODE)
                                   1127 	.area GSFINAL (CODE)
                                   1128 	.area GSINIT  (CODE)
                                   1129 	.globl __sdcc_gsinit_startup
                                   1130 	.globl __sdcc_program_startup
                                   1131 	.globl __start__stack
                                   1132 	.globl __mcs51_genXINIT
                                   1133 	.globl __mcs51_genXRAMCLEAR
                                   1134 	.globl __mcs51_genRAMCLEAR
                           000000  1135 	C$lab6.c$32$1$155 ==.
                                   1136 ;	C:\SiLabs\LITEC\Lab6\lab6.c:32: unsigned char ccount = 0;//counter for the compass
      000000 75*14 00         [24] 1137 	mov	_ccount,#0x00
                           000003  1138 	C$lab6.c$33$1$155 ==.
                                   1139 ;	C:\SiLabs\LITEC\Lab6\lab6.c:33: unsigned char rcount = 0;//counter for the ranger
      000003 75*15 00         [24] 1140 	mov	_rcount,#0x00
                           000006  1141 	C$lab6.c$34$1$155 ==.
                                   1142 ;	C:\SiLabs\LITEC\Lab6\lab6.c:34: unsigned char count = 0;//general counter for delays
      000006 75*16 00         [24] 1143 	mov	_count,#0x00
                           000009  1144 	C$lab6.c$36$1$155 ==.
                                   1145 ;	C:\SiLabs\LITEC\Lab6\lab6.c:36: signed int heading = 2100;//actual heading, updated from compass
      000009 75*17 34         [24] 1146 	mov	_heading,#0x34
      00000C 75*18 08         [24] 1147 	mov	(_heading + 1),#0x08
                           00000F  1148 	C$lab6.c$37$1$155 ==.
                                   1149 ;	C:\SiLabs\LITEC\Lab6\lab6.c:37: signed int desired = 2700;//desired heading, set by ranger
      00000F 75*19 8C         [24] 1150 	mov	_desired,#0x8c
      000012 75*1A 0A         [24] 1151 	mov	(_desired + 1),#0x0a
                           000015  1152 	C$lab6.c$38$1$155 ==.
                                   1153 ;	C:\SiLabs\LITEC\Lab6\lab6.c:38: signed int desired_original=2700;//original desired heading set by user
      000015 75*1B 8C         [24] 1154 	mov	_desired_original,#0x8c
      000018 75*1C 0A         [24] 1155 	mov	(_desired_original + 1),#0x0a
                           00001B  1156 	C$lab6.c$39$1$155 ==.
                                   1157 ;	C:\SiLabs\LITEC\Lab6\lab6.c:39: unsigned char print_count = 0;//counter for printing readings
      00001B 75*1D 00         [24] 1158 	mov	_print_count,#0x00
                           00001E  1159 	C$lab6.c$40$1$155 ==.
                                   1160 ;	C:\SiLabs\LITEC\Lab6\lab6.c:40: unsigned char input='a';//used for getting input
      00001E 75*1E 61         [24] 1161 	mov	_input,#0x61
                           000021  1162 	C$lab6.c$42$1$155 ==.
                                   1163 ;	C:\SiLabs\LITEC\Lab6\lab6.c:42: unsigned int battery=0;//holds battery voltage from ADC
      000021 E4               [12] 1164 	clr	a
      000022 F5*21            [12] 1165 	mov	_battery,a
      000024 F5*22            [12] 1166 	mov	(_battery + 1),a
                           000026  1167 	C$lab6.c$43$1$155 ==.
                                   1168 ;	C:\SiLabs\LITEC\Lab6\lab6.c:43: unsigned int rangervalue=50;//holds data from the ranger
      000026 75*23 32         [24] 1169 	mov	_rangervalue,#0x32
                                   1170 ;	1-genFromRTrack replaced	mov	(_rangervalue + 1),#0x00
      000029 F5*24            [12] 1171 	mov	(_rangervalue + 1),a
                           00002B  1172 	C$lab6.c$51$1$155 ==.
                                   1173 ;	C:\SiLabs\LITEC\Lab6\lab6.c:51: signed long left_PW = 2765;//pulsewidth for left motor
      00002B 75*25 CD         [24] 1174 	mov	_left_PW,#0xcd
      00002E 75*26 0A         [24] 1175 	mov	(_left_PW + 1),#0x0a
      000031 F5*27            [12] 1176 	mov	(_left_PW + 2),a
      000033 F5*28            [12] 1177 	mov	(_left_PW + 3),a
                           000035  1178 	C$lab6.c$52$1$155 ==.
                                   1179 ;	C:\SiLabs\LITEC\Lab6\lab6.c:52: signed long right_PW = 2765;//pulsewidth for right motor
      000035 75*29 CD         [24] 1180 	mov	_right_PW,#0xcd
      000038 75*2A 0A         [24] 1181 	mov	(_right_PW + 1),#0x0a
      00003B F5*2B            [12] 1182 	mov	(_right_PW + 2),a
      00003D F5*2C            [12] 1183 	mov	(_right_PW + 3),a
                           00003F  1184 	C$lab6.c$53$1$155 ==.
                                   1185 ;	C:\SiLabs\LITEC\Lab6\lab6.c:53: signed int error=0;//heading error
      00003F F5*2D            [12] 1186 	mov	_error,a
      000041 F5*2E            [12] 1187 	mov	(_error + 1),a
                           000043  1188 	C$lab6.c$54$1$155 ==.
                                   1189 ;	C:\SiLabs\LITEC\Lab6\lab6.c:54: signed int prev_error=0;//previous heading error
      000043 F5*2F            [12] 1190 	mov	_prev_error,a
      000045 F5*30            [12] 1191 	mov	(_prev_error + 1),a
                           000047  1192 	C$lab6.c$55$1$155 ==.
                                   1193 ;	C:\SiLabs\LITEC\Lab6\lab6.c:55: float kp=.3;//p gain
      000047 75*31 9A         [24] 1194 	mov	_kp,#0x9a
      00004A 75*32 99         [24] 1195 	mov	(_kp + 1),#0x99
      00004D 75*33 99         [24] 1196 	mov	(_kp + 2),#0x99
      000050 75*34 3E         [24] 1197 	mov	(_kp + 3),#0x3e
                           000053  1198 	C$lab6.c$56$1$155 ==.
                                   1199 ;	C:\SiLabs\LITEC\Lab6\lab6.c:56: unsigned int kd=160;//d gain
      000053 75*35 A0         [24] 1200 	mov	_kd,#0xa0
                                   1201 ;	1-genFromRTrack replaced	mov	(_kd + 1),#0x00
      000056 F5*36            [12] 1202 	mov	(_kd + 1),a
                           000058  1203 	C$lab6.c$59$1$155 ==.
                                   1204 ;	C:\SiLabs\LITEC\Lab6\lab6.c:59: unsigned int PW_vert = 3502;//calibrated at beginning of program
      000058 75*37 AE         [24] 1205 	mov	_PW_vert,#0xae
      00005B 75*38 0D         [24] 1206 	mov	(_PW_vert + 1),#0x0d
                           00005E  1207 	C$lab6.c$60$1$155 ==.
                                   1208 ;	C:\SiLabs\LITEC\Lab6\lab6.c:60: unsigned int angle_PW = 3064;//used to set rotor angle
      00005E 75*39 F8         [24] 1209 	mov	_angle_PW,#0xf8
      000061 75*3A 0B         [24] 1210 	mov	(_angle_PW + 1),#0x0b
                                   1211 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1212 	ljmp	__sdcc_program_startup
                                   1213 ;--------------------------------------------------------
                                   1214 ; Home
                                   1215 ;--------------------------------------------------------
                                   1216 	.area HOME    (CODE)
                                   1217 	.area HOME    (CODE)
      00004E                       1218 __sdcc_program_startup:
      00004E 02r05r02         [24] 1219 	ljmp	_main
                                   1220 ;	return from main will return to caller
                                   1221 ;--------------------------------------------------------
                                   1222 ; code
                                   1223 ;--------------------------------------------------------
                                   1224 	.area CSEG    (CODE)
                                   1225 ;------------------------------------------------------------
                                   1226 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1227 ;------------------------------------------------------------
                                   1228 ;i                         Allocated to registers r6 r7 
                                   1229 ;------------------------------------------------------------
                           000000  1230 	G$SYSCLK_Init$0$0 ==.
                           000000  1231 	C$c8051_SDCC.h$42$0$0 ==.
                                   1232 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:42: void SYSCLK_Init(void)
                                   1233 ;	-----------------------------------------
                                   1234 ;	 function SYSCLK_Init
                                   1235 ;	-----------------------------------------
      000000                       1236 _SYSCLK_Init:
                           000007  1237 	ar7 = 0x07
                           000006  1238 	ar6 = 0x06
                           000005  1239 	ar5 = 0x05
                           000004  1240 	ar4 = 0x04
                           000003  1241 	ar3 = 0x03
                           000002  1242 	ar2 = 0x02
                           000001  1243 	ar1 = 0x01
                           000000  1244 	ar0 = 0x00
                           000000  1245 	C$c8051_SDCC.h$46$1$2 ==.
                                   1246 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:46: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1247 	mov	_OSCXCN,#0x67
                           000003  1248 	C$c8051_SDCC.h$49$1$2 ==.
                                   1249 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:49: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1250 	mov	r6,#0x00
      000005 7F 01            [12] 1251 	mov	r7,#0x01
      000007                       1252 00107$:
      000007 EE               [12] 1253 	mov	a,r6
      000008 24 FF            [12] 1254 	add	a,#0xff
      00000A FC               [12] 1255 	mov	r4,a
      00000B EF               [12] 1256 	mov	a,r7
      00000C 34 FF            [12] 1257 	addc	a,#0xff
      00000E FD               [12] 1258 	mov	r5,a
      00000F 8C 06            [24] 1259 	mov	ar6,r4
      000011 8D 07            [24] 1260 	mov	ar7,r5
      000013 EC               [12] 1261 	mov	a,r4
      000014 4D               [12] 1262 	orl	a,r5
      000015 70 F0            [24] 1263 	jnz	00107$
                           000017  1264 	C$c8051_SDCC.h$51$1$2 ==.
                                   1265 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:51: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000017                       1266 00102$:
      000017 E5 B1            [12] 1267 	mov	a,_OSCXCN
      000019 30 E7 FB         [24] 1268 	jnb	acc.7,00102$
                           00001C  1269 	C$c8051_SDCC.h$53$1$2 ==.
                                   1270 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:53: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      00001C 75 B2 88         [24] 1271 	mov	_OSCICN,#0x88
                           00001F  1272 	C$c8051_SDCC.h$56$1$2 ==.
                           00001F  1273 	XG$SYSCLK_Init$0$0 ==.
      00001F 22               [24] 1274 	ret
                                   1275 ;------------------------------------------------------------
                                   1276 ;Allocation info for local variables in function 'UART0_Init'
                                   1277 ;------------------------------------------------------------
                           000020  1278 	G$UART0_Init$0$0 ==.
                           000020  1279 	C$c8051_SDCC.h$64$1$2 ==.
                                   1280 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:64: void UART0_Init(void)
                                   1281 ;	-----------------------------------------
                                   1282 ;	 function UART0_Init
                                   1283 ;	-----------------------------------------
      000020                       1284 _UART0_Init:
                           000020  1285 	C$c8051_SDCC.h$66$1$4 ==.
                                   1286 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000020 75 98 50         [24] 1287 	mov	_SCON0,#0x50
                           000023  1288 	C$c8051_SDCC.h$67$1$4 ==.
                                   1289 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:67: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      000023 75 89 20         [24] 1290 	mov	_TMOD,#0x20
                           000026  1291 	C$c8051_SDCC.h$68$1$4 ==.
                                   1292 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:68: TH1    = 0xFF&-(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      000026 75 8D DC         [24] 1293 	mov	_TH1,#0xdc
                           000029  1294 	C$c8051_SDCC.h$69$1$4 ==.
                                   1295 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: TR1    = 1;                         // start Timer1
      000029 D2 8E            [12] 1296 	setb	_TR1
                           00002B  1297 	C$c8051_SDCC.h$70$1$4 ==.
                                   1298 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:70: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      00002B 43 8E 10         [24] 1299 	orl	_CKCON,#0x10
                           00002E  1300 	C$c8051_SDCC.h$71$1$4 ==.
                                   1301 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      00002E 43 87 80         [24] 1302 	orl	_PCON,#0x80
                           000031  1303 	C$c8051_SDCC.h$73$1$4 ==.
                                   1304 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: TI0    = 1;                         // Indicate TX0 ready
      000031 D2 99            [12] 1305 	setb	_TI0
                           000033  1306 	C$c8051_SDCC.h$74$1$4 ==.
                                   1307 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:74: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      000033 43 A4 01         [24] 1308 	orl	_P0MDOUT,#0x01
                           000036  1309 	C$c8051_SDCC.h$75$1$4 ==.
                           000036  1310 	XG$UART0_Init$0$0 ==.
      000036 22               [24] 1311 	ret
                                   1312 ;------------------------------------------------------------
                                   1313 ;Allocation info for local variables in function 'Sys_Init'
                                   1314 ;------------------------------------------------------------
                           000037  1315 	G$Sys_Init$0$0 ==.
                           000037  1316 	C$c8051_SDCC.h$83$1$4 ==.
                                   1317 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:83: void Sys_Init(void)
                                   1318 ;	-----------------------------------------
                                   1319 ;	 function Sys_Init
                                   1320 ;	-----------------------------------------
      000037                       1321 _Sys_Init:
                           000037  1322 	C$c8051_SDCC.h$85$1$6 ==.
                                   1323 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:85: WDTCN = 0xde;			// disable watchdog timer
      000037 75 FF DE         [24] 1324 	mov	_WDTCN,#0xde
                           00003A  1325 	C$c8051_SDCC.h$86$1$6 ==.
                                   1326 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: WDTCN = 0xad;
      00003A 75 FF AD         [24] 1327 	mov	_WDTCN,#0xad
                           00003D  1328 	C$c8051_SDCC.h$88$1$6 ==.
                                   1329 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: SYSCLK_Init();			// initialize oscillator
      00003D 12r00r00         [24] 1330 	lcall	_SYSCLK_Init
                           000040  1331 	C$c8051_SDCC.h$89$1$6 ==.
                                   1332 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: UART0_Init();			// initialize UART0
      000040 12r00r20         [24] 1333 	lcall	_UART0_Init
                           000043  1334 	C$c8051_SDCC.h$91$1$6 ==.
                                   1335 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: XBR0 |= 0x04;
      000043 43 E1 04         [24] 1336 	orl	_XBR0,#0x04
                           000046  1337 	C$c8051_SDCC.h$92$1$6 ==.
                                   1338 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:92: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      000046 43 E3 40         [24] 1339 	orl	_XBR2,#0x40
                           000049  1340 	C$c8051_SDCC.h$93$1$6 ==.
                           000049  1341 	XG$Sys_Init$0$0 ==.
      000049 22               [24] 1342 	ret
                                   1343 ;------------------------------------------------------------
                                   1344 ;Allocation info for local variables in function 'putchar'
                                   1345 ;------------------------------------------------------------
                                   1346 ;c                         Allocated to registers r7 
                                   1347 ;------------------------------------------------------------
                           00004A  1348 	G$putchar$0$0 ==.
                           00004A  1349 	C$c8051_SDCC.h$98$1$6 ==.
                                   1350 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:98: void putchar(char c)
                                   1351 ;	-----------------------------------------
                                   1352 ;	 function putchar
                                   1353 ;	-----------------------------------------
      00004A                       1354 _putchar:
      00004A AF 82            [24] 1355 	mov	r7,dpl
                           00004C  1356 	C$c8051_SDCC.h$100$1$8 ==.
                                   1357 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:100: while (!TI0); 
      00004C                       1358 00101$:
                           00004C  1359 	C$c8051_SDCC.h$101$1$8 ==.
                                   1360 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:101: TI0 = 0;
      00004C 10 99 02         [24] 1361 	jbc	_TI0,00112$
      00004F 80 FB            [24] 1362 	sjmp	00101$
      000051                       1363 00112$:
                           000051  1364 	C$c8051_SDCC.h$102$1$8 ==.
                                   1365 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:102: SBUF0 = c;
      000051 8F 99            [24] 1366 	mov	_SBUF0,r7
                           000053  1367 	C$c8051_SDCC.h$103$1$8 ==.
                           000053  1368 	XG$putchar$0$0 ==.
      000053 22               [24] 1369 	ret
                                   1370 ;------------------------------------------------------------
                                   1371 ;Allocation info for local variables in function 'getchar'
                                   1372 ;------------------------------------------------------------
                                   1373 ;c                         Allocated to registers 
                                   1374 ;------------------------------------------------------------
                           000054  1375 	G$getchar$0$0 ==.
                           000054  1376 	C$c8051_SDCC.h$108$1$8 ==.
                                   1377 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: char getchar(void)
                                   1378 ;	-----------------------------------------
                                   1379 ;	 function getchar
                                   1380 ;	-----------------------------------------
      000054                       1381 _getchar:
                           000054  1382 	C$c8051_SDCC.h$111$1$10 ==.
                                   1383 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: while (!RI0);
      000054                       1384 00101$:
                           000054  1385 	C$c8051_SDCC.h$112$1$10 ==.
                                   1386 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: RI0 = 0;
      000054 10 98 02         [24] 1387 	jbc	_RI0,00112$
      000057 80 FB            [24] 1388 	sjmp	00101$
      000059                       1389 00112$:
                           000059  1390 	C$c8051_SDCC.h$113$1$10 ==.
                                   1391 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:113: c = SBUF0;
      000059 85 99 82         [24] 1392 	mov	dpl,_SBUF0
                           00005C  1393 	C$c8051_SDCC.h$114$1$10 ==.
                                   1394 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:114: putchar(c);                          // echo to terminal
      00005C 12r00r4A         [24] 1395 	lcall	_putchar
                           00005F  1396 	C$c8051_SDCC.h$115$1$10 ==.
                                   1397 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:115: return SBUF0;
      00005F 85 99 82         [24] 1398 	mov	dpl,_SBUF0
                           000062  1399 	C$c8051_SDCC.h$116$1$10 ==.
                           000062  1400 	XG$getchar$0$0 ==.
      000062 22               [24] 1401 	ret
                                   1402 ;------------------------------------------------------------
                                   1403 ;Allocation info for local variables in function 'getchar_nw'
                                   1404 ;------------------------------------------------------------
                                   1405 ;c                         Allocated to registers 
                                   1406 ;------------------------------------------------------------
                           000063  1407 	G$getchar_nw$0$0 ==.
                           000063  1408 	C$c8051_SDCC.h$121$1$10 ==.
                                   1409 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:121: char getchar_nw(void)
                                   1410 ;	-----------------------------------------
                                   1411 ;	 function getchar_nw
                                   1412 ;	-----------------------------------------
      000063                       1413 _getchar_nw:
                           000063  1414 	C$c8051_SDCC.h$124$1$12 ==.
                                   1415 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:124: if (!RI0) return 0xFF;
      000063 20 98 05         [24] 1416 	jb	_RI0,00102$
      000066 75 82 FF         [24] 1417 	mov	dpl,#0xff
      000069 80 0B            [24] 1418 	sjmp	00104$
      00006B                       1419 00102$:
                           00006B  1420 	C$c8051_SDCC.h$127$2$13 ==.
                                   1421 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:127: RI0 = 0;
      00006B C2 98            [12] 1422 	clr	_RI0
                           00006D  1423 	C$c8051_SDCC.h$128$2$13 ==.
                                   1424 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:128: c = SBUF0;
      00006D 85 99 82         [24] 1425 	mov	dpl,_SBUF0
                           000070  1426 	C$c8051_SDCC.h$129$2$13 ==.
                                   1427 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:129: putchar(c);                          // echo to terminal
      000070 12r00r4A         [24] 1428 	lcall	_putchar
                           000073  1429 	C$c8051_SDCC.h$130$2$13 ==.
                                   1430 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:130: return SBUF0;
      000073 85 99 82         [24] 1431 	mov	dpl,_SBUF0
      000076                       1432 00104$:
                           000076  1433 	C$c8051_SDCC.h$132$1$12 ==.
                           000076  1434 	XG$getchar_nw$0$0 ==.
      000076 22               [24] 1435 	ret
                                   1436 ;------------------------------------------------------------
                                   1437 ;Allocation info for local variables in function 'lcd_print'
                                   1438 ;------------------------------------------------------------
                                   1439 ;fmt                       Allocated to stack - _bp -5
                                   1440 ;len                       Allocated to registers r6 
                                   1441 ;i                         Allocated to registers 
                                   1442 ;ap                        Allocated to registers 
                                   1443 ;text                      Allocated with name '_lcd_print_text_1_81'
                                   1444 ;------------------------------------------------------------
                           000077  1445 	G$lcd_print$0$0 ==.
                           000077  1446 	C$i2c.h$84$1$12 ==.
                                   1447 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:84: void lcd_print(const char *fmt, ...)
                                   1448 ;	-----------------------------------------
                                   1449 ;	 function lcd_print
                                   1450 ;	-----------------------------------------
      000077                       1451 _lcd_print:
      000077 C0*00            [24] 1452 	push	_bp
      000079 85 81*00         [24] 1453 	mov	_bp,sp
                           00007C  1454 	C$i2c.h$90$1$81 ==.
                                   1455 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:90: if ( strlen(fmt) <= 0 ) return;         //If there is no data to print, return
      00007C E5*00            [12] 1456 	mov	a,_bp
      00007E 24 FB            [12] 1457 	add	a,#0xfb
      000080 F8               [12] 1458 	mov	r0,a
      000081 86 82            [24] 1459 	mov	dpl,@r0
      000083 08               [12] 1460 	inc	r0
      000084 86 83            [24] 1461 	mov	dph,@r0
      000086 08               [12] 1462 	inc	r0
      000087 86 F0            [24] 1463 	mov	b,@r0
      000089 12r00r00         [24] 1464 	lcall	_strlen
      00008C E5 82            [12] 1465 	mov	a,dpl
      00008E 85 83 F0         [24] 1466 	mov	b,dph
      000091 45 F0            [12] 1467 	orl	a,b
      000093 70 02            [24] 1468 	jnz	00102$
      000095 80 62            [24] 1469 	sjmp	00109$
      000097                       1470 00102$:
                           000097  1471 	C$i2c.h$92$2$82 ==.
                                   1472 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:92: va_start(ap, fmt);
      000097 E5*00            [12] 1473 	mov	a,_bp
      000099 24 FB            [12] 1474 	add	a,#0xfb
      00009B FF               [12] 1475 	mov	r7,a
      00009C 8F*00            [24] 1476 	mov	_vsprintf_PARM_3,r7
                           00009E  1477 	C$i2c.h$93$1$81 ==.
                                   1478 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:93: vsprintf(text, fmt, ap);
      00009E E5*00            [12] 1479 	mov	a,_bp
      0000A0 24 FB            [12] 1480 	add	a,#0xfb
      0000A2 F8               [12] 1481 	mov	r0,a
      0000A3 86*00            [24] 1482 	mov	_vsprintf_PARM_2,@r0
      0000A5 08               [12] 1483 	inc	r0
      0000A6 86*01            [24] 1484 	mov	(_vsprintf_PARM_2 + 1),@r0
      0000A8 08               [12] 1485 	inc	r0
      0000A9 86*02            [24] 1486 	mov	(_vsprintf_PARM_2 + 2),@r0
      0000AB 90r00r00         [24] 1487 	mov	dptr,#_lcd_print_text_1_81
      0000AE 75 F0 00         [24] 1488 	mov	b,#0x00
      0000B1 12r00r00         [24] 1489 	lcall	_vsprintf
                           0000B4  1490 	C$i2c.h$96$1$81 ==.
                                   1491 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:96: len = strlen(text);
      0000B4 90r00r00         [24] 1492 	mov	dptr,#_lcd_print_text_1_81
      0000B7 75 F0 00         [24] 1493 	mov	b,#0x00
      0000BA 12r00r00         [24] 1494 	lcall	_strlen
      0000BD AE 82            [24] 1495 	mov	r6,dpl
                           0000BF  1496 	C$i2c.h$97$1$81 ==.
                                   1497 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:97: for(i=0; i<len; i++)
      0000BF 7F 00            [12] 1498 	mov	r7,#0x00
      0000C1                       1499 00107$:
      0000C1 C3               [12] 1500 	clr	c
      0000C2 EF               [12] 1501 	mov	a,r7
      0000C3 9E               [12] 1502 	subb	a,r6
      0000C4 50 1F            [24] 1503 	jnc	00105$
                           0000C6  1504 	C$i2c.h$99$2$84 ==.
                                   1505 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:99: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000C6 EF               [12] 1506 	mov	a,r7
      0000C7 24r00            [12] 1507 	add	a,#_lcd_print_text_1_81
      0000C9 F5 82            [12] 1508 	mov	dpl,a
      0000CB E4               [12] 1509 	clr	a
      0000CC 34s00            [12] 1510 	addc	a,#(_lcd_print_text_1_81 >> 8)
      0000CE F5 83            [12] 1511 	mov	dph,a
      0000D0 E0               [24] 1512 	movx	a,@dptr
      0000D1 FD               [12] 1513 	mov	r5,a
      0000D2 BD 0A 0D         [24] 1514 	cjne	r5,#0x0a,00108$
      0000D5 EF               [12] 1515 	mov	a,r7
      0000D6 24r00            [12] 1516 	add	a,#_lcd_print_text_1_81
      0000D8 F5 82            [12] 1517 	mov	dpl,a
      0000DA E4               [12] 1518 	clr	a
      0000DB 34s00            [12] 1519 	addc	a,#(_lcd_print_text_1_81 >> 8)
      0000DD F5 83            [12] 1520 	mov	dph,a
      0000DF 74 0D            [12] 1521 	mov	a,#0x0d
      0000E1 F0               [24] 1522 	movx	@dptr,a
      0000E2                       1523 00108$:
                           0000E2  1524 	C$i2c.h$97$1$81 ==.
                                   1525 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:97: for(i=0; i<len; i++)
      0000E2 0F               [12] 1526 	inc	r7
      0000E3 80 DC            [24] 1527 	sjmp	00107$
      0000E5                       1528 00105$:
                           0000E5  1529 	C$i2c.h$102$1$81 ==.
                                   1530 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:102: i2c_write_data(0xC6, 0x00, text, len);
      0000E5 75*0Br00         [24] 1531 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_81
      0000E8 75*0Cs00         [24] 1532 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_81 >> 8)
      0000EB 75*0D 00         [24] 1533 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000EE 75*0A 00         [24] 1534 	mov	_i2c_write_data_PARM_2,#0x00
      0000F1 8E*0E            [24] 1535 	mov	_i2c_write_data_PARM_4,r6
      0000F3 75 82 C6         [24] 1536 	mov	dpl,#0xc6
      0000F6 12r03r88         [24] 1537 	lcall	_i2c_write_data
      0000F9                       1538 00109$:
      0000F9 D0*00            [24] 1539 	pop	_bp
                           0000FB  1540 	C$i2c.h$103$1$81 ==.
                           0000FB  1541 	XG$lcd_print$0$0 ==.
      0000FB 22               [24] 1542 	ret
                                   1543 ;------------------------------------------------------------
                                   1544 ;Allocation info for local variables in function 'lcd_clear'
                                   1545 ;------------------------------------------------------------
                                   1546 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_85'
                                   1547 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_85'
                                   1548 ;------------------------------------------------------------
                           0000FC  1549 	G$lcd_clear$0$0 ==.
                           0000FC  1550 	C$i2c.h$106$1$81 ==.
                                   1551 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:106: void lcd_clear()
                                   1552 ;	-----------------------------------------
                                   1553 ;	 function lcd_clear
                                   1554 ;	-----------------------------------------
      0000FC                       1555 _lcd_clear:
                           0000FC  1556 	C$i2c.h$108$1$81 ==.
                                   1557 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:108: unsigned char NumBytes=0, Cmd[2];
      0000FC 75*05 00         [24] 1558 	mov	_lcd_clear_NumBytes_1_85,#0x00
                           0000FF  1559 	C$i2c.h$110$1$85 ==.
                                   1560 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:110: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      0000FF                       1561 00101$:
      0000FF 74 C0            [12] 1562 	mov	a,#0x100 - 0x40
      000101 25*05            [12] 1563 	add	a,_lcd_clear_NumBytes_1_85
      000103 40 17            [24] 1564 	jc	00103$
      000105 75*10r05         [24] 1565 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_85
      000108 75*11 00         [24] 1566 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00010B 75*12 40         [24] 1567 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      00010E 75*0F 00         [24] 1568 	mov	_i2c_read_data_PARM_2,#0x00
      000111 75*13 01         [24] 1569 	mov	_i2c_read_data_PARM_4,#0x01
      000114 75 82 C6         [24] 1570 	mov	dpl,#0xc6
      000117 12r04r02         [24] 1571 	lcall	_i2c_read_data
      00011A 80 E3            [24] 1572 	sjmp	00101$
      00011C                       1573 00103$:
                           00011C  1574 	C$i2c.h$112$1$85 ==.
                                   1575 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:112: Cmd[0] = 12;
      00011C 75*06 0C         [24] 1576 	mov	_lcd_clear_Cmd_1_85,#0x0c
                           00011F  1577 	C$i2c.h$113$1$85 ==.
                                   1578 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:113: i2c_write_data(0xC6, 0x00, Cmd, 1);
      00011F 75*0Br06         [24] 1579 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_85
      000122 75*0C 00         [24] 1580 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000125 75*0D 40         [24] 1581 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000128 75*0A 00         [24] 1582 	mov	_i2c_write_data_PARM_2,#0x00
      00012B 75*0E 01         [24] 1583 	mov	_i2c_write_data_PARM_4,#0x01
      00012E 75 82 C6         [24] 1584 	mov	dpl,#0xc6
      000131 12r03r88         [24] 1585 	lcall	_i2c_write_data
                           000134  1586 	C$i2c.h$114$1$85 ==.
                           000134  1587 	XG$lcd_clear$0$0 ==.
      000134 22               [24] 1588 	ret
                                   1589 ;------------------------------------------------------------
                                   1590 ;Allocation info for local variables in function 'read_keypad'
                                   1591 ;------------------------------------------------------------
                                   1592 ;i                         Allocated to registers r7 
                                   1593 ;Data                      Allocated with name '_read_keypad_Data_1_86'
                                   1594 ;------------------------------------------------------------
                           000135  1595 	G$read_keypad$0$0 ==.
                           000135  1596 	C$i2c.h$117$1$85 ==.
                                   1597 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:117: char read_keypad()
                                   1598 ;	-----------------------------------------
                                   1599 ;	 function read_keypad
                                   1600 ;	-----------------------------------------
      000135                       1601 _read_keypad:
                           000135  1602 	C$i2c.h$121$1$86 ==.
                                   1603 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:121: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      000135 75*10r08         [24] 1604 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_86
      000138 75*11 00         [24] 1605 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00013B 75*12 40         [24] 1606 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      00013E 75*0F 01         [24] 1607 	mov	_i2c_read_data_PARM_2,#0x01
      000141 75*13 02         [24] 1608 	mov	_i2c_read_data_PARM_4,#0x02
      000144 75 82 C6         [24] 1609 	mov	dpl,#0xc6
      000147 12r04r02         [24] 1610 	lcall	_i2c_read_data
                           00014A  1611 	C$i2c.h$122$1$86 ==.
                                   1612 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:122: if(Data[0] == 0xFF) return 0;   //No response on bus, no display
      00014A 74 FF            [12] 1613 	mov	a,#0xff
      00014C B5*08 05         [24] 1614 	cjne	a,_read_keypad_Data_1_86,00102$
      00014F 75 82 00         [24] 1615 	mov	dpl,#0x00
      000152 80 5F            [24] 1616 	sjmp	00116$
      000154                       1617 00102$:
                           000154  1618 	C$i2c.h$124$1$86 ==.
                                   1619 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:124: for(i=0; i<8; i++)              //loop 8 times
      000154 7F 00            [12] 1620 	mov	r7,#0x00
      000156 8F 06            [24] 1621 	mov	ar6,r7
      000158                       1622 00114$:
                           000158  1623 	C$i2c.h$126$2$87 ==.
                                   1624 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:126: if(Data[0] & (0x01 << i))   //find the ASCII value of the keypad read, if it is the current loop value
      000158 8E F0            [24] 1625 	mov	b,r6
      00015A 05 F0            [12] 1626 	inc	b
      00015C 7C 01            [12] 1627 	mov	r4,#0x01
      00015E 7D 00            [12] 1628 	mov	r5,#0x00
      000160 80 06            [24] 1629 	sjmp	00145$
      000162                       1630 00144$:
      000162 EC               [12] 1631 	mov	a,r4
      000163 2C               [12] 1632 	add	a,r4
      000164 FC               [12] 1633 	mov	r4,a
      000165 ED               [12] 1634 	mov	a,r5
      000166 33               [12] 1635 	rlc	a
      000167 FD               [12] 1636 	mov	r5,a
      000168                       1637 00145$:
      000168 D5 F0 F7         [24] 1638 	djnz	b,00144$
      00016B AA*08            [24] 1639 	mov	r2,_read_keypad_Data_1_86
      00016D 7B 00            [12] 1640 	mov	r3,#0x00
      00016F EA               [12] 1641 	mov	a,r2
      000170 52 04            [12] 1642 	anl	ar4,a
      000172 EB               [12] 1643 	mov	a,r3
      000173 52 05            [12] 1644 	anl	ar5,a
      000175 EC               [12] 1645 	mov	a,r4
      000176 4D               [12] 1646 	orl	a,r5
      000177 60 07            [24] 1647 	jz	00115$
                           000179  1648 	C$i2c.h$127$2$87 ==.
                                   1649 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:127: return i+49;
      000179 74 31            [12] 1650 	mov	a,#0x31
      00017B 2F               [12] 1651 	add	a,r7
      00017C F5 82            [12] 1652 	mov	dpl,a
      00017E 80 33            [24] 1653 	sjmp	00116$
      000180                       1654 00115$:
                           000180  1655 	C$i2c.h$124$1$86 ==.
                                   1656 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:124: for(i=0; i<8; i++)              //loop 8 times
      000180 0E               [12] 1657 	inc	r6
      000181 8E 07            [24] 1658 	mov	ar7,r6
      000183 BE 08 00         [24] 1659 	cjne	r6,#0x08,00147$
      000186                       1660 00147$:
      000186 40 D0            [24] 1661 	jc	00114$
                           000188  1662 	C$i2c.h$130$1$86 ==.
                                   1663 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:130: if(Data[1] & 0x01) return '9';  //if the value is equal to 9 return 9.
      000188 E5*09            [12] 1664 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      00018A 30 E0 05         [24] 1665 	jnb	acc.0,00107$
      00018D 75 82 39         [24] 1666 	mov	dpl,#0x39
      000190 80 21            [24] 1667 	sjmp	00116$
      000192                       1668 00107$:
                           000192  1669 	C$i2c.h$132$1$86 ==.
                                   1670 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:132: if(Data[1] & 0x02) return '*';  //if the value is equal to the star.
      000192 E5*09            [12] 1671 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      000194 30 E1 05         [24] 1672 	jnb	acc.1,00109$
      000197 75 82 2A         [24] 1673 	mov	dpl,#0x2a
      00019A 80 17            [24] 1674 	sjmp	00116$
      00019C                       1675 00109$:
                           00019C  1676 	C$i2c.h$134$1$86 ==.
                                   1677 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:134: if(Data[1] & 0x04) return '0';  //if the value is equal to the 0 key
      00019C E5*09            [12] 1678 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      00019E 30 E2 05         [24] 1679 	jnb	acc.2,00111$
      0001A1 75 82 30         [24] 1680 	mov	dpl,#0x30
      0001A4 80 0D            [24] 1681 	sjmp	00116$
      0001A6                       1682 00111$:
                           0001A6  1683 	C$i2c.h$136$1$86 ==.
                                   1684 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:136: if(Data[1] & 0x08) return '#';  //if the value is equal to the pound key
      0001A6 E5*09            [12] 1685 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      0001A8 30 E3 05         [24] 1686 	jnb	acc.3,00113$
      0001AB 75 82 23         [24] 1687 	mov	dpl,#0x23
      0001AE 80 03            [24] 1688 	sjmp	00116$
      0001B0                       1689 00113$:
                           0001B0  1690 	C$i2c.h$138$1$86 ==.
                                   1691 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:138: return 0xFF;                    //else return a numerical -1 (0xFF)
      0001B0 75 82 FF         [24] 1692 	mov	dpl,#0xff
      0001B3                       1693 00116$:
                           0001B3  1694 	C$i2c.h$139$1$86 ==.
                           0001B3  1695 	XG$read_keypad$0$0 ==.
      0001B3 22               [24] 1696 	ret
                                   1697 ;------------------------------------------------------------
                                   1698 ;Allocation info for local variables in function 'kpd_input'
                                   1699 ;------------------------------------------------------------
                                   1700 ;mode                      Allocated to registers r7 
                                   1701 ;sum                       Allocated to registers r5 r6 
                                   1702 ;key                       Allocated to registers r3 
                                   1703 ;i                         Allocated to registers 
                                   1704 ;------------------------------------------------------------
                           0001B4  1705 	G$kpd_input$0$0 ==.
                           0001B4  1706 	C$i2c.h$151$1$86 ==.
                                   1707 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:151: unsigned int kpd_input(char mode)
                                   1708 ;	-----------------------------------------
                                   1709 ;	 function kpd_input
                                   1710 ;	-----------------------------------------
      0001B4                       1711 _kpd_input:
      0001B4 AF 82            [24] 1712 	mov	r7,dpl
                           0001B6  1713 	C$i2c.h$156$1$89 ==.
                                   1714 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:156: sum = 0;
                           0001B6  1715 	C$i2c.h$159$1$89 ==.
                                   1716 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:159: if(mode==0)lcd_print("\nType digits; end w/#");
      0001B6 E4               [12] 1717 	clr	a
      0001B7 FD               [12] 1718 	mov	r5,a
      0001B8 FE               [12] 1719 	mov	r6,a
      0001B9 EF               [12] 1720 	mov	a,r7
      0001BA 70 1D            [24] 1721 	jnz	00102$
      0001BC C0 06            [24] 1722 	push	ar6
      0001BE C0 05            [24] 1723 	push	ar5
      0001C0 74r00            [12] 1724 	mov	a,#___str_0
      0001C2 C0 E0            [24] 1725 	push	acc
      0001C4 74s00            [12] 1726 	mov	a,#(___str_0 >> 8)
      0001C6 C0 E0            [24] 1727 	push	acc
      0001C8 74 80            [12] 1728 	mov	a,#0x80
      0001CA C0 E0            [24] 1729 	push	acc
      0001CC 12r00r77         [24] 1730 	lcall	_lcd_print
      0001CF 15 81            [12] 1731 	dec	sp
      0001D1 15 81            [12] 1732 	dec	sp
      0001D3 15 81            [12] 1733 	dec	sp
      0001D5 D0 05            [24] 1734 	pop	ar5
      0001D7 D0 06            [24] 1735 	pop	ar6
      0001D9                       1736 00102$:
                           0001D9  1737 	C$i2c.h$161$1$89 ==.
                                   1738 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:161: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001D9 C0 06            [24] 1739 	push	ar6
      0001DB C0 05            [24] 1740 	push	ar5
      0001DD 74 08            [12] 1741 	mov	a,#0x08
      0001DF C0 E0            [24] 1742 	push	acc
      0001E1 E4               [12] 1743 	clr	a
      0001E2 C0 E0            [24] 1744 	push	acc
      0001E4 74 08            [12] 1745 	mov	a,#0x08
      0001E6 C0 E0            [24] 1746 	push	acc
      0001E8 E4               [12] 1747 	clr	a
      0001E9 C0 E0            [24] 1748 	push	acc
      0001EB 74 08            [12] 1749 	mov	a,#0x08
      0001ED C0 E0            [24] 1750 	push	acc
      0001EF E4               [12] 1751 	clr	a
      0001F0 C0 E0            [24] 1752 	push	acc
      0001F2 74 08            [12] 1753 	mov	a,#0x08
      0001F4 C0 E0            [24] 1754 	push	acc
      0001F6 E4               [12] 1755 	clr	a
      0001F7 C0 E0            [24] 1756 	push	acc
      0001F9 74 08            [12] 1757 	mov	a,#0x08
      0001FB C0 E0            [24] 1758 	push	acc
      0001FD E4               [12] 1759 	clr	a
      0001FE C0 E0            [24] 1760 	push	acc
      000200 74r16            [12] 1761 	mov	a,#___str_1
      000202 C0 E0            [24] 1762 	push	acc
      000204 74s00            [12] 1763 	mov	a,#(___str_1 >> 8)
      000206 C0 E0            [24] 1764 	push	acc
      000208 74 80            [12] 1765 	mov	a,#0x80
      00020A C0 E0            [24] 1766 	push	acc
      00020C 12r00r77         [24] 1767 	lcall	_lcd_print
      00020F E5 81            [12] 1768 	mov	a,sp
      000211 24 F3            [12] 1769 	add	a,#0xf3
      000213 F5 81            [12] 1770 	mov	sp,a
                           000215  1771 	C$i2c.h$163$1$89 ==.
                                   1772 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:163: delay_time(500000);             //Add 20ms delay before reading i2c in loop
      000215 90 A1 20         [24] 1773 	mov	dptr,#0xa120
      000218 75 F0 07         [24] 1774 	mov	b,#0x07
      00021B E4               [12] 1775 	clr	a
      00021C 12r03r23         [24] 1776 	lcall	_delay_time
      00021F D0 05            [24] 1777 	pop	ar5
      000221 D0 06            [24] 1778 	pop	ar6
                           000223  1779 	C$i2c.h$167$1$89 ==.
                                   1780 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:167: for(i=0; i<5; i++)
      000223 7F 00            [12] 1781 	mov	r7,#0x00
                           000225  1782 	C$i2c.h$169$3$92 ==.
                                   1783 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:169: while(((key=read_keypad()) == 0xFF) || (key == '*'))delay_time(10000);
      000225                       1784 00104$:
      000225 C0 07            [24] 1785 	push	ar7
      000227 C0 06            [24] 1786 	push	ar6
      000229 C0 05            [24] 1787 	push	ar5
      00022B 12r01r35         [24] 1788 	lcall	_read_keypad
      00022E AC 82            [24] 1789 	mov	r4,dpl
      000230 D0 05            [24] 1790 	pop	ar5
      000232 D0 06            [24] 1791 	pop	ar6
      000234 D0 07            [24] 1792 	pop	ar7
      000236 8C 03            [24] 1793 	mov	ar3,r4
      000238 BC FF 02         [24] 1794 	cjne	r4,#0xff,00146$
      00023B 80 03            [24] 1795 	sjmp	00105$
      00023D                       1796 00146$:
      00023D BB 2A 17         [24] 1797 	cjne	r3,#0x2a,00106$
      000240                       1798 00105$:
      000240 90 27 10         [24] 1799 	mov	dptr,#0x2710
      000243 E4               [12] 1800 	clr	a
      000244 F5 F0            [12] 1801 	mov	b,a
      000246 C0 07            [24] 1802 	push	ar7
      000248 C0 06            [24] 1803 	push	ar6
      00024A C0 05            [24] 1804 	push	ar5
      00024C 12r03r23         [24] 1805 	lcall	_delay_time
      00024F D0 05            [24] 1806 	pop	ar5
      000251 D0 06            [24] 1807 	pop	ar6
      000253 D0 07            [24] 1808 	pop	ar7
      000255 80 CE            [24] 1809 	sjmp	00104$
      000257                       1810 00106$:
                           000257  1811 	C$i2c.h$170$2$90 ==.
                                   1812 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:170: if(key == '#')
      000257 BB 23 2A         [24] 1813 	cjne	r3,#0x23,00114$
                           00025A  1814 	C$i2c.h$172$3$91 ==.
                                   1815 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:172: while(read_keypad() == '#')delay_time(10000);
      00025A                       1816 00107$:
      00025A C0 06            [24] 1817 	push	ar6
      00025C C0 05            [24] 1818 	push	ar5
      00025E 12r01r35         [24] 1819 	lcall	_read_keypad
      000261 AC 82            [24] 1820 	mov	r4,dpl
      000263 D0 05            [24] 1821 	pop	ar5
      000265 D0 06            [24] 1822 	pop	ar6
      000267 BC 23 13         [24] 1823 	cjne	r4,#0x23,00109$
      00026A 90 27 10         [24] 1824 	mov	dptr,#0x2710
      00026D E4               [12] 1825 	clr	a
      00026E F5 F0            [12] 1826 	mov	b,a
      000270 C0 06            [24] 1827 	push	ar6
      000272 C0 05            [24] 1828 	push	ar5
      000274 12r03r23         [24] 1829 	lcall	_delay_time
      000277 D0 05            [24] 1830 	pop	ar5
      000279 D0 06            [24] 1831 	pop	ar6
      00027B 80 DD            [24] 1832 	sjmp	00107$
      00027D                       1833 00109$:
                           00027D  1834 	C$i2c.h$173$3$91 ==.
                                   1835 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:173: return sum;
      00027D 8D 82            [24] 1836 	mov	dpl,r5
      00027F 8E 83            [24] 1837 	mov	dph,r6
      000281 02r03r22         [24] 1838 	ljmp	00119$
      000284                       1839 00114$:
                           000284  1840 	C$i2c.h$177$3$92 ==.
                                   1841 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:177: lcd_print("%c", key);
      000284 8B 02            [24] 1842 	mov	ar2,r3
      000286 7C 00            [12] 1843 	mov	r4,#0x00
      000288 C0 07            [24] 1844 	push	ar7
      00028A C0 06            [24] 1845 	push	ar6
      00028C C0 05            [24] 1846 	push	ar5
      00028E C0 04            [24] 1847 	push	ar4
      000290 C0 03            [24] 1848 	push	ar3
      000292 C0 02            [24] 1849 	push	ar2
      000294 C0 02            [24] 1850 	push	ar2
      000296 C0 04            [24] 1851 	push	ar4
      000298 74r26            [12] 1852 	mov	a,#___str_2
      00029A C0 E0            [24] 1853 	push	acc
      00029C 74s00            [12] 1854 	mov	a,#(___str_2 >> 8)
      00029E C0 E0            [24] 1855 	push	acc
      0002A0 74 80            [12] 1856 	mov	a,#0x80
      0002A2 C0 E0            [24] 1857 	push	acc
      0002A4 12r00r77         [24] 1858 	lcall	_lcd_print
      0002A7 E5 81            [12] 1859 	mov	a,sp
      0002A9 24 FB            [12] 1860 	add	a,#0xfb
      0002AB F5 81            [12] 1861 	mov	sp,a
      0002AD D0 02            [24] 1862 	pop	ar2
      0002AF D0 03            [24] 1863 	pop	ar3
      0002B1 D0 04            [24] 1864 	pop	ar4
      0002B3 D0 05            [24] 1865 	pop	ar5
      0002B5 D0 06            [24] 1866 	pop	ar6
                           0002B7  1867 	C$i2c.h$178$1$89 ==.
                                   1868 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:178: sum = sum*10 + key - '0';
      0002B7 8D*00            [24] 1869 	mov	__mulint_PARM_2,r5
      0002B9 8E*01            [24] 1870 	mov	(__mulint_PARM_2 + 1),r6
      0002BB 90 00 0A         [24] 1871 	mov	dptr,#0x000a
      0002BE C0 04            [24] 1872 	push	ar4
      0002C0 C0 03            [24] 1873 	push	ar3
      0002C2 C0 02            [24] 1874 	push	ar2
      0002C4 12r00r00         [24] 1875 	lcall	__mulint
      0002C7 A8 82            [24] 1876 	mov	r0,dpl
      0002C9 A9 83            [24] 1877 	mov	r1,dph
      0002CB D0 02            [24] 1878 	pop	ar2
      0002CD D0 03            [24] 1879 	pop	ar3
      0002CF D0 04            [24] 1880 	pop	ar4
      0002D1 D0 07            [24] 1881 	pop	ar7
      0002D3 EA               [12] 1882 	mov	a,r2
      0002D4 28               [12] 1883 	add	a,r0
      0002D5 F8               [12] 1884 	mov	r0,a
      0002D6 EC               [12] 1885 	mov	a,r4
      0002D7 39               [12] 1886 	addc	a,r1
      0002D8 F9               [12] 1887 	mov	r1,a
      0002D9 E8               [12] 1888 	mov	a,r0
      0002DA 24 D0            [12] 1889 	add	a,#0xd0
      0002DC FD               [12] 1890 	mov	r5,a
      0002DD E9               [12] 1891 	mov	a,r1
      0002DE 34 FF            [12] 1892 	addc	a,#0xff
      0002E0 FE               [12] 1893 	mov	r6,a
                           0002E1  1894 	C$i2c.h$179$3$92 ==.
                                   1895 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:179: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002E1                       1896 00110$:
      0002E1 C0 07            [24] 1897 	push	ar7
      0002E3 C0 06            [24] 1898 	push	ar6
      0002E5 C0 05            [24] 1899 	push	ar5
      0002E7 C0 03            [24] 1900 	push	ar3
      0002E9 12r01r35         [24] 1901 	lcall	_read_keypad
      0002EC AC 82            [24] 1902 	mov	r4,dpl
      0002EE D0 03            [24] 1903 	pop	ar3
      0002F0 D0 05            [24] 1904 	pop	ar5
      0002F2 D0 06            [24] 1905 	pop	ar6
      0002F4 D0 07            [24] 1906 	pop	ar7
      0002F6 EC               [12] 1907 	mov	a,r4
      0002F7 B5 03 1B         [24] 1908 	cjne	a,ar3,00118$
      0002FA 90 27 10         [24] 1909 	mov	dptr,#0x2710
      0002FD E4               [12] 1910 	clr	a
      0002FE F5 F0            [12] 1911 	mov	b,a
      000300 C0 07            [24] 1912 	push	ar7
      000302 C0 06            [24] 1913 	push	ar6
      000304 C0 05            [24] 1914 	push	ar5
      000306 C0 03            [24] 1915 	push	ar3
      000308 12r03r23         [24] 1916 	lcall	_delay_time
      00030B D0 03            [24] 1917 	pop	ar3
      00030D D0 05            [24] 1918 	pop	ar5
      00030F D0 06            [24] 1919 	pop	ar6
      000311 D0 07            [24] 1920 	pop	ar7
      000313 80 CC            [24] 1921 	sjmp	00110$
      000315                       1922 00118$:
                           000315  1923 	C$i2c.h$167$1$89 ==.
                                   1924 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:167: for(i=0; i<5; i++)
      000315 0F               [12] 1925 	inc	r7
      000316 BF 05 00         [24] 1926 	cjne	r7,#0x05,00155$
      000319                       1927 00155$:
      000319 50 03            [24] 1928 	jnc	00156$
      00031B 02r02r25         [24] 1929 	ljmp	00104$
      00031E                       1930 00156$:
                           00031E  1931 	C$i2c.h$182$1$89 ==.
                                   1932 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:182: return sum;
      00031E 8D 82            [24] 1933 	mov	dpl,r5
      000320 8E 83            [24] 1934 	mov	dph,r6
      000322                       1935 00119$:
                           000322  1936 	C$i2c.h$183$1$89 ==.
                           000322  1937 	XG$kpd_input$0$0 ==.
      000322 22               [24] 1938 	ret
                                   1939 ;------------------------------------------------------------
                                   1940 ;Allocation info for local variables in function 'delay_time'
                                   1941 ;------------------------------------------------------------
                                   1942 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1943 ;index                     Allocated to registers 
                                   1944 ;------------------------------------------------------------
                           000323  1945 	G$delay_time$0$0 ==.
                           000323  1946 	C$i2c.h$192$1$89 ==.
                                   1947 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:192: void delay_time (unsigned long time_end)
                                   1948 ;	-----------------------------------------
                                   1949 ;	 function delay_time
                                   1950 ;	-----------------------------------------
      000323                       1951 _delay_time:
      000323 AC 82            [24] 1952 	mov	r4,dpl
      000325 AD 83            [24] 1953 	mov	r5,dph
      000327 AE F0            [24] 1954 	mov	r6,b
      000329 FF               [12] 1955 	mov	r7,a
                           00032A  1956 	C$i2c.h$196$1$94 ==.
                                   1957 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:196: for (index = 0; index < time_end; index++); //for loop delay
      00032A 78 00            [12] 1958 	mov	r0,#0x00
      00032C 79 00            [12] 1959 	mov	r1,#0x00
      00032E 7A 00            [12] 1960 	mov	r2,#0x00
      000330 7B 00            [12] 1961 	mov	r3,#0x00
      000332                       1962 00103$:
      000332 C3               [12] 1963 	clr	c
      000333 E8               [12] 1964 	mov	a,r0
      000334 9C               [12] 1965 	subb	a,r4
      000335 E9               [12] 1966 	mov	a,r1
      000336 9D               [12] 1967 	subb	a,r5
      000337 EA               [12] 1968 	mov	a,r2
      000338 9E               [12] 1969 	subb	a,r6
      000339 EB               [12] 1970 	mov	a,r3
      00033A 9F               [12] 1971 	subb	a,r7
      00033B 50 0F            [24] 1972 	jnc	00105$
      00033D 08               [12] 1973 	inc	r0
      00033E B8 00 09         [24] 1974 	cjne	r0,#0x00,00115$
      000341 09               [12] 1975 	inc	r1
      000342 B9 00 05         [24] 1976 	cjne	r1,#0x00,00115$
      000345 0A               [12] 1977 	inc	r2
      000346 BA 00 E9         [24] 1978 	cjne	r2,#0x00,00103$
      000349 0B               [12] 1979 	inc	r3
      00034A                       1980 00115$:
      00034A 80 E6            [24] 1981 	sjmp	00103$
      00034C                       1982 00105$:
                           00034C  1983 	C$i2c.h$197$1$94 ==.
                           00034C  1984 	XG$delay_time$0$0 ==.
      00034C 22               [24] 1985 	ret
                                   1986 ;------------------------------------------------------------
                                   1987 ;Allocation info for local variables in function 'i2c_start'
                                   1988 ;------------------------------------------------------------
                           00034D  1989 	G$i2c_start$0$0 ==.
                           00034D  1990 	C$i2c.h$200$1$94 ==.
                                   1991 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:200: void i2c_start(void)
                                   1992 ;	-----------------------------------------
                                   1993 ;	 function i2c_start
                                   1994 ;	-----------------------------------------
      00034D                       1995 _i2c_start:
                           00034D  1996 	C$i2c.h$202$1$96 ==.
                                   1997 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:202: while(BUSY);                //Wait until SMBus0 is free
      00034D                       1998 00101$:
      00034D 20 C7 FD         [24] 1999 	jb	_BUSY,00101$
                           000350  2000 	C$i2c.h$203$1$96 ==.
                                   2001 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:203: STA = 1;                    //Set Start Bit
      000350 D2 C5            [12] 2002 	setb	_STA
                           000352  2003 	C$i2c.h$204$1$96 ==.
                                   2004 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:204: while(!SI);                 //Wait until start sent
      000352                       2005 00104$:
      000352 30 C3 FD         [24] 2006 	jnb	_SI,00104$
                           000355  2007 	C$i2c.h$205$1$96 ==.
                                   2008 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:205: STA = 0;                    //Clear start bit
      000355 C2 C5            [12] 2009 	clr	_STA
                           000357  2010 	C$i2c.h$206$1$96 ==.
                                   2011 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:206: SI = 0;                     //Clear SI
      000357 C2 C3            [12] 2012 	clr	_SI
                           000359  2013 	C$i2c.h$207$1$96 ==.
                           000359  2014 	XG$i2c_start$0$0 ==.
      000359 22               [24] 2015 	ret
                                   2016 ;------------------------------------------------------------
                                   2017 ;Allocation info for local variables in function 'i2c_write'
                                   2018 ;------------------------------------------------------------
                                   2019 ;output_data               Allocated to registers 
                                   2020 ;------------------------------------------------------------
                           00035A  2021 	G$i2c_write$0$0 ==.
                           00035A  2022 	C$i2c.h$210$1$96 ==.
                                   2023 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:210: void i2c_write(unsigned char output_data)
                                   2024 ;	-----------------------------------------
                                   2025 ;	 function i2c_write
                                   2026 ;	-----------------------------------------
      00035A                       2027 _i2c_write:
      00035A 85 82 C2         [24] 2028 	mov	_SMB0DAT,dpl
                           00035D  2029 	C$i2c.h$213$1$98 ==.
                                   2030 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:213: while(!SI);                 //Wait until send is complete
      00035D                       2031 00101$:
                           00035D  2032 	C$i2c.h$214$1$98 ==.
                                   2033 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:214: SI = 0;                     //Clear SI
      00035D 10 C3 02         [24] 2034 	jbc	_SI,00112$
      000360 80 FB            [24] 2035 	sjmp	00101$
      000362                       2036 00112$:
                           000362  2037 	C$i2c.h$215$1$98 ==.
                           000362  2038 	XG$i2c_write$0$0 ==.
      000362 22               [24] 2039 	ret
                                   2040 ;------------------------------------------------------------
                                   2041 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   2042 ;------------------------------------------------------------
                                   2043 ;output_data               Allocated to registers 
                                   2044 ;------------------------------------------------------------
                           000363  2045 	G$i2c_write_and_stop$0$0 ==.
                           000363  2046 	C$i2c.h$218$1$98 ==.
                                   2047 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:218: void i2c_write_and_stop(unsigned char output_data)
                                   2048 ;	-----------------------------------------
                                   2049 ;	 function i2c_write_and_stop
                                   2050 ;	-----------------------------------------
      000363                       2051 _i2c_write_and_stop:
      000363 85 82 C2         [24] 2052 	mov	_SMB0DAT,dpl
                           000366  2053 	C$i2c.h$221$1$100 ==.
                                   2054 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:221: STO = 1;                    //Set stop bit
      000366 D2 C4            [12] 2055 	setb	_STO
                           000368  2056 	C$i2c.h$222$1$100 ==.
                                   2057 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:222: while(!SI);                 //Wait until send is complete
      000368                       2058 00101$:
                           000368  2059 	C$i2c.h$223$1$100 ==.
                                   2060 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:223: SI = 0;                     //Clear SI
      000368 10 C3 02         [24] 2061 	jbc	_SI,00112$
      00036B 80 FB            [24] 2062 	sjmp	00101$
      00036D                       2063 00112$:
                           00036D  2064 	C$i2c.h$224$1$100 ==.
                           00036D  2065 	XG$i2c_write_and_stop$0$0 ==.
      00036D 22               [24] 2066 	ret
                                   2067 ;------------------------------------------------------------
                                   2068 ;Allocation info for local variables in function 'i2c_read'
                                   2069 ;------------------------------------------------------------
                                   2070 ;input_data                Allocated to registers 
                                   2071 ;------------------------------------------------------------
                           00036E  2072 	G$i2c_read$0$0 ==.
                           00036E  2073 	C$i2c.h$227$1$100 ==.
                                   2074 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:227: unsigned char i2c_read(void)
                                   2075 ;	-----------------------------------------
                                   2076 ;	 function i2c_read
                                   2077 ;	-----------------------------------------
      00036E                       2078 _i2c_read:
                           00036E  2079 	C$i2c.h$231$1$102 ==.
                                   2080 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:231: while(!SI);                 //Wait until we have data to read
      00036E                       2081 00101$:
      00036E 30 C3 FD         [24] 2082 	jnb	_SI,00101$
                           000371  2083 	C$i2c.h$232$1$102 ==.
                                   2084 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:232: input_data = SMB0DAT;       //Read the data
      000371 85 C2 82         [24] 2085 	mov	dpl,_SMB0DAT
                           000374  2086 	C$i2c.h$233$1$102 ==.
                                   2087 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:233: SI = 0;                     //Clear SI
      000374 C2 C3            [12] 2088 	clr	_SI
                           000376  2089 	C$i2c.h$234$1$102 ==.
                                   2090 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:234: return input_data;          //Return the read data
                           000376  2091 	C$i2c.h$235$1$102 ==.
                           000376  2092 	XG$i2c_read$0$0 ==.
      000376 22               [24] 2093 	ret
                                   2094 ;------------------------------------------------------------
                                   2095 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   2096 ;------------------------------------------------------------
                                   2097 ;input_data                Allocated to registers r7 
                                   2098 ;------------------------------------------------------------
                           000377  2099 	G$i2c_read_and_stop$0$0 ==.
                           000377  2100 	C$i2c.h$238$1$102 ==.
                                   2101 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:238: unsigned char i2c_read_and_stop(void)
                                   2102 ;	-----------------------------------------
                                   2103 ;	 function i2c_read_and_stop
                                   2104 ;	-----------------------------------------
      000377                       2105 _i2c_read_and_stop:
                           000377  2106 	C$i2c.h$242$1$104 ==.
                                   2107 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:242: while(!SI);                 //Wait until we have data to read
      000377                       2108 00101$:
      000377 30 C3 FD         [24] 2109 	jnb	_SI,00101$
                           00037A  2110 	C$i2c.h$243$1$104 ==.
                                   2111 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:243: input_data = SMB0DAT;       //Read the data
      00037A AF C2            [24] 2112 	mov	r7,_SMB0DAT
                           00037C  2113 	C$i2c.h$244$1$104 ==.
                                   2114 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:244: SI = 0;                     //Clear SI
      00037C C2 C3            [12] 2115 	clr	_SI
                           00037E  2116 	C$i2c.h$245$1$104 ==.
                                   2117 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:245: STO = 1;                    //Set stop bit
      00037E D2 C4            [12] 2118 	setb	_STO
                           000380  2119 	C$i2c.h$246$1$104 ==.
                                   2120 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:246: while(!SI);                 //Wait for stop
      000380                       2121 00104$:
                           000380  2122 	C$i2c.h$247$1$104 ==.
                                   2123 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:247: SI = 0;
      000380 10 C3 02         [24] 2124 	jbc	_SI,00122$
      000383 80 FB            [24] 2125 	sjmp	00104$
      000385                       2126 00122$:
                           000385  2127 	C$i2c.h$248$1$104 ==.
                                   2128 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:248: return input_data;          //Return the read data
      000385 8F 82            [24] 2129 	mov	dpl,r7
                           000387  2130 	C$i2c.h$249$1$104 ==.
                           000387  2131 	XG$i2c_read_and_stop$0$0 ==.
      000387 22               [24] 2132 	ret
                                   2133 ;------------------------------------------------------------
                                   2134 ;Allocation info for local variables in function 'i2c_write_data'
                                   2135 ;------------------------------------------------------------
                                   2136 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2137 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2138 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2139 ;addr                      Allocated to registers r7 
                                   2140 ;i                         Allocated to registers 
                                   2141 ;------------------------------------------------------------
                           000388  2142 	G$i2c_write_data$0$0 ==.
                           000388  2143 	C$i2c.h$252$1$104 ==.
                                   2144 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:252: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2145 ;	-----------------------------------------
                                   2146 ;	 function i2c_write_data
                                   2147 ;	-----------------------------------------
      000388                       2148 _i2c_write_data:
      000388 AF 82            [24] 2149 	mov	r7,dpl
                           00038A  2150 	C$i2c.h$256$1$106 ==.
                                   2151 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:256: EA = 0;                     //Don't allow interrupts during I2C work
      00038A C2 AF            [12] 2152 	clr	_EA
                           00038C  2153 	C$i2c.h$257$1$106 ==.
                                   2154 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:257: i2c_start();                //Initiate I2C transfer
      00038C C0 07            [24] 2155 	push	ar7
      00038E 12r03r4D         [24] 2156 	lcall	_i2c_start
      000391 D0 07            [24] 2157 	pop	ar7
                           000393  2158 	C$i2c.h$258$1$106 ==.
                                   2159 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:258: i2c_write(addr & ~0x01);    //Write the desired address to the bus
      000393 74 FE            [12] 2160 	mov	a,#0xfe
      000395 5F               [12] 2161 	anl	a,r7
      000396 F5 82            [12] 2162 	mov	dpl,a
      000398 12r03r5A         [24] 2163 	lcall	_i2c_write
                           00039B  2164 	C$i2c.h$259$1$106 ==.
                                   2165 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:259: i2c_write(start_reg);       //Write the start register to the bus
      00039B 85*0A 82         [24] 2166 	mov	dpl,_i2c_write_data_PARM_2
      00039E 12r03r5A         [24] 2167 	lcall	_i2c_write
                           0003A1  2168 	C$i2c.h$260$1$106 ==.
                                   2169 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:260: for(i=0; i<num_bytes-1; i++) //Write the data to the register(s)
      0003A1 7F 00            [12] 2170 	mov	r7,#0x00
      0003A3                       2171 00103$:
      0003A3 AD*0E            [24] 2172 	mov	r5,_i2c_write_data_PARM_4
      0003A5 7E 00            [12] 2173 	mov	r6,#0x00
      0003A7 1D               [12] 2174 	dec	r5
      0003A8 BD FF 01         [24] 2175 	cjne	r5,#0xff,00114$
      0003AB 1E               [12] 2176 	dec	r6
      0003AC                       2177 00114$:
      0003AC 8F 03            [24] 2178 	mov	ar3,r7
      0003AE 7C 00            [12] 2179 	mov	r4,#0x00
      0003B0 C3               [12] 2180 	clr	c
      0003B1 EB               [12] 2181 	mov	a,r3
      0003B2 9D               [12] 2182 	subb	a,r5
      0003B3 EC               [12] 2183 	mov	a,r4
      0003B4 64 80            [12] 2184 	xrl	a,#0x80
      0003B6 8E F0            [24] 2185 	mov	b,r6
      0003B8 63 F0 80         [24] 2186 	xrl	b,#0x80
      0003BB 95 F0            [12] 2187 	subb	a,b
      0003BD 50 1F            [24] 2188 	jnc	00101$
                           0003BF  2189 	C$i2c.h$261$1$106 ==.
                                   2190 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:261: i2c_write(buffer[i]);
      0003BF EF               [12] 2191 	mov	a,r7
      0003C0 25*0B            [12] 2192 	add	a,_i2c_write_data_PARM_3
      0003C2 FC               [12] 2193 	mov	r4,a
      0003C3 E4               [12] 2194 	clr	a
      0003C4 35*0C            [12] 2195 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003C6 FD               [12] 2196 	mov	r5,a
      0003C7 AE*0D            [24] 2197 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003C9 8C 82            [24] 2198 	mov	dpl,r4
      0003CB 8D 83            [24] 2199 	mov	dph,r5
      0003CD 8E F0            [24] 2200 	mov	b,r6
      0003CF 12r00r00         [24] 2201 	lcall	__gptrget
      0003D2 F5 82            [12] 2202 	mov	dpl,a
      0003D4 C0 07            [24] 2203 	push	ar7
      0003D6 12r03r5A         [24] 2204 	lcall	_i2c_write
      0003D9 D0 07            [24] 2205 	pop	ar7
                           0003DB  2206 	C$i2c.h$260$1$106 ==.
                                   2207 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:260: for(i=0; i<num_bytes-1; i++) //Write the data to the register(s)
      0003DB 0F               [12] 2208 	inc	r7
      0003DC 80 C5            [24] 2209 	sjmp	00103$
      0003DE                       2210 00101$:
                           0003DE  2211 	C$i2c.h$262$1$106 ==.
                                   2212 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:262: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003DE AE*0E            [24] 2213 	mov	r6,_i2c_write_data_PARM_4
      0003E0 7F 00            [12] 2214 	mov	r7,#0x00
      0003E2 1E               [12] 2215 	dec	r6
      0003E3 BE FF 01         [24] 2216 	cjne	r6,#0xff,00116$
      0003E6 1F               [12] 2217 	dec	r7
      0003E7                       2218 00116$:
      0003E7 EE               [12] 2219 	mov	a,r6
      0003E8 25*0B            [12] 2220 	add	a,_i2c_write_data_PARM_3
      0003EA FE               [12] 2221 	mov	r6,a
      0003EB EF               [12] 2222 	mov	a,r7
      0003EC 35*0C            [12] 2223 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003EE FF               [12] 2224 	mov	r7,a
      0003EF AD*0D            [24] 2225 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003F1 8E 82            [24] 2226 	mov	dpl,r6
      0003F3 8F 83            [24] 2227 	mov	dph,r7
      0003F5 8D F0            [24] 2228 	mov	b,r5
      0003F7 12r00r00         [24] 2229 	lcall	__gptrget
      0003FA F5 82            [12] 2230 	mov	dpl,a
      0003FC 12r03r63         [24] 2231 	lcall	_i2c_write_and_stop
                           0003FF  2232 	C$i2c.h$263$1$106 ==.
                                   2233 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:263: EA = 1;                     //Re-Enable interrupts
      0003FF D2 AF            [12] 2234 	setb	_EA
                           000401  2235 	C$i2c.h$264$1$106 ==.
                           000401  2236 	XG$i2c_write_data$0$0 ==.
      000401 22               [24] 2237 	ret
                                   2238 ;------------------------------------------------------------
                                   2239 ;Allocation info for local variables in function 'i2c_read_data'
                                   2240 ;------------------------------------------------------------
                                   2241 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2242 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2243 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2244 ;addr                      Allocated to registers r7 
                                   2245 ;j                         Allocated to registers 
                                   2246 ;------------------------------------------------------------
                           000402  2247 	G$i2c_read_data$0$0 ==.
                           000402  2248 	C$i2c.h$267$1$106 ==.
                                   2249 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:267: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2250 ;	-----------------------------------------
                                   2251 ;	 function i2c_read_data
                                   2252 ;	-----------------------------------------
      000402                       2253 _i2c_read_data:
      000402 AF 82            [24] 2254 	mov	r7,dpl
                           000404  2255 	C$i2c.h$271$1$108 ==.
                                   2256 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:271: EA = 0;                     //Don't allow interrupts during I2C work
      000404 C2 AF            [12] 2257 	clr	_EA
                           000406  2258 	C$i2c.h$272$1$108 ==.
                                   2259 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:272: i2c_start();                //Start I2C transfer
      000406 C0 07            [24] 2260 	push	ar7
      000408 12r03r4D         [24] 2261 	lcall	_i2c_start
      00040B D0 07            [24] 2262 	pop	ar7
                           00040D  2263 	C$i2c.h$273$1$108 ==.
                                   2264 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:273: i2c_write(addr & ~0x01);    //Write address of device that will be written to, send 0
      00040D 74 FE            [12] 2265 	mov	a,#0xfe
      00040F 5F               [12] 2266 	anl	a,r7
      000410 F5 82            [12] 2267 	mov	dpl,a
      000412 C0 07            [24] 2268 	push	ar7
      000414 12r03r5A         [24] 2269 	lcall	_i2c_write
                           000417  2270 	C$i2c.h$274$1$108 ==.
                                   2271 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:274: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      000417 85*0F 82         [24] 2272 	mov	dpl,_i2c_read_data_PARM_2
      00041A 12r03r63         [24] 2273 	lcall	_i2c_write_and_stop
                           00041D  2274 	C$i2c.h$275$1$108 ==.
                                   2275 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:275: i2c_start();                //Start I2C transfer
      00041D 12r03r4D         [24] 2276 	lcall	_i2c_start
      000420 D0 07            [24] 2277 	pop	ar7
                           000422  2278 	C$i2c.h$276$1$108 ==.
                                   2279 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:276: i2c_write(addr | 0x01);     //Write address again, this time indicating a read operation
      000422 74 01            [12] 2280 	mov	a,#0x01
      000424 4F               [12] 2281 	orl	a,r7
      000425 F5 82            [12] 2282 	mov	dpl,a
      000427 12r03r5A         [24] 2283 	lcall	_i2c_write
                           00042A  2284 	C$i2c.h$277$1$108 ==.
                                   2285 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:277: for(j = 0; j < num_bytes - 1; j++)
      00042A 7F 00            [12] 2286 	mov	r7,#0x00
      00042C                       2287 00103$:
      00042C AD*13            [24] 2288 	mov	r5,_i2c_read_data_PARM_4
      00042E 7E 00            [12] 2289 	mov	r6,#0x00
      000430 1D               [12] 2290 	dec	r5
      000431 BD FF 01         [24] 2291 	cjne	r5,#0xff,00114$
      000434 1E               [12] 2292 	dec	r6
      000435                       2293 00114$:
      000435 8F 03            [24] 2294 	mov	ar3,r7
      000437 7C 00            [12] 2295 	mov	r4,#0x00
      000439 C3               [12] 2296 	clr	c
      00043A EB               [12] 2297 	mov	a,r3
      00043B 9D               [12] 2298 	subb	a,r5
      00043C EC               [12] 2299 	mov	a,r4
      00043D 64 80            [12] 2300 	xrl	a,#0x80
      00043F 8E F0            [24] 2301 	mov	b,r6
      000441 63 F0 80         [24] 2302 	xrl	b,#0x80
      000444 95 F0            [12] 2303 	subb	a,b
      000446 50 2E            [24] 2304 	jnc	00101$
                           000448  2305 	C$i2c.h$279$2$109 ==.
                                   2306 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:279: AA = 1;                 //Set acknowledge bit
      000448 D2 C2            [12] 2307 	setb	_AA
                           00044A  2308 	C$i2c.h$280$2$109 ==.
                                   2309 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:280: buffer[j] = i2c_read(); //Read data, save it in buffer
      00044A EF               [12] 2310 	mov	a,r7
      00044B 25*10            [12] 2311 	add	a,_i2c_read_data_PARM_3
      00044D FC               [12] 2312 	mov	r4,a
      00044E E4               [12] 2313 	clr	a
      00044F 35*11            [12] 2314 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000451 FD               [12] 2315 	mov	r5,a
      000452 AE*12            [24] 2316 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      000454 C0 07            [24] 2317 	push	ar7
      000456 C0 06            [24] 2318 	push	ar6
      000458 C0 05            [24] 2319 	push	ar5
      00045A C0 04            [24] 2320 	push	ar4
      00045C 12r03r6E         [24] 2321 	lcall	_i2c_read
      00045F AB 82            [24] 2322 	mov	r3,dpl
      000461 D0 04            [24] 2323 	pop	ar4
      000463 D0 05            [24] 2324 	pop	ar5
      000465 D0 06            [24] 2325 	pop	ar6
      000467 D0 07            [24] 2326 	pop	ar7
      000469 8C 82            [24] 2327 	mov	dpl,r4
      00046B 8D 83            [24] 2328 	mov	dph,r5
      00046D 8E F0            [24] 2329 	mov	b,r6
      00046F EB               [12] 2330 	mov	a,r3
      000470 12r00r00         [24] 2331 	lcall	__gptrput
                           000473  2332 	C$i2c.h$277$1$108 ==.
                                   2333 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:277: for(j = 0; j < num_bytes - 1; j++)
      000473 0F               [12] 2334 	inc	r7
      000474 80 B6            [24] 2335 	sjmp	00103$
      000476                       2336 00101$:
                           000476  2337 	C$i2c.h$282$1$108 ==.
                                   2338 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:282: AA = 0;
      000476 C2 C2            [12] 2339 	clr	_AA
                           000478  2340 	C$i2c.h$283$1$108 ==.
                                   2341 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:283: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      000478 AE*13            [24] 2342 	mov	r6,_i2c_read_data_PARM_4
      00047A 7F 00            [12] 2343 	mov	r7,#0x00
      00047C 1E               [12] 2344 	dec	r6
      00047D BE FF 01         [24] 2345 	cjne	r6,#0xff,00116$
      000480 1F               [12] 2346 	dec	r7
      000481                       2347 00116$:
      000481 EE               [12] 2348 	mov	a,r6
      000482 25*10            [12] 2349 	add	a,_i2c_read_data_PARM_3
      000484 FE               [12] 2350 	mov	r6,a
      000485 EF               [12] 2351 	mov	a,r7
      000486 35*11            [12] 2352 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000488 FF               [12] 2353 	mov	r7,a
      000489 AD*12            [24] 2354 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      00048B C0 07            [24] 2355 	push	ar7
      00048D C0 06            [24] 2356 	push	ar6
      00048F C0 05            [24] 2357 	push	ar5
      000491 12r03r77         [24] 2358 	lcall	_i2c_read_and_stop
      000494 AC 82            [24] 2359 	mov	r4,dpl
      000496 D0 05            [24] 2360 	pop	ar5
      000498 D0 06            [24] 2361 	pop	ar6
      00049A D0 07            [24] 2362 	pop	ar7
      00049C 8E 82            [24] 2363 	mov	dpl,r6
      00049E 8F 83            [24] 2364 	mov	dph,r7
      0004A0 8D F0            [24] 2365 	mov	b,r5
      0004A2 EC               [12] 2366 	mov	a,r4
      0004A3 12r00r00         [24] 2367 	lcall	__gptrput
                           0004A6  2368 	C$i2c.h$284$1$108 ==.
                                   2369 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:284: EA = 1;                     //Re-Enable interrupts
      0004A6 D2 AF            [12] 2370 	setb	_EA
                           0004A8  2371 	C$i2c.h$285$1$108 ==.
                           0004A8  2372 	XG$i2c_read_data$0$0 ==.
      0004A8 22               [24] 2373 	ret
                                   2374 ;------------------------------------------------------------
                                   2375 ;Allocation info for local variables in function 'Accel_Init'
                                   2376 ;------------------------------------------------------------
                           0004A9  2377 	G$Accel_Init$0$0 ==.
                           0004A9  2378 	C$i2c.h$294$1$108 ==.
                                   2379 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:294: void Accel_Init(void)
                                   2380 ;	-----------------------------------------
                                   2381 ;	 function Accel_Init
                                   2382 ;	-----------------------------------------
      0004A9                       2383 _Accel_Init:
                           0004A9  2384 	C$i2c.h$298$1$111 ==.
                                   2385 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:298: Data2[0]=0x23;  //normal power mode, 50Hz ODR, y & x axes enabled
      0004A9 75*00 23         [24] 2386 	mov	_Data2,#0x23
                           0004AC  2387 	C$i2c.h$300$1$111 ==.
                                   2388 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:300: Data2[1]=0x00;  //default - no filtering
      0004AC 75*01 00         [24] 2389 	mov	(_Data2 + 0x0001),#0x00
                           0004AF  2390 	C$i2c.h$301$1$111 ==.
                                   2391 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:301: Data2[1]=0x10;  //filtered data selected, HPF = 1.0->0.125Hz
      0004AF 75*01 10         [24] 2392 	mov	(_Data2 + 0x0001),#0x10
                           0004B2  2393 	C$i2c.h$302$1$111 ==.
                                   2394 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:302: Data2[2]=0x00;  //default - no interrupts enabled
      0004B2 75*02 00         [24] 2395 	mov	(_Data2 + 0x0002),#0x00
                           0004B5  2396 	C$i2c.h$304$1$111 ==.
                                   2397 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:304: i2c_write_data(addr_accel, 0x20, Data2, 1);
      0004B5 75*0Br00         [24] 2398 	mov	_i2c_write_data_PARM_3,#_Data2
      0004B8 75*0C 00         [24] 2399 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004BB 75*0D 40         [24] 2400 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004BE 75*0A 20         [24] 2401 	mov	_i2c_write_data_PARM_2,#0x20
      0004C1 75*0E 01         [24] 2402 	mov	_i2c_write_data_PARM_4,#0x01
      0004C4 75 82 30         [24] 2403 	mov	dpl,#0x30
      0004C7 12r03r88         [24] 2404 	lcall	_i2c_write_data
                           0004CA  2405 	C$i2c.h$310$1$111 ==.
                           0004CA  2406 	XG$Accel_Init$0$0 ==.
      0004CA 22               [24] 2407 	ret
                                   2408 ;------------------------------------------------------------
                                   2409 ;Allocation info for local variables in function 'Accel_Init_C'
                                   2410 ;------------------------------------------------------------
                           0004CB  2411 	G$Accel_Init_C$0$0 ==.
                           0004CB  2412 	C$i2c.h$313$1$111 ==.
                                   2413 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:313: void Accel_Init_C(void)
                                   2414 ;	-----------------------------------------
                                   2415 ;	 function Accel_Init_C
                                   2416 ;	-----------------------------------------
      0004CB                       2417 _Accel_Init_C:
                           0004CB  2418 	C$i2c.h$318$1$113 ==.
                                   2419 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:318: Data2[0]=0x04;  //set register address auto increment bit
      0004CB 75*00 04         [24] 2420 	mov	_Data2,#0x04
                           0004CE  2421 	C$i2c.h$319$1$113 ==.
                                   2422 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:319: i2c_write_data(addr_accelC, 0x23, Data2, 1);
      0004CE 75*0Br00         [24] 2423 	mov	_i2c_write_data_PARM_3,#_Data2
      0004D1 75*0C 00         [24] 2424 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004D4 75*0D 40         [24] 2425 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004D7 75*0A 23         [24] 2426 	mov	_i2c_write_data_PARM_2,#0x23
      0004DA 75*0E 01         [24] 2427 	mov	_i2c_write_data_PARM_4,#0x01
      0004DD 75 82 3A         [24] 2428 	mov	dpl,#0x3a
      0004E0 12r03r88         [24] 2429 	lcall	_i2c_write_data
                           0004E3  2430 	C$i2c.h$321$1$113 ==.
                                   2431 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:321: Data2[0]=0x6B;  //R20 normal power mode, 800Hz ODR, y & x axes enabled
      0004E3 75*00 6B         [24] 2432 	mov	_Data2,#0x6b
                           0004E6  2433 	C$i2c.h$323$1$113 ==.
                                   2434 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:323: Data2[1]=0x00;  //R21 Default - no HP filtering
      0004E6 75*01 00         [24] 2435 	mov	(_Data2 + 0x0001),#0x00
                           0004E9  2436 	C$i2c.h$325$1$113 ==.
                                   2437 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:325: Data2[2]=0x00;  //R22 Default - no interrupts enabled
      0004E9 75*02 00         [24] 2438 	mov	(_Data2 + 0x0002),#0x00
                           0004EC  2439 	C$i2c.h$326$1$113 ==.
                                   2440 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:326: i2c_write_data(addr_accelC, 0x20, Data2, 1);
      0004EC 75*0Br00         [24] 2441 	mov	_i2c_write_data_PARM_3,#_Data2
      0004EF 75*0C 00         [24] 2442 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004F2 75*0D 40         [24] 2443 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004F5 75*0A 20         [24] 2444 	mov	_i2c_write_data_PARM_2,#0x20
      0004F8 75*0E 01         [24] 2445 	mov	_i2c_write_data_PARM_4,#0x01
      0004FB 75 82 3A         [24] 2446 	mov	dpl,#0x3a
      0004FE 12r03r88         [24] 2447 	lcall	_i2c_write_data
                           000501  2448 	C$i2c.h$328$1$113 ==.
                           000501  2449 	XG$Accel_Init_C$0$0 ==.
      000501 22               [24] 2450 	ret
                                   2451 ;------------------------------------------------------------
                                   2452 ;Allocation info for local variables in function 'main'
                                   2453 ;------------------------------------------------------------
                           000502  2454 	G$main$0$0 ==.
                           000502  2455 	C$lab6.c$64$1$113 ==.
                                   2456 ;	C:\SiLabs\LITEC\Lab6\lab6.c:64: void main(void)
                                   2457 ;	-----------------------------------------
                                   2458 ;	 function main
                                   2459 ;	-----------------------------------------
      000502                       2460 _main:
                           000502  2461 	C$lab6.c$66$1$126 ==.
                                   2462 ;	C:\SiLabs\LITEC\Lab6\lab6.c:66: Sys_Init();
      000502 12r00r37         [24] 2463 	lcall	_Sys_Init
                           000505  2464 	C$lab6.c$67$1$126 ==.
                                   2465 ;	C:\SiLabs\LITEC\Lab6\lab6.c:67: putchar(' ');
      000505 75 82 20         [24] 2466 	mov	dpl,#0x20
      000508 12r00r4A         [24] 2467 	lcall	_putchar
                           00050B  2468 	C$lab6.c$68$1$126 ==.
                                   2469 ;	C:\SiLabs\LITEC\Lab6\lab6.c:68: Port_Init();
      00050B 12r0Ar2E         [24] 2470 	lcall	_Port_Init
                           00050E  2471 	C$lab6.c$69$1$126 ==.
                                   2472 ;	C:\SiLabs\LITEC\Lab6\lab6.c:69: ADC_Init();
      00050E 12r0Ar42         [24] 2473 	lcall	_ADC_Init
                           000511  2474 	C$lab6.c$70$1$126 ==.
                                   2475 ;	C:\SiLabs\LITEC\Lab6\lab6.c:70: XBR0_Init();
      000511 12r0Ar38         [24] 2476 	lcall	_XBR0_Init
                           000514  2477 	C$lab6.c$71$1$126 ==.
                                   2478 ;	C:\SiLabs\LITEC\Lab6\lab6.c:71: PCA_Init();
      000514 12r0Ar61         [24] 2479 	lcall	_PCA_Init
                           000517  2480 	C$lab6.c$72$1$126 ==.
                                   2481 ;	C:\SiLabs\LITEC\Lab6\lab6.c:72: SMB_Init();
      000517 12r0Ar3C         [24] 2482 	lcall	_SMB_Init
                           00051A  2483 	C$lab6.c$73$1$126 ==.
                                   2484 ;	C:\SiLabs\LITEC\Lab6\lab6.c:73: Interrupt_Init();
      00051A 12r0Ar71         [24] 2485 	lcall	_Interrupt_Init
                           00051D  2486 	C$lab6.c$75$1$126 ==.
                                   2487 ;	C:\SiLabs\LITEC\Lab6\lab6.c:75: printf("Choose a desired heading:\n\r1) 0\n\r2) 90\n\r3) 180\n\r4) 270\n\r");
      00051D 74r29            [12] 2488 	mov	a,#___str_3
      00051F C0 E0            [24] 2489 	push	acc
      000521 74s00            [12] 2490 	mov	a,#(___str_3 >> 8)
      000523 C0 E0            [24] 2491 	push	acc
      000525 74 80            [12] 2492 	mov	a,#0x80
      000527 C0 E0            [24] 2493 	push	acc
      000529 12r00r00         [24] 2494 	lcall	_printf
      00052C 15 81            [12] 2495 	dec	sp
      00052E 15 81            [12] 2496 	dec	sp
      000530 15 81            [12] 2497 	dec	sp
                           000532  2498 	C$lab6.c$76$1$126 ==.
                                   2499 ;	C:\SiLabs\LITEC\Lab6\lab6.c:76: input=getchar();
      000532 12r00r54         [24] 2500 	lcall	_getchar
      000535 85 82*1E         [24] 2501 	mov	_input,dpl
                           000538  2502 	C$lab6.c$77$1$126 ==.
                                   2503 ;	C:\SiLabs\LITEC\Lab6\lab6.c:77: if(input=='1')//user chooses desired heading of 0, 90, 180, or 270 degrees
      000538 74 31            [12] 2504 	mov	a,#0x31
      00053A B5*1E 07         [24] 2505 	cjne	a,_input,00108$
                           00053D  2506 	C$lab6.c$78$1$126 ==.
                                   2507 ;	C:\SiLabs\LITEC\Lab6\lab6.c:78: desired_original=0;
      00053D E4               [12] 2508 	clr	a
      00053E F5*1B            [12] 2509 	mov	_desired_original,a
      000540 F5*1C            [12] 2510 	mov	(_desired_original + 1),a
      000542 80 20            [24] 2511 	sjmp	00109$
      000544                       2512 00108$:
                           000544  2513 	C$lab6.c$79$1$126 ==.
                                   2514 ;	C:\SiLabs\LITEC\Lab6\lab6.c:79: else if(input=='2')
      000544 74 32            [12] 2515 	mov	a,#0x32
      000546 B5*1E 08         [24] 2516 	cjne	a,_input,00105$
                           000549  2517 	C$lab6.c$80$1$126 ==.
                                   2518 ;	C:\SiLabs\LITEC\Lab6\lab6.c:80: desired_original=900;
      000549 75*1B 84         [24] 2519 	mov	_desired_original,#0x84
      00054C 75*1C 03         [24] 2520 	mov	(_desired_original + 1),#0x03
      00054F 80 13            [24] 2521 	sjmp	00109$
      000551                       2522 00105$:
                           000551  2523 	C$lab6.c$81$1$126 ==.
                                   2524 ;	C:\SiLabs\LITEC\Lab6\lab6.c:81: else if(input=='3')
      000551 74 33            [12] 2525 	mov	a,#0x33
      000553 B5*1E 08         [24] 2526 	cjne	a,_input,00102$
                           000556  2527 	C$lab6.c$82$1$126 ==.
                                   2528 ;	C:\SiLabs\LITEC\Lab6\lab6.c:82: desired_original=1800;
      000556 75*1B 08         [24] 2529 	mov	_desired_original,#0x08
      000559 75*1C 07         [24] 2530 	mov	(_desired_original + 1),#0x07
      00055C 80 06            [24] 2531 	sjmp	00109$
      00055E                       2532 00102$:
                           00055E  2533 	C$lab6.c$84$1$126 ==.
                                   2534 ;	C:\SiLabs\LITEC\Lab6\lab6.c:84: desired_original=2700;
      00055E 75*1B 8C         [24] 2535 	mov	_desired_original,#0x8c
      000561 75*1C 0A         [24] 2536 	mov	(_desired_original + 1),#0x0a
      000564                       2537 00109$:
                           000564  2538 	C$lab6.c$86$1$126 ==.
                                   2539 ;	C:\SiLabs\LITEC\Lab6\lab6.c:86: desired=desired_original;
      000564 85*1B*19         [24] 2540 	mov	_desired,_desired_original
      000567 85*1C*1A         [24] 2541 	mov	(_desired + 1),(_desired_original + 1)
                           00056A  2542 	C$lab6.c$89$1$126 ==.
                                   2543 ;	C:\SiLabs\LITEC\Lab6\lab6.c:89: printf("\n\rPress u and d for up and down until the rotors are vertical. Press space when done.\n\r");
      00056A 74r62            [12] 2544 	mov	a,#___str_4
      00056C C0 E0            [24] 2545 	push	acc
      00056E 74s00            [12] 2546 	mov	a,#(___str_4 >> 8)
      000570 C0 E0            [24] 2547 	push	acc
      000572 74 80            [12] 2548 	mov	a,#0x80
      000574 C0 E0            [24] 2549 	push	acc
      000576 12r00r00         [24] 2550 	lcall	_printf
      000579 15 81            [12] 2551 	dec	sp
      00057B 15 81            [12] 2552 	dec	sp
      00057D 15 81            [12] 2553 	dec	sp
                           00057F  2554 	C$lab6.c$90$1$126 ==.
                                   2555 ;	C:\SiLabs\LITEC\Lab6\lab6.c:90: input=getchar();
      00057F 12r00r54         [24] 2556 	lcall	_getchar
      000582 85 82*1E         [24] 2557 	mov	_input,dpl
                           000585  2558 	C$lab6.c$91$1$126 ==.
                                   2559 ;	C:\SiLabs\LITEC\Lab6\lab6.c:91: while(input!=' ') {//calibrate rotor angle because gondolas differ
      000585                       2560 00115$:
      000585 74 20            [12] 2561 	mov	a,#0x20
      000587 B5*1E 02         [24] 2562 	cjne	a,_input,00162$
      00058A 80 38            [24] 2563 	sjmp	00117$
      00058C                       2564 00162$:
                           00058C  2565 	C$lab6.c$92$2$127 ==.
                                   2566 ;	C:\SiLabs\LITEC\Lab6\lab6.c:92: if(input=='u')
      00058C 74 75            [12] 2567 	mov	a,#0x75
      00058E B5*1E 0D         [24] 2568 	cjne	a,_input,00113$
                           000591  2569 	C$lab6.c$93$2$127 ==.
                                   2570 ;	C:\SiLabs\LITEC\Lab6\lab6.c:93: angle_PW+=50;
      000591 74 32            [12] 2571 	mov	a,#0x32
      000593 25*39            [12] 2572 	add	a,_angle_PW
      000595 F5*39            [12] 2573 	mov	_angle_PW,a
      000597 E4               [12] 2574 	clr	a
      000598 35*3A            [12] 2575 	addc	a,(_angle_PW + 1)
      00059A F5*3A            [12] 2576 	mov	(_angle_PW + 1),a
      00059C 80 11            [24] 2577 	sjmp	00114$
      00059E                       2578 00113$:
                           00059E  2579 	C$lab6.c$94$2$127 ==.
                                   2580 ;	C:\SiLabs\LITEC\Lab6\lab6.c:94: else if(input=='d')
      00059E 74 64            [12] 2581 	mov	a,#0x64
      0005A0 B5*1E 0C         [24] 2582 	cjne	a,_input,00114$
                           0005A3  2583 	C$lab6.c$95$2$127 ==.
                                   2584 ;	C:\SiLabs\LITEC\Lab6\lab6.c:95: angle_PW-=50;
      0005A3 E5*39            [12] 2585 	mov	a,_angle_PW
      0005A5 24 CE            [12] 2586 	add	a,#0xce
      0005A7 F5*39            [12] 2587 	mov	_angle_PW,a
      0005A9 E5*3A            [12] 2588 	mov	a,(_angle_PW + 1)
      0005AB 34 FF            [12] 2589 	addc	a,#0xff
      0005AD F5*3A            [12] 2590 	mov	(_angle_PW + 1),a
      0005AF                       2591 00114$:
                           0005AF  2592 	C$lab6.c$96$2$127 ==.
                                   2593 ;	C:\SiLabs\LITEC\Lab6\lab6.c:96: PCA0CP1 = 0xFFFF-angle_PW;
      0005AF 74 FF            [12] 2594 	mov	a,#0xff
      0005B1 C3               [12] 2595 	clr	c
      0005B2 95*39            [12] 2596 	subb	a,_angle_PW
      0005B4 F5 EB            [12] 2597 	mov	((_PCA0CP1 >> 0) & 0xFF),a
      0005B6 74 FF            [12] 2598 	mov	a,#0xff
      0005B8 95*3A            [12] 2599 	subb	a,(_angle_PW + 1)
      0005BA F5 FB            [12] 2600 	mov	((_PCA0CP1 >> 8) & 0xFF),a
                           0005BC  2601 	C$lab6.c$97$2$127 ==.
                                   2602 ;	C:\SiLabs\LITEC\Lab6\lab6.c:97: input=getchar();
      0005BC 12r00r54         [24] 2603 	lcall	_getchar
      0005BF 85 82*1E         [24] 2604 	mov	_input,dpl
      0005C2 80 C1            [24] 2605 	sjmp	00115$
      0005C4                       2606 00117$:
                           0005C4  2607 	C$lab6.c$99$1$126 ==.
                                   2608 ;	C:\SiLabs\LITEC\Lab6\lab6.c:99: PW_vert=angle_PW;
      0005C4 85*39*37         [24] 2609 	mov	_PW_vert,_angle_PW
      0005C7 85*3A*38         [24] 2610 	mov	(_PW_vert + 1),(_angle_PW + 1)
                           0005CA  2611 	C$lab6.c$100$1$126 ==.
                                   2612 ;	C:\SiLabs\LITEC\Lab6\lab6.c:100: printf("\n\rDesired Heading:%u\n\r", desired);
      0005CA C0*19            [24] 2613 	push	_desired
      0005CC C0*1A            [24] 2614 	push	(_desired + 1)
      0005CE 74rBA            [12] 2615 	mov	a,#___str_5
      0005D0 C0 E0            [24] 2616 	push	acc
      0005D2 74s00            [12] 2617 	mov	a,#(___str_5 >> 8)
      0005D4 C0 E0            [24] 2618 	push	acc
      0005D6 74 80            [12] 2619 	mov	a,#0x80
      0005D8 C0 E0            [24] 2620 	push	acc
      0005DA 12r00r00         [24] 2621 	lcall	_printf
      0005DD E5 81            [12] 2622 	mov	a,sp
      0005DF 24 FB            [12] 2623 	add	a,#0xfb
      0005E1 F5 81            [12] 2624 	mov	sp,a
                           0005E3  2625 	C$lab6.c$102$1$126 ==.
                                   2626 ;	C:\SiLabs\LITEC\Lab6\lab6.c:102: PCA0CP1 = 0xFFFF-PW_vert;
      0005E3 74 FF            [12] 2627 	mov	a,#0xff
      0005E5 C3               [12] 2628 	clr	c
      0005E6 95*37            [12] 2629 	subb	a,_PW_vert
      0005E8 F5 EB            [12] 2630 	mov	((_PCA0CP1 >> 0) & 0xFF),a
      0005EA 74 FF            [12] 2631 	mov	a,#0xff
      0005EC 95*38            [12] 2632 	subb	a,(_PW_vert + 1)
      0005EE F5 FB            [12] 2633 	mov	((_PCA0CP1 >> 8) & 0xFF),a
                           0005F0  2634 	C$lab6.c$104$1$126 ==.
                                   2635 ;	C:\SiLabs\LITEC\Lab6\lab6.c:104: PCA0CP2 = 0xFFFF-PW_neut;//start motors at neutral
      0005F0 75 EC 32         [24] 2636 	mov	((_PCA0CP2 >> 0) & 0xFF),#0x32
      0005F3 75 FC F5         [24] 2637 	mov	((_PCA0CP2 >> 8) & 0xFF),#0xf5
                           0005F6  2638 	C$lab6.c$105$1$126 ==.
                                   2639 ;	C:\SiLabs\LITEC\Lab6\lab6.c:105: PCA0CP3 = 0xFFFF-PW_neut;
      0005F6 75 ED 32         [24] 2640 	mov	((_PCA0CP3 >> 0) & 0xFF),#0x32
      0005F9 75 FD F5         [24] 2641 	mov	((_PCA0CP3 >> 8) & 0xFF),#0xf5
                           0005FC  2642 	C$lab6.c$106$1$126 ==.
                                   2643 ;	C:\SiLabs\LITEC\Lab6\lab6.c:106: ccount=0;
      0005FC 75*14 00         [24] 2644 	mov	_ccount,#0x00
                           0005FF  2645 	C$lab6.c$107$1$126 ==.
                                   2646 ;	C:\SiLabs\LITEC\Lab6\lab6.c:107: while(ccount<50);
      0005FF                       2647 00118$:
      0005FF 74 CE            [12] 2648 	mov	a,#0x100 - 0x32
      000601 25*14            [12] 2649 	add	a,_ccount
      000603 50 FA            [24] 2650 	jnc	00118$
                           000605  2651 	C$lab6.c$109$1$126 ==.
                                   2652 ;	C:\SiLabs\LITEC\Lab6\lab6.c:109: ccount=0;//reset counters
      000605 75*14 00         [24] 2653 	mov	_ccount,#0x00
                           000608  2654 	C$lab6.c$110$1$126 ==.
                                   2655 ;	C:\SiLabs\LITEC\Lab6\lab6.c:110: rcount=0;
      000608 75*15 00         [24] 2656 	mov	_rcount,#0x00
                           00060B  2657 	C$lab6.c$111$1$126 ==.
                                   2658 ;	C:\SiLabs\LITEC\Lab6\lab6.c:111: print_count=0;
      00060B 75*1D 00         [24] 2659 	mov	_print_count,#0x00
                           00060E  2660 	C$lab6.c$112$1$126 ==.
                                   2661 ;	C:\SiLabs\LITEC\Lab6\lab6.c:112: while(1) {
      00060E                       2662 00122$:
                           00060E  2663 	C$lab6.c$113$2$128 ==.
                                   2664 ;	C:\SiLabs\LITEC\Lab6\lab6.c:113: Steering_Servo();//get compass data and control rotors
      00060E 12r07r64         [24] 2665 	lcall	_Steering_Servo
                           000611  2666 	C$lab6.c$114$2$128 ==.
                                   2667 ;	C:\SiLabs\LITEC\Lab6\lab6.c:114: Ranger();//get ranger data and control desired heading
      000611 12r06r17         [24] 2668 	lcall	_Ranger
      000614 80 F8            [24] 2669 	sjmp	00122$
                           000616  2670 	C$lab6.c$118$1$126 ==.
                           000616  2671 	XG$main$0$0 ==.
      000616 22               [24] 2672 	ret
                                   2673 ;------------------------------------------------------------
                                   2674 ;Allocation info for local variables in function 'Ranger'
                                   2675 ;------------------------------------------------------------
                           000617  2676 	G$Ranger$0$0 ==.
                           000617  2677 	C$lab6.c$120$1$126 ==.
                                   2678 ;	C:\SiLabs\LITEC\Lab6\lab6.c:120: void Ranger(void) {//get ranger data and control desired heading
                                   2679 ;	-----------------------------------------
                                   2680 ;	 function Ranger
                                   2681 ;	-----------------------------------------
      000617                       2682 _Ranger:
                           000617  2683 	C$lab6.c$121$1$130 ==.
                                   2684 ;	C:\SiLabs\LITEC\Lab6\lab6.c:121: if(rcount>=4) {//every 80ms
      000617 74 FC            [12] 2685 	mov	a,#0x100 - 0x04
      000619 25*15            [12] 2686 	add	a,_rcount
      00061B 50 24            [24] 2687 	jnc	00102$
                           00061D  2688 	C$lab6.c$122$2$131 ==.
                                   2689 ;	C:\SiLabs\LITEC\Lab6\lab6.c:122: rangervalue = ReadRanger();//get ranger value
      00061D 12r07r18         [24] 2690 	lcall	_ReadRanger
      000620 85 82*23         [24] 2691 	mov	_rangervalue,dpl
      000623 85 83*24         [24] 2692 	mov	(_rangervalue + 1),dph
                           000626  2693 	C$lab6.c$123$2$131 ==.
                                   2694 ;	C:\SiLabs\LITEC\Lab6\lab6.c:123: Data[0] = 0x51;                //sets results in cm
      000626 75*1F 51         [24] 2695 	mov	_Data,#0x51
                           000629  2696 	C$lab6.c$124$2$131 ==.
                                   2697 ;	C:\SiLabs\LITEC\Lab6\lab6.c:124: i2c_write_data(0xE0,0,Data,1);    //Write one byte of data to reg 0 at addr			
      000629 75*0Br1F         [24] 2698 	mov	_i2c_write_data_PARM_3,#_Data
      00062C 75*0C 00         [24] 2699 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00062F 75*0D 40         [24] 2700 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000632 75*0A 00         [24] 2701 	mov	_i2c_write_data_PARM_2,#0x00
      000635 75*0E 01         [24] 2702 	mov	_i2c_write_data_PARM_4,#0x01
      000638 75 82 E0         [24] 2703 	mov	dpl,#0xe0
      00063B 12r03r88         [24] 2704 	lcall	_i2c_write_data
                           00063E  2705 	C$lab6.c$125$2$131 ==.
                                   2706 ;	C:\SiLabs\LITEC\Lab6\lab6.c:125: rcount=0;//reset ranger counter
      00063E 75*15 00         [24] 2707 	mov	_rcount,#0x00
      000641                       2708 00102$:
                           000641  2709 	C$lab6.c$128$1$130 ==.
                                   2710 ;	C:\SiLabs\LITEC\Lab6\lab6.c:128: if(rangervalue>45 && rangervalue<55)//if at 50cm +-5
      000641 C3               [12] 2711 	clr	c
      000642 74 2D            [12] 2712 	mov	a,#0x2d
      000644 95*23            [12] 2713 	subb	a,_rangervalue
      000646 E4               [12] 2714 	clr	a
      000647 95*24            [12] 2715 	subb	a,(_rangervalue + 1)
      000649 50 14            [24] 2716 	jnc	00113$
      00064B C3               [12] 2717 	clr	c
      00064C E5*23            [12] 2718 	mov	a,_rangervalue
      00064E 94 37            [12] 2719 	subb	a,#0x37
      000650 E5*24            [12] 2720 	mov	a,(_rangervalue + 1)
      000652 94 00            [12] 2721 	subb	a,#0x00
      000654 50 09            [24] 2722 	jnc	00113$
                           000656  2723 	C$lab6.c$129$1$130 ==.
                                   2724 ;	C:\SiLabs\LITEC\Lab6\lab6.c:129: desired = desired_original;//keep desired heading at original choice
      000656 85*1B*19         [24] 2725 	mov	_desired,_desired_original
      000659 85*1C*1A         [24] 2726 	mov	(_desired + 1),(_desired_original + 1)
      00065C 02r06rE7         [24] 2727 	ljmp	00114$
      00065F                       2728 00113$:
                           00065F  2729 	C$lab6.c$131$1$130 ==.
                                   2730 ;	C:\SiLabs\LITEC\Lab6\lab6.c:131: else if(rangervalue<45) {//if value is less than 45cm
      00065F C3               [12] 2731 	clr	c
      000660 E5*23            [12] 2732 	mov	a,_rangervalue
      000662 94 2D            [12] 2733 	subb	a,#0x2d
      000664 E5*24            [12] 2734 	mov	a,(_rangervalue + 1)
      000666 94 00            [12] 2735 	subb	a,#0x00
      000668 50 40            [24] 2736 	jnc	00110$
                           00066A  2737 	C$lab6.c$132$2$132 ==.
                                   2738 ;	C:\SiLabs\LITEC\Lab6\lab6.c:132: if(rangervalue<=5)//if value is less than 5cm
      00066A C3               [12] 2739 	clr	c
      00066B 74 05            [12] 2740 	mov	a,#0x05
      00066D 95*23            [12] 2741 	subb	a,_rangervalue
      00066F E4               [12] 2742 	clr	a
      000670 95*24            [12] 2743 	subb	a,(_rangervalue + 1)
      000672 40 0E            [24] 2744 	jc	00104$
                           000674  2745 	C$lab6.c$133$2$132 ==.
                                   2746 ;	C:\SiLabs\LITEC\Lab6\lab6.c:133: desired = desired_original-1800;//decrease desired heading by 180degrees
      000674 E5*1B            [12] 2747 	mov	a,_desired_original
      000676 24 F8            [12] 2748 	add	a,#0xf8
      000678 F5*19            [12] 2749 	mov	_desired,a
      00067A E5*1C            [12] 2750 	mov	a,(_desired_original + 1)
      00067C 34 F8            [12] 2751 	addc	a,#0xf8
      00067E F5*1A            [12] 2752 	mov	(_desired + 1),a
      000680 80 65            [24] 2753 	sjmp	00114$
      000682                       2754 00104$:
                           000682  2755 	C$lab6.c$135$1$130 ==.
                                   2756 ;	C:\SiLabs\LITEC\Lab6\lab6.c:135: desired = desired_original-(-45*rangervalue+2025);
      000682 85*23*00         [24] 2757 	mov	__mulint_PARM_2,_rangervalue
      000685 85*24*01         [24] 2758 	mov	(__mulint_PARM_2 + 1),(_rangervalue + 1)
      000688 90 FF D3         [24] 2759 	mov	dptr,#0xffd3
      00068B 12r00r00         [24] 2760 	lcall	__mulint
      00068E E5 82            [12] 2761 	mov	a,dpl
      000690 85 83 F0         [24] 2762 	mov	b,dph
      000693 24 E9            [12] 2763 	add	a,#0xe9
      000695 FE               [12] 2764 	mov	r6,a
      000696 74 07            [12] 2765 	mov	a,#0x07
      000698 35 F0            [12] 2766 	addc	a,b
      00069A FF               [12] 2767 	mov	r7,a
      00069B AC*1B            [24] 2768 	mov	r4,_desired_original
      00069D AD*1C            [24] 2769 	mov	r5,(_desired_original + 1)
      00069F EC               [12] 2770 	mov	a,r4
      0006A0 C3               [12] 2771 	clr	c
      0006A1 9E               [12] 2772 	subb	a,r6
      0006A2 F5*19            [12] 2773 	mov	_desired,a
      0006A4 ED               [12] 2774 	mov	a,r5
      0006A5 9F               [12] 2775 	subb	a,r7
      0006A6 F5*1A            [12] 2776 	mov	(_desired + 1),a
      0006A8 80 3D            [24] 2777 	sjmp	00114$
      0006AA                       2778 00110$:
                           0006AA  2779 	C$lab6.c$140$2$133 ==.
                                   2780 ;	C:\SiLabs\LITEC\Lab6\lab6.c:140: if(rangervalue>95)//if value is greater than 95cm
      0006AA C3               [12] 2781 	clr	c
      0006AB 74 5F            [12] 2782 	mov	a,#0x5f
      0006AD 95*23            [12] 2783 	subb	a,_rangervalue
      0006AF E4               [12] 2784 	clr	a
      0006B0 95*24            [12] 2785 	subb	a,(_rangervalue + 1)
      0006B2 50 0E            [24] 2786 	jnc	00107$
                           0006B4  2787 	C$lab6.c$141$2$133 ==.
                                   2788 ;	C:\SiLabs\LITEC\Lab6\lab6.c:141: desired = desired_original+1800;//increase desired heading by 180 degrees
      0006B4 74 08            [12] 2789 	mov	a,#0x08
      0006B6 25*1B            [12] 2790 	add	a,_desired_original
      0006B8 F5*19            [12] 2791 	mov	_desired,a
      0006BA 74 07            [12] 2792 	mov	a,#0x07
      0006BC 35*1C            [12] 2793 	addc	a,(_desired_original + 1)
      0006BE F5*1A            [12] 2794 	mov	(_desired + 1),a
      0006C0 80 25            [24] 2795 	sjmp	00114$
      0006C2                       2796 00107$:
                           0006C2  2797 	C$lab6.c$143$1$130 ==.
                                   2798 ;	C:\SiLabs\LITEC\Lab6\lab6.c:143: desired = desired_original+(45*rangervalue-2475);
      0006C2 85*23*00         [24] 2799 	mov	__mulint_PARM_2,_rangervalue
      0006C5 85*24*01         [24] 2800 	mov	(__mulint_PARM_2 + 1),(_rangervalue + 1)
      0006C8 90 00 2D         [24] 2801 	mov	dptr,#0x002d
      0006CB 12r00r00         [24] 2802 	lcall	__mulint
      0006CE E5 82            [12] 2803 	mov	a,dpl
      0006D0 85 83 F0         [24] 2804 	mov	b,dph
      0006D3 24 55            [12] 2805 	add	a,#0x55
      0006D5 FE               [12] 2806 	mov	r6,a
      0006D6 E5 F0            [12] 2807 	mov	a,b
      0006D8 34 F6            [12] 2808 	addc	a,#0xf6
      0006DA FF               [12] 2809 	mov	r7,a
      0006DB AC*1B            [24] 2810 	mov	r4,_desired_original
      0006DD AD*1C            [24] 2811 	mov	r5,(_desired_original + 1)
      0006DF EE               [12] 2812 	mov	a,r6
      0006E0 2C               [12] 2813 	add	a,r4
      0006E1 F5*19            [12] 2814 	mov	_desired,a
      0006E3 EF               [12] 2815 	mov	a,r7
      0006E4 3D               [12] 2816 	addc	a,r5
      0006E5 F5*1A            [12] 2817 	mov	(_desired + 1),a
      0006E7                       2818 00114$:
                           0006E7  2819 	C$lab6.c$146$1$130 ==.
                                   2820 ;	C:\SiLabs\LITEC\Lab6\lab6.c:146: if(desired<0)//adjust desired heading to be withing 0 and 360 degrees
      0006E7 E5*1A            [12] 2821 	mov	a,(_desired + 1)
      0006E9 30 E7 0E         [24] 2822 	jnb	acc.7,00119$
                           0006EC  2823 	C$lab6.c$147$1$130 ==.
                                   2824 ;	C:\SiLabs\LITEC\Lab6\lab6.c:147: desired=3600+desired;
      0006EC 74 10            [12] 2825 	mov	a,#0x10
      0006EE 25*19            [12] 2826 	add	a,_desired
      0006F0 F5*19            [12] 2827 	mov	_desired,a
      0006F2 74 0E            [12] 2828 	mov	a,#0x0e
      0006F4 35*1A            [12] 2829 	addc	a,(_desired + 1)
      0006F6 F5*1A            [12] 2830 	mov	(_desired + 1),a
      0006F8 80 1D            [24] 2831 	sjmp	00121$
      0006FA                       2832 00119$:
                           0006FA  2833 	C$lab6.c$148$1$130 ==.
                                   2834 ;	C:\SiLabs\LITEC\Lab6\lab6.c:148: else if(desired>3600)
      0006FA C3               [12] 2835 	clr	c
      0006FB 74 10            [12] 2836 	mov	a,#0x10
      0006FD 95*19            [12] 2837 	subb	a,_desired
      0006FF 74 8E            [12] 2838 	mov	a,#(0x0e ^ 0x80)
      000701 85*1A F0         [24] 2839 	mov	b,(_desired + 1)
      000704 63 F0 80         [24] 2840 	xrl	b,#0x80
      000707 95 F0            [12] 2841 	subb	a,b
      000709 50 0C            [24] 2842 	jnc	00121$
                           00070B  2843 	C$lab6.c$149$1$130 ==.
                                   2844 ;	C:\SiLabs\LITEC\Lab6\lab6.c:149: desired-=3600;
      00070B E5*19            [12] 2845 	mov	a,_desired
      00070D 24 F0            [12] 2846 	add	a,#0xf0
      00070F F5*19            [12] 2847 	mov	_desired,a
      000711 E5*1A            [12] 2848 	mov	a,(_desired + 1)
      000713 34 F1            [12] 2849 	addc	a,#0xf1
      000715 F5*1A            [12] 2850 	mov	(_desired + 1),a
      000717                       2851 00121$:
                           000717  2852 	C$lab6.c$150$1$130 ==.
                           000717  2853 	XG$Ranger$0$0 ==.
      000717 22               [24] 2854 	ret
                                   2855 ;------------------------------------------------------------
                                   2856 ;Allocation info for local variables in function 'ReadRanger'
                                   2857 ;------------------------------------------------------------
                                   2858 ;range                     Allocated to registers 
                                   2859 ;addr                      Allocated to registers 
                                   2860 ;------------------------------------------------------------
                           000718  2861 	G$ReadRanger$0$0 ==.
                           000718  2862 	C$lab6.c$152$1$130 ==.
                                   2863 ;	C:\SiLabs\LITEC\Lab6\lab6.c:152: unsigned int ReadRanger(void) {//read data from the ranger
                                   2864 ;	-----------------------------------------
                                   2865 ;	 function ReadRanger
                                   2866 ;	-----------------------------------------
      000718                       2867 _ReadRanger:
                           000718  2868 	C$lab6.c$155$1$135 ==.
                                   2869 ;	C:\SiLabs\LITEC\Lab6\lab6.c:155: i2c_read_data(addr,2, Data, 2);    // read two bytes, starting at reg 2 
      000718 75*10r1F         [24] 2870 	mov	_i2c_read_data_PARM_3,#_Data
      00071B 75*11 00         [24] 2871 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00071E 75*12 40         [24] 2872 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000721 75*0F 02         [24] 2873 	mov	_i2c_read_data_PARM_2,#0x02
      000724 75*13 02         [24] 2874 	mov	_i2c_read_data_PARM_4,#0x02
      000727 75 82 E0         [24] 2875 	mov	dpl,#0xe0
      00072A 12r04r02         [24] 2876 	lcall	_i2c_read_data
                           00072D  2877 	C$lab6.c$156$1$135 ==.
                                   2878 ;	C:\SiLabs\LITEC\Lab6\lab6.c:156: range = (((unsigned int)Data[0] << 8) | Data[1]);    //value read from i2c 
      00072D AF*1F            [24] 2879 	mov	r7,_Data
      00072F 7E 00            [12] 2880 	mov	r6,#0x00
      000731 AC*20            [24] 2881 	mov	r4,(_Data + 0x0001)
      000733 7D 00            [12] 2882 	mov	r5,#0x00
      000735 EC               [12] 2883 	mov	a,r4
      000736 4E               [12] 2884 	orl	a,r6
      000737 F5 82            [12] 2885 	mov	dpl,a
      000739 ED               [12] 2886 	mov	a,r5
      00073A 4F               [12] 2887 	orl	a,r7
      00073B F5 83            [12] 2888 	mov	dph,a
                           00073D  2889 	C$lab6.c$157$1$135 ==.
                                   2890 ;	C:\SiLabs\LITEC\Lab6\lab6.c:157: return range;
                           00073D  2891 	C$lab6.c$158$1$135 ==.
                           00073D  2892 	XG$ReadRanger$0$0 ==.
      00073D 22               [24] 2893 	ret
                                   2894 ;------------------------------------------------------------
                                   2895 ;Allocation info for local variables in function 'Read_Compass'
                                   2896 ;------------------------------------------------------------
                           00073E  2897 	G$Read_Compass$0$0 ==.
                           00073E  2898 	C$lab6.c$161$1$135 ==.
                                   2899 ;	C:\SiLabs\LITEC\Lab6\lab6.c:161: void Read_Compass(void) {//read data from the compass
                                   2900 ;	-----------------------------------------
                                   2901 ;	 function Read_Compass
                                   2902 ;	-----------------------------------------
      00073E                       2903 _Read_Compass:
                           00073E  2904 	C$lab6.c$162$1$137 ==.
                                   2905 ;	C:\SiLabs\LITEC\Lab6\lab6.c:162: i2c_read_data(0xC0, 2, Data, 2);//read two bytes starting at reg. 2
      00073E 75*10r1F         [24] 2906 	mov	_i2c_read_data_PARM_3,#_Data
      000741 75*11 00         [24] 2907 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000744 75*12 40         [24] 2908 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000747 75*0F 02         [24] 2909 	mov	_i2c_read_data_PARM_2,#0x02
      00074A 75*13 02         [24] 2910 	mov	_i2c_read_data_PARM_4,#0x02
      00074D 75 82 C0         [24] 2911 	mov	dpl,#0xc0
      000750 12r04r02         [24] 2912 	lcall	_i2c_read_data
                           000753  2913 	C$lab6.c$163$1$137 ==.
                                   2914 ;	C:\SiLabs\LITEC\Lab6\lab6.c:163: heading = (((unsigned int)Data[0]<<8) | Data[1]);//combine data
      000753 AF*1F            [24] 2915 	mov	r7,_Data
      000755 7E 00            [12] 2916 	mov	r6,#0x00
      000757 AC*20            [24] 2917 	mov	r4,(_Data + 0x0001)
      000759 7D 00            [12] 2918 	mov	r5,#0x00
      00075B EC               [12] 2919 	mov	a,r4
      00075C 4E               [12] 2920 	orl	a,r6
      00075D F5*17            [12] 2921 	mov	_heading,a
      00075F ED               [12] 2922 	mov	a,r5
      000760 4F               [12] 2923 	orl	a,r7
      000761 F5*18            [12] 2924 	mov	(_heading + 1),a
                           000763  2925 	C$lab6.c$164$1$137 ==.
                           000763  2926 	XG$Read_Compass$0$0 ==.
      000763 22               [24] 2927 	ret
                                   2928 ;------------------------------------------------------------
                                   2929 ;Allocation info for local variables in function 'Steering_Servo'
                                   2930 ;------------------------------------------------------------
                           000764  2931 	G$Steering_Servo$0$0 ==.
                           000764  2932 	C$lab6.c$166$1$137 ==.
                                   2933 ;	C:\SiLabs\LITEC\Lab6\lab6.c:166: void Steering_Servo(void) {//control rotors from compass data
                                   2934 ;	-----------------------------------------
                                   2935 ;	 function Steering_Servo
                                   2936 ;	-----------------------------------------
      000764                       2937 _Steering_Servo:
                           000764  2938 	C$lab6.c$167$1$139 ==.
                                   2939 ;	C:\SiLabs\LITEC\Lab6\lab6.c:167: if(ccount>=2) {//every 40ms
      000764 74 FE            [12] 2940 	mov	a,#0x100 - 0x02
      000766 25*14            [12] 2941 	add	a,_ccount
      000768 50 08            [24] 2942 	jnc	00102$
                           00076A  2943 	C$lab6.c$168$2$140 ==.
                                   2944 ;	C:\SiLabs\LITEC\Lab6\lab6.c:168: print_count++;//increment print counter
      00076A 05*1D            [12] 2945 	inc	_print_count
                           00076C  2946 	C$lab6.c$169$2$140 ==.
                                   2947 ;	C:\SiLabs\LITEC\Lab6\lab6.c:169: Read_Compass();//get compass data
      00076C 12r07r3E         [24] 2948 	lcall	_Read_Compass
                           00076F  2949 	C$lab6.c$170$2$140 ==.
                                   2950 ;	C:\SiLabs\LITEC\Lab6\lab6.c:170: ccount=0;//reset compass counter
      00076F 75*14 00         [24] 2951 	mov	_ccount,#0x00
      000772                       2952 00102$:
                           000772  2953 	C$lab6.c$173$1$139 ==.
                                   2954 ;	C:\SiLabs\LITEC\Lab6\lab6.c:173: error=desired-heading;//calculate error
      000772 E5*19            [12] 2955 	mov	a,_desired
      000774 C3               [12] 2956 	clr	c
      000775 95*17            [12] 2957 	subb	a,_heading
      000777 F5*2D            [12] 2958 	mov	_error,a
      000779 E5*1A            [12] 2959 	mov	a,(_desired + 1)
      00077B 95*18            [12] 2960 	subb	a,(_heading + 1)
      00077D F5*2E            [12] 2961 	mov	(_error + 1),a
                           00077F  2962 	C$lab6.c$174$1$139 ==.
                                   2963 ;	C:\SiLabs\LITEC\Lab6\lab6.c:174: if(error>1800)//adjust error if out of bounds
      00077F C3               [12] 2964 	clr	c
      000780 74 08            [12] 2965 	mov	a,#0x08
      000782 95*2D            [12] 2966 	subb	a,_error
      000784 74 87            [12] 2967 	mov	a,#(0x07 ^ 0x80)
      000786 85*2E F0         [24] 2968 	mov	b,(_error + 1)
      000789 63 F0 80         [24] 2969 	xrl	b,#0x80
      00078C 95 F0            [12] 2970 	subb	a,b
      00078E 50 0E            [24] 2971 	jnc	00106$
                           000790  2972 	C$lab6.c$175$1$139 ==.
                                   2973 ;	C:\SiLabs\LITEC\Lab6\lab6.c:175: error-=3600;
      000790 E5*2D            [12] 2974 	mov	a,_error
      000792 24 F0            [12] 2975 	add	a,#0xf0
      000794 F5*2D            [12] 2976 	mov	_error,a
      000796 E5*2E            [12] 2977 	mov	a,(_error + 1)
      000798 34 F1            [12] 2978 	addc	a,#0xf1
      00079A F5*2E            [12] 2979 	mov	(_error + 1),a
      00079C 80 19            [24] 2980 	sjmp	00107$
      00079E                       2981 00106$:
                           00079E  2982 	C$lab6.c$176$1$139 ==.
                                   2983 ;	C:\SiLabs\LITEC\Lab6\lab6.c:176: else if(error<-1800)
      00079E C3               [12] 2984 	clr	c
      00079F E5*2D            [12] 2985 	mov	a,_error
      0007A1 94 F8            [12] 2986 	subb	a,#0xf8
      0007A3 E5*2E            [12] 2987 	mov	a,(_error + 1)
      0007A5 64 80            [12] 2988 	xrl	a,#0x80
      0007A7 94 78            [12] 2989 	subb	a,#0x78
      0007A9 50 0C            [24] 2990 	jnc	00107$
                           0007AB  2991 	C$lab6.c$177$1$139 ==.
                                   2992 ;	C:\SiLabs\LITEC\Lab6\lab6.c:177: error+=3600;
      0007AB 74 10            [12] 2993 	mov	a,#0x10
      0007AD 25*2D            [12] 2994 	add	a,_error
      0007AF F5*2D            [12] 2995 	mov	_error,a
      0007B1 74 0E            [12] 2996 	mov	a,#0x0e
      0007B3 35*2E            [12] 2997 	addc	a,(_error + 1)
      0007B5 F5*2E            [12] 2998 	mov	(_error + 1),a
      0007B7                       2999 00107$:
                           0007B7  3000 	C$lab6.c$180$1$139 ==.
                                   3001 ;	C:\SiLabs\LITEC\Lab6\lab6.c:180: left_PW=(long)PW_neut - (kp*(long)error + kd*(long)(error-prev_error));
      0007B7 AC*2D            [24] 3002 	mov	r4,_error
      0007B9 E5*2E            [12] 3003 	mov	a,(_error + 1)
      0007BB FD               [12] 3004 	mov	r5,a
      0007BC 33               [12] 3005 	rlc	a
      0007BD 95 E0            [12] 3006 	subb	a,acc
      0007BF FE               [12] 3007 	mov	r6,a
      0007C0 8C 82            [24] 3008 	mov	dpl,r4
      0007C2 8D 83            [24] 3009 	mov	dph,r5
      0007C4 8E F0            [24] 3010 	mov	b,r6
      0007C6 12r00r00         [24] 3011 	lcall	___slong2fs
      0007C9 AC 82            [24] 3012 	mov	r4,dpl
      0007CB AD 83            [24] 3013 	mov	r5,dph
      0007CD AE F0            [24] 3014 	mov	r6,b
      0007CF FF               [12] 3015 	mov	r7,a
      0007D0 C0 04            [24] 3016 	push	ar4
      0007D2 C0 05            [24] 3017 	push	ar5
      0007D4 C0 06            [24] 3018 	push	ar6
      0007D6 C0 07            [24] 3019 	push	ar7
      0007D8 85*31 82         [24] 3020 	mov	dpl,_kp
      0007DB 85*32 83         [24] 3021 	mov	dph,(_kp + 1)
      0007DE 85*33 F0         [24] 3022 	mov	b,(_kp + 2)
      0007E1 E5*34            [12] 3023 	mov	a,(_kp + 3)
      0007E3 12r00r00         [24] 3024 	lcall	___fsmul
      0007E6 AC 82            [24] 3025 	mov	r4,dpl
      0007E8 AD 83            [24] 3026 	mov	r5,dph
      0007EA AE F0            [24] 3027 	mov	r6,b
      0007EC FF               [12] 3028 	mov	r7,a
      0007ED E5 81            [12] 3029 	mov	a,sp
      0007EF 24 FC            [12] 3030 	add	a,#0xfc
      0007F1 F5 81            [12] 3031 	mov	sp,a
      0007F3 E5*2D            [12] 3032 	mov	a,_error
      0007F5 C3               [12] 3033 	clr	c
      0007F6 95*2F            [12] 3034 	subb	a,_prev_error
      0007F8 FA               [12] 3035 	mov	r2,a
      0007F9 E5*2E            [12] 3036 	mov	a,(_error + 1)
      0007FB 95*30            [12] 3037 	subb	a,(_prev_error + 1)
      0007FD 8A*00            [24] 3038 	mov	__mullong_PARM_2,r2
      0007FF F5*01            [12] 3039 	mov	(__mullong_PARM_2 + 1),a
      000801 33               [12] 3040 	rlc	a
      000802 95 E0            [12] 3041 	subb	a,acc
      000804 F5*02            [12] 3042 	mov	(__mullong_PARM_2 + 2),a
      000806 F5*03            [12] 3043 	mov	(__mullong_PARM_2 + 3),a
      000808 A8*35            [24] 3044 	mov	r0,_kd
      00080A A9*36            [24] 3045 	mov	r1,(_kd + 1)
      00080C 7A 00            [12] 3046 	mov	r2,#0x00
      00080E 7B 00            [12] 3047 	mov	r3,#0x00
      000810 88 82            [24] 3048 	mov	dpl,r0
      000812 89 83            [24] 3049 	mov	dph,r1
      000814 8A F0            [24] 3050 	mov	b,r2
      000816 EB               [12] 3051 	mov	a,r3
      000817 C0 07            [24] 3052 	push	ar7
      000819 C0 06            [24] 3053 	push	ar6
      00081B C0 05            [24] 3054 	push	ar5
      00081D C0 04            [24] 3055 	push	ar4
      00081F 12r00r00         [24] 3056 	lcall	__mullong
      000822 12r00r00         [24] 3057 	lcall	___slong2fs
      000825 A8 82            [24] 3058 	mov	r0,dpl
      000827 A9 83            [24] 3059 	mov	r1,dph
      000829 AA F0            [24] 3060 	mov	r2,b
      00082B FB               [12] 3061 	mov	r3,a
      00082C D0 04            [24] 3062 	pop	ar4
      00082E D0 05            [24] 3063 	pop	ar5
      000830 D0 06            [24] 3064 	pop	ar6
      000832 D0 07            [24] 3065 	pop	ar7
      000834 C0 00            [24] 3066 	push	ar0
      000836 C0 01            [24] 3067 	push	ar1
      000838 C0 02            [24] 3068 	push	ar2
      00083A C0 03            [24] 3069 	push	ar3
      00083C 8C 82            [24] 3070 	mov	dpl,r4
      00083E 8D 83            [24] 3071 	mov	dph,r5
      000840 8E F0            [24] 3072 	mov	b,r6
      000842 EF               [12] 3073 	mov	a,r7
      000843 12r00r00         [24] 3074 	lcall	___fsadd
      000846 AC 82            [24] 3075 	mov	r4,dpl
      000848 AD 83            [24] 3076 	mov	r5,dph
      00084A AE F0            [24] 3077 	mov	r6,b
      00084C FF               [12] 3078 	mov	r7,a
      00084D E5 81            [12] 3079 	mov	a,sp
      00084F 24 FC            [12] 3080 	add	a,#0xfc
      000851 F5 81            [12] 3081 	mov	sp,a
      000853 C0 07            [24] 3082 	push	ar7
      000855 C0 06            [24] 3083 	push	ar6
      000857 C0 05            [24] 3084 	push	ar5
      000859 C0 04            [24] 3085 	push	ar4
      00085B C0 04            [24] 3086 	push	ar4
      00085D C0 05            [24] 3087 	push	ar5
      00085F C0 06            [24] 3088 	push	ar6
      000861 C0 07            [24] 3089 	push	ar7
      000863 90 D0 00         [24] 3090 	mov	dptr,#0xd000
      000866 75 F0 2C         [24] 3091 	mov	b,#0x2c
      000869 74 45            [12] 3092 	mov	a,#0x45
      00086B 12r00r00         [24] 3093 	lcall	___fssub
      00086E A8 82            [24] 3094 	mov	r0,dpl
      000870 A9 83            [24] 3095 	mov	r1,dph
      000872 AA F0            [24] 3096 	mov	r2,b
      000874 FB               [12] 3097 	mov	r3,a
      000875 E5 81            [12] 3098 	mov	a,sp
      000877 24 FC            [12] 3099 	add	a,#0xfc
      000879 F5 81            [12] 3100 	mov	sp,a
      00087B 88 82            [24] 3101 	mov	dpl,r0
      00087D 89 83            [24] 3102 	mov	dph,r1
      00087F 8A F0            [24] 3103 	mov	b,r2
      000881 EB               [12] 3104 	mov	a,r3
      000882 12r00r00         [24] 3105 	lcall	___fs2slong
      000885 85 82*25         [24] 3106 	mov	_left_PW,dpl
      000888 85 83*26         [24] 3107 	mov	(_left_PW + 1),dph
      00088B 85 F0*27         [24] 3108 	mov	(_left_PW + 2),b
      00088E F5*28            [12] 3109 	mov	(_left_PW + 3),a
      000890 D0 04            [24] 3110 	pop	ar4
      000892 D0 05            [24] 3111 	pop	ar5
      000894 D0 06            [24] 3112 	pop	ar6
      000896 D0 07            [24] 3113 	pop	ar7
                           000898  3114 	C$lab6.c$181$1$139 ==.
                                   3115 ;	C:\SiLabs\LITEC\Lab6\lab6.c:181: right_PW=(long)PW_neut + (kp*(long)error + kd*(long)(error-prev_error));
      000898 E4               [12] 3116 	clr	a
      000899 C0 E0            [24] 3117 	push	acc
      00089B 74 D0            [12] 3118 	mov	a,#0xd0
      00089D C0 E0            [24] 3119 	push	acc
      00089F 74 2C            [12] 3120 	mov	a,#0x2c
      0008A1 C0 E0            [24] 3121 	push	acc
      0008A3 74 45            [12] 3122 	mov	a,#0x45
      0008A5 C0 E0            [24] 3123 	push	acc
      0008A7 8C 82            [24] 3124 	mov	dpl,r4
      0008A9 8D 83            [24] 3125 	mov	dph,r5
      0008AB 8E F0            [24] 3126 	mov	b,r6
      0008AD EF               [12] 3127 	mov	a,r7
      0008AE 12r00r00         [24] 3128 	lcall	___fsadd
      0008B1 AC 82            [24] 3129 	mov	r4,dpl
      0008B3 AD 83            [24] 3130 	mov	r5,dph
      0008B5 AE F0            [24] 3131 	mov	r6,b
      0008B7 FF               [12] 3132 	mov	r7,a
      0008B8 E5 81            [12] 3133 	mov	a,sp
      0008BA 24 FC            [12] 3134 	add	a,#0xfc
      0008BC F5 81            [12] 3135 	mov	sp,a
      0008BE 8C 82            [24] 3136 	mov	dpl,r4
      0008C0 8D 83            [24] 3137 	mov	dph,r5
      0008C2 8E F0            [24] 3138 	mov	b,r6
      0008C4 EF               [12] 3139 	mov	a,r7
      0008C5 12r00r00         [24] 3140 	lcall	___fs2slong
      0008C8 85 82*29         [24] 3141 	mov	_right_PW,dpl
      0008CB 85 83*2A         [24] 3142 	mov	(_right_PW + 1),dph
      0008CE 85 F0*2B         [24] 3143 	mov	(_right_PW + 2),b
      0008D1 F5*2C            [12] 3144 	mov	(_right_PW + 3),a
                           0008D3  3145 	C$lab6.c$186$1$139 ==.
                                   3146 ;	C:\SiLabs\LITEC\Lab6\lab6.c:186: if(left_PW>PW_max) 
      0008D3 C3               [12] 3147 	clr	c
      0008D4 74 AE            [12] 3148 	mov	a,#0xae
      0008D6 95*25            [12] 3149 	subb	a,_left_PW
      0008D8 74 0D            [12] 3150 	mov	a,#0x0d
      0008DA 95*26            [12] 3151 	subb	a,(_left_PW + 1)
      0008DC E4               [12] 3152 	clr	a
      0008DD 95*27            [12] 3153 	subb	a,(_left_PW + 2)
      0008DF 74 80            [12] 3154 	mov	a,#(0x00 ^ 0x80)
      0008E1 85*28 F0         [24] 3155 	mov	b,(_left_PW + 3)
      0008E4 63 F0 80         [24] 3156 	xrl	b,#0x80
      0008E7 95 F0            [12] 3157 	subb	a,b
      0008E9 50 0D            [24] 3158 	jnc	00111$
                           0008EB  3159 	C$lab6.c$187$1$139 ==.
                                   3160 ;	C:\SiLabs\LITEC\Lab6\lab6.c:187: left_PW=PW_max;
      0008EB 75*25 AE         [24] 3161 	mov	_left_PW,#0xae
      0008EE 75*26 0D         [24] 3162 	mov	(_left_PW + 1),#0x0d
      0008F1 E4               [12] 3163 	clr	a
      0008F2 F5*27            [12] 3164 	mov	(_left_PW + 2),a
      0008F4 F5*28            [12] 3165 	mov	(_left_PW + 3),a
      0008F6 80 20            [24] 3166 	sjmp	00112$
      0008F8                       3167 00111$:
                           0008F8  3168 	C$lab6.c$188$1$139 ==.
                                   3169 ;	C:\SiLabs\LITEC\Lab6\lab6.c:188: else if(left_PW<PW_min)
      0008F8 C3               [12] 3170 	clr	c
      0008F9 E5*25            [12] 3171 	mov	a,_left_PW
      0008FB 94 EC            [12] 3172 	subb	a,#0xec
      0008FD E5*26            [12] 3173 	mov	a,(_left_PW + 1)
      0008FF 94 07            [12] 3174 	subb	a,#0x07
      000901 E5*27            [12] 3175 	mov	a,(_left_PW + 2)
      000903 94 00            [12] 3176 	subb	a,#0x00
      000905 E5*28            [12] 3177 	mov	a,(_left_PW + 3)
      000907 64 80            [12] 3178 	xrl	a,#0x80
      000909 94 80            [12] 3179 	subb	a,#0x80
      00090B 50 0B            [24] 3180 	jnc	00112$
                           00090D  3181 	C$lab6.c$189$1$139 ==.
                                   3182 ;	C:\SiLabs\LITEC\Lab6\lab6.c:189: left_PW=PW_min;
      00090D 75*25 EC         [24] 3183 	mov	_left_PW,#0xec
      000910 75*26 07         [24] 3184 	mov	(_left_PW + 1),#0x07
      000913 E4               [12] 3185 	clr	a
      000914 F5*27            [12] 3186 	mov	(_left_PW + 2),a
      000916 F5*28            [12] 3187 	mov	(_left_PW + 3),a
      000918                       3188 00112$:
                           000918  3189 	C$lab6.c$191$1$139 ==.
                                   3190 ;	C:\SiLabs\LITEC\Lab6\lab6.c:191: if(right_PW>PW_max) 
      000918 C3               [12] 3191 	clr	c
      000919 74 AE            [12] 3192 	mov	a,#0xae
      00091B 95*29            [12] 3193 	subb	a,_right_PW
      00091D 74 0D            [12] 3194 	mov	a,#0x0d
      00091F 95*2A            [12] 3195 	subb	a,(_right_PW + 1)
      000921 E4               [12] 3196 	clr	a
      000922 95*2B            [12] 3197 	subb	a,(_right_PW + 2)
      000924 74 80            [12] 3198 	mov	a,#(0x00 ^ 0x80)
      000926 85*2C F0         [24] 3199 	mov	b,(_right_PW + 3)
      000929 63 F0 80         [24] 3200 	xrl	b,#0x80
      00092C 95 F0            [12] 3201 	subb	a,b
      00092E 50 0D            [24] 3202 	jnc	00116$
                           000930  3203 	C$lab6.c$192$1$139 ==.
                                   3204 ;	C:\SiLabs\LITEC\Lab6\lab6.c:192: right_PW=PW_max;
      000930 75*29 AE         [24] 3205 	mov	_right_PW,#0xae
      000933 75*2A 0D         [24] 3206 	mov	(_right_PW + 1),#0x0d
      000936 E4               [12] 3207 	clr	a
      000937 F5*2B            [12] 3208 	mov	(_right_PW + 2),a
      000939 F5*2C            [12] 3209 	mov	(_right_PW + 3),a
      00093B 80 20            [24] 3210 	sjmp	00117$
      00093D                       3211 00116$:
                           00093D  3212 	C$lab6.c$193$1$139 ==.
                                   3213 ;	C:\SiLabs\LITEC\Lab6\lab6.c:193: else if(right_PW<PW_min)
      00093D C3               [12] 3214 	clr	c
      00093E E5*29            [12] 3215 	mov	a,_right_PW
      000940 94 EC            [12] 3216 	subb	a,#0xec
      000942 E5*2A            [12] 3217 	mov	a,(_right_PW + 1)
      000944 94 07            [12] 3218 	subb	a,#0x07
      000946 E5*2B            [12] 3219 	mov	a,(_right_PW + 2)
      000948 94 00            [12] 3220 	subb	a,#0x00
      00094A E5*2C            [12] 3221 	mov	a,(_right_PW + 3)
      00094C 64 80            [12] 3222 	xrl	a,#0x80
      00094E 94 80            [12] 3223 	subb	a,#0x80
      000950 50 0B            [24] 3224 	jnc	00117$
                           000952  3225 	C$lab6.c$194$1$139 ==.
                                   3226 ;	C:\SiLabs\LITEC\Lab6\lab6.c:194: right_PW=PW_min;
      000952 75*29 EC         [24] 3227 	mov	_right_PW,#0xec
      000955 75*2A 07         [24] 3228 	mov	(_right_PW + 1),#0x07
      000958 E4               [12] 3229 	clr	a
      000959 F5*2B            [12] 3230 	mov	(_right_PW + 2),a
      00095B F5*2C            [12] 3231 	mov	(_right_PW + 3),a
      00095D                       3232 00117$:
                           00095D  3233 	C$lab6.c$196$1$139 ==.
                                   3234 ;	C:\SiLabs\LITEC\Lab6\lab6.c:196: if(print_count>=25) {//every 1 second
      00095D 74 E7            [12] 3235 	mov	a,#0x100 - 0x19
      00095F 25*1D            [12] 3236 	add	a,_print_count
      000961 40 03            [24] 3237 	jc	00153$
      000963 02r09rFD         [24] 3238 	ljmp	00119$
      000966                       3239 00153$:
                           000966  3240 	C$lab6.c$197$2$141 ==.
                                   3241 ;	C:\SiLabs\LITEC\Lab6\lab6.c:197: ADC_Convert();//get adc value
      000966 12r0Ar4C         [24] 3242 	lcall	_ADC_Convert
                           000969  3243 	C$lab6.c$198$1$139 ==.
                                   3244 ;	C:\SiLabs\LITEC\Lab6\lab6.c:198: battery = 14800*((float)battery/256.0);//convert battery data to mV
      000969 85*21 82         [24] 3245 	mov	dpl,_battery
      00096C 85*22 83         [24] 3246 	mov	dph,(_battery + 1)
      00096F 12r00r00         [24] 3247 	lcall	___uint2fs
      000972 AC 82            [24] 3248 	mov	r4,dpl
      000974 AD 83            [24] 3249 	mov	r5,dph
      000976 AE F0            [24] 3250 	mov	r6,b
      000978 FF               [12] 3251 	mov	r7,a
      000979 E4               [12] 3252 	clr	a
      00097A C0 E0            [24] 3253 	push	acc
      00097C C0 E0            [24] 3254 	push	acc
      00097E 74 80            [12] 3255 	mov	a,#0x80
      000980 C0 E0            [24] 3256 	push	acc
      000982 74 43            [12] 3257 	mov	a,#0x43
      000984 C0 E0            [24] 3258 	push	acc
      000986 8C 82            [24] 3259 	mov	dpl,r4
      000988 8D 83            [24] 3260 	mov	dph,r5
      00098A 8E F0            [24] 3261 	mov	b,r6
      00098C EF               [12] 3262 	mov	a,r7
      00098D 12r00r00         [24] 3263 	lcall	___fsdiv
      000990 AC 82            [24] 3264 	mov	r4,dpl
      000992 AD 83            [24] 3265 	mov	r5,dph
      000994 AE F0            [24] 3266 	mov	r6,b
      000996 FF               [12] 3267 	mov	r7,a
      000997 E5 81            [12] 3268 	mov	a,sp
      000999 24 FC            [12] 3269 	add	a,#0xfc
      00099B F5 81            [12] 3270 	mov	sp,a
      00099D C0 04            [24] 3271 	push	ar4
      00099F C0 05            [24] 3272 	push	ar5
      0009A1 C0 06            [24] 3273 	push	ar6
      0009A3 C0 07            [24] 3274 	push	ar7
      0009A5 90 40 00         [24] 3275 	mov	dptr,#0x4000
      0009A8 75 F0 67         [24] 3276 	mov	b,#0x67
      0009AB 74 46            [12] 3277 	mov	a,#0x46
      0009AD 12r00r00         [24] 3278 	lcall	___fsmul
      0009B0 AC 82            [24] 3279 	mov	r4,dpl
      0009B2 AD 83            [24] 3280 	mov	r5,dph
      0009B4 AE F0            [24] 3281 	mov	r6,b
      0009B6 FF               [12] 3282 	mov	r7,a
      0009B7 E5 81            [12] 3283 	mov	a,sp
      0009B9 24 FC            [12] 3284 	add	a,#0xfc
      0009BB F5 81            [12] 3285 	mov	sp,a
      0009BD 8C 82            [24] 3286 	mov	dpl,r4
      0009BF 8D 83            [24] 3287 	mov	dph,r5
      0009C1 8E F0            [24] 3288 	mov	b,r6
      0009C3 EF               [12] 3289 	mov	a,r7
      0009C4 12r00r00         [24] 3290 	lcall	___fs2uint
      0009C7 85 82*21         [24] 3291 	mov	_battery,dpl
      0009CA 85 83*22         [24] 3292 	mov	(_battery + 1),dph
                           0009CD  3293 	C$lab6.c$200$2$141 ==.
                                   3294 ;	C:\SiLabs\LITEC\Lab6\lab6.c:200: printf("\n\rDes. Head:%u Head.:%u, Ranger:%u, LPW:%ld, Batt.(mV):%u", desired, heading, rangervalue, left_PW, battery);
      0009CD C0*21            [24] 3295 	push	_battery
      0009CF C0*22            [24] 3296 	push	(_battery + 1)
      0009D1 C0*25            [24] 3297 	push	_left_PW
      0009D3 C0*26            [24] 3298 	push	(_left_PW + 1)
      0009D5 C0*27            [24] 3299 	push	(_left_PW + 2)
      0009D7 C0*28            [24] 3300 	push	(_left_PW + 3)
      0009D9 C0*23            [24] 3301 	push	_rangervalue
      0009DB C0*24            [24] 3302 	push	(_rangervalue + 1)
      0009DD C0*17            [24] 3303 	push	_heading
      0009DF C0*18            [24] 3304 	push	(_heading + 1)
      0009E1 C0*19            [24] 3305 	push	_desired
      0009E3 C0*1A            [24] 3306 	push	(_desired + 1)
      0009E5 74rD1            [12] 3307 	mov	a,#___str_6
      0009E7 C0 E0            [24] 3308 	push	acc
      0009E9 74s00            [12] 3309 	mov	a,#(___str_6 >> 8)
      0009EB C0 E0            [24] 3310 	push	acc
      0009ED 74 80            [12] 3311 	mov	a,#0x80
      0009EF C0 E0            [24] 3312 	push	acc
      0009F1 12r00r00         [24] 3313 	lcall	_printf
      0009F4 E5 81            [12] 3314 	mov	a,sp
      0009F6 24 F1            [12] 3315 	add	a,#0xf1
      0009F8 F5 81            [12] 3316 	mov	sp,a
                           0009FA  3317 	C$lab6.c$202$2$141 ==.
                                   3318 ;	C:\SiLabs\LITEC\Lab6\lab6.c:202: print_count=0;//reset print counter
      0009FA 75*1D 00         [24] 3319 	mov	_print_count,#0x00
      0009FD                       3320 00119$:
                           0009FD  3321 	C$lab6.c$206$1$139 ==.
                                   3322 ;	C:\SiLabs\LITEC\Lab6\lab6.c:206: PCA0CP2 = 0xFFFF-left_PW;//set motors
      0009FD 74 FF            [12] 3323 	mov	a,#0xff
      0009FF C3               [12] 3324 	clr	c
      000A00 95*25            [12] 3325 	subb	a,_left_PW
      000A02 FC               [12] 3326 	mov	r4,a
      000A03 74 FF            [12] 3327 	mov	a,#0xff
      000A05 95*26            [12] 3328 	subb	a,(_left_PW + 1)
      000A07 FD               [12] 3329 	mov	r5,a
      000A08 E4               [12] 3330 	clr	a
      000A09 95*27            [12] 3331 	subb	a,(_left_PW + 2)
      000A0B E4               [12] 3332 	clr	a
      000A0C 95*28            [12] 3333 	subb	a,(_left_PW + 3)
      000A0E 8C EC            [24] 3334 	mov	((_PCA0CP2 >> 0) & 0xFF),r4
      000A10 8D FC            [24] 3335 	mov	((_PCA0CP2 >> 8) & 0xFF),r5
                           000A12  3336 	C$lab6.c$207$1$139 ==.
                                   3337 ;	C:\SiLabs\LITEC\Lab6\lab6.c:207: PCA0CP3 = 0xFFFF-right_PW;
      000A12 74 FF            [12] 3338 	mov	a,#0xff
      000A14 C3               [12] 3339 	clr	c
      000A15 95*29            [12] 3340 	subb	a,_right_PW
      000A17 FC               [12] 3341 	mov	r4,a
      000A18 74 FF            [12] 3342 	mov	a,#0xff
      000A1A 95*2A            [12] 3343 	subb	a,(_right_PW + 1)
      000A1C FD               [12] 3344 	mov	r5,a
      000A1D E4               [12] 3345 	clr	a
      000A1E 95*2B            [12] 3346 	subb	a,(_right_PW + 2)
      000A20 E4               [12] 3347 	clr	a
      000A21 95*2C            [12] 3348 	subb	a,(_right_PW + 3)
      000A23 8C ED            [24] 3349 	mov	((_PCA0CP3 >> 0) & 0xFF),r4
      000A25 8D FD            [24] 3350 	mov	((_PCA0CP3 >> 8) & 0xFF),r5
                           000A27  3351 	C$lab6.c$209$1$139 ==.
                                   3352 ;	C:\SiLabs\LITEC\Lab6\lab6.c:209: prev_error=error;//store error for next loop
      000A27 85*2D*2F         [24] 3353 	mov	_prev_error,_error
      000A2A 85*2E*30         [24] 3354 	mov	(_prev_error + 1),(_error + 1)
                           000A2D  3355 	C$lab6.c$210$1$139 ==.
                           000A2D  3356 	XG$Steering_Servo$0$0 ==.
      000A2D 22               [24] 3357 	ret
                                   3358 ;------------------------------------------------------------
                                   3359 ;Allocation info for local variables in function 'Port_Init'
                                   3360 ;------------------------------------------------------------
                           000A2E  3361 	G$Port_Init$0$0 ==.
                           000A2E  3362 	C$lab6.c$212$1$139 ==.
                                   3363 ;	C:\SiLabs\LITEC\Lab6\lab6.c:212: void Port_Init()
                                   3364 ;	-----------------------------------------
                                   3365 ;	 function Port_Init
                                   3366 ;	-----------------------------------------
      000A2E                       3367 _Port_Init:
                           000A2E  3368 	C$lab6.c$214$1$142 ==.
                                   3369 ;	C:\SiLabs\LITEC\Lab6\lab6.c:214: P0MDOUT = 0xF0;//set output pin for CEX0,1,2,3 in push-pull mode
      000A2E 75 A4 F0         [24] 3370 	mov	_P0MDOUT,#0xf0
                           000A31  3371 	C$lab6.c$215$1$142 ==.
                                   3372 ;	C:\SiLabs\LITEC\Lab6\lab6.c:215: P1MDOUT &= ~0x08;//set pin for battery in open-drain mode
      000A31 53 A5 F7         [24] 3373 	anl	_P1MDOUT,#0xf7
                           000A34  3374 	C$lab6.c$216$1$142 ==.
                                   3375 ;	C:\SiLabs\LITEC\Lab6\lab6.c:216: P1 |=0x08;//set pin for battery in high-impedance
      000A34 43 90 08         [24] 3376 	orl	_P1,#0x08
                           000A37  3377 	C$lab6.c$217$1$142 ==.
                           000A37  3378 	XG$Port_Init$0$0 ==.
      000A37 22               [24] 3379 	ret
                                   3380 ;------------------------------------------------------------
                                   3381 ;Allocation info for local variables in function 'XBR0_Init'
                                   3382 ;------------------------------------------------------------
                           000A38  3383 	G$XBR0_Init$0$0 ==.
                           000A38  3384 	C$lab6.c$219$1$142 ==.
                                   3385 ;	C:\SiLabs\LITEC\Lab6\lab6.c:219: void XBR0_Init()
                                   3386 ;	-----------------------------------------
                                   3387 ;	 function XBR0_Init
                                   3388 ;	-----------------------------------------
      000A38                       3389 _XBR0_Init:
                           000A38  3390 	C$lab6.c$221$1$143 ==.
                                   3391 ;	C:\SiLabs\LITEC\Lab6\lab6.c:221: XBR0 = 0x25; //configure crossbar with UART, SMBus, and CEX channels 0,1,2,3
      000A38 75 E1 25         [24] 3392 	mov	_XBR0,#0x25
                           000A3B  3393 	C$lab6.c$222$1$143 ==.
                           000A3B  3394 	XG$XBR0_Init$0$0 ==.
      000A3B 22               [24] 3395 	ret
                                   3396 ;------------------------------------------------------------
                                   3397 ;Allocation info for local variables in function 'SMB_Init'
                                   3398 ;------------------------------------------------------------
                           000A3C  3399 	G$SMB_Init$0$0 ==.
                           000A3C  3400 	C$lab6.c$224$1$143 ==.
                                   3401 ;	C:\SiLabs\LITEC\Lab6\lab6.c:224: void SMB_Init(void) {//Set up i2c
                                   3402 ;	-----------------------------------------
                                   3403 ;	 function SMB_Init
                                   3404 ;	-----------------------------------------
      000A3C                       3405 _SMB_Init:
                           000A3C  3406 	C$lab6.c$225$1$145 ==.
                                   3407 ;	C:\SiLabs\LITEC\Lab6\lab6.c:225: SMB0CR = 0x93; //run at 100kHZ
      000A3C 75 CF 93         [24] 3408 	mov	_SMB0CR,#0x93
                           000A3F  3409 	C$lab6.c$226$1$145 ==.
                                   3410 ;	C:\SiLabs\LITEC\Lab6\lab6.c:226: ENSMB = 1; //enable smbus
      000A3F D2 C6            [12] 3411 	setb	_ENSMB
                           000A41  3412 	C$lab6.c$227$1$145 ==.
                           000A41  3413 	XG$SMB_Init$0$0 ==.
      000A41 22               [24] 3414 	ret
                                   3415 ;------------------------------------------------------------
                                   3416 ;Allocation info for local variables in function 'ADC_Init'
                                   3417 ;------------------------------------------------------------
                           000A42  3418 	G$ADC_Init$0$0 ==.
                           000A42  3419 	C$lab6.c$229$1$145 ==.
                                   3420 ;	C:\SiLabs\LITEC\Lab6\lab6.c:229: void ADC_Init(void) {		//initialize ADC
                                   3421 ;	-----------------------------------------
                                   3422 ;	 function ADC_Init
                                   3423 ;	-----------------------------------------
      000A42                       3424 _ADC_Init:
                           000A42  3425 	C$lab6.c$230$1$147 ==.
                                   3426 ;	C:\SiLabs\LITEC\Lab6\lab6.c:230: REF0CN = 0x03; 			//set Vref to use 2.4V
      000A42 75 D1 03         [24] 3427 	mov	_REF0CN,#0x03
                           000A45  3428 	C$lab6.c$231$1$147 ==.
                                   3429 ;	C:\SiLabs\LITEC\Lab6\lab6.c:231: ADC1CF |= 0x01;			//set gain of 1
      000A45 43 AB 01         [24] 3430 	orl	_ADC1CF,#0x01
                           000A48  3431 	C$lab6.c$232$1$147 ==.
                                   3432 ;	C:\SiLabs\LITEC\Lab6\lab6.c:232: ADC1CN = 0x80; 			//enable A/D converter
      000A48 75 AA 80         [24] 3433 	mov	_ADC1CN,#0x80
                           000A4B  3434 	C$lab6.c$234$1$147 ==.
                           000A4B  3435 	XG$ADC_Init$0$0 ==.
      000A4B 22               [24] 3436 	ret
                                   3437 ;------------------------------------------------------------
                                   3438 ;Allocation info for local variables in function 'ADC_Convert'
                                   3439 ;------------------------------------------------------------
                           000A4C  3440 	G$ADC_Convert$0$0 ==.
                           000A4C  3441 	C$lab6.c$236$1$147 ==.
                                   3442 ;	C:\SiLabs\LITEC\Lab6\lab6.c:236: void ADC_Convert(void) {
                                   3443 ;	-----------------------------------------
                                   3444 ;	 function ADC_Convert
                                   3445 ;	-----------------------------------------
      000A4C                       3446 _ADC_Convert:
                           000A4C  3447 	C$lab6.c$237$1$149 ==.
                                   3448 ;	C:\SiLabs\LITEC\Lab6\lab6.c:237: AMX1SL = 3;			//Set ADC to convert value on pin 3
      000A4C 75 AC 03         [24] 3449 	mov	_AMX1SL,#0x03
                           000A4F  3450 	C$lab6.c$238$1$149 ==.
                                   3451 ;	C:\SiLabs\LITEC\Lab6\lab6.c:238: ADC1CN &= ~0x20;//clear flag		
      000A4F 53 AA DF         [24] 3452 	anl	_ADC1CN,#0xdf
                           000A52  3453 	C$lab6.c$239$1$149 ==.
                                   3454 ;	C:\SiLabs\LITEC\Lab6\lab6.c:239: ADC1CN |= 0x10;//start conversion
      000A52 43 AA 10         [24] 3455 	orl	_ADC1CN,#0x10
                           000A55  3456 	C$lab6.c$240$1$149 ==.
                                   3457 ;	C:\SiLabs\LITEC\Lab6\lab6.c:240: while((ADC1CN & 0x20)==0x00);//wait for conversion to finish
      000A55                       3458 00101$:
      000A55 E5 AA            [12] 3459 	mov	a,_ADC1CN
      000A57 30 E5 FB         [24] 3460 	jnb	acc.5,00101$
                           000A5A  3461 	C$lab6.c$241$1$149 ==.
                                   3462 ;	C:\SiLabs\LITEC\Lab6\lab6.c:241: battery = ADC1;//store adc value
      000A5A 85 9C*21         [24] 3463 	mov	_battery,_ADC1
      000A5D 75*22 00         [24] 3464 	mov	(_battery + 1),#0x00
                           000A60  3465 	C$lab6.c$242$1$149 ==.
                           000A60  3466 	XG$ADC_Convert$0$0 ==.
      000A60 22               [24] 3467 	ret
                                   3468 ;------------------------------------------------------------
                                   3469 ;Allocation info for local variables in function 'PCA_Init'
                                   3470 ;------------------------------------------------------------
                           000A61  3471 	G$PCA_Init$0$0 ==.
                           000A61  3472 	C$lab6.c$244$1$149 ==.
                                   3473 ;	C:\SiLabs\LITEC\Lab6\lab6.c:244: void PCA_Init(void)
                                   3474 ;	-----------------------------------------
                                   3475 ;	 function PCA_Init
                                   3476 ;	-----------------------------------------
      000A61                       3477 _PCA_Init:
                           000A61  3478 	C$lab6.c$246$1$151 ==.
                                   3479 ;	C:\SiLabs\LITEC\Lab6\lab6.c:246: PCA0MD = 0x81; //SYSCLK/12, enable CF interrupts, suspend when idle
      000A61 75 D9 81         [24] 3480 	mov	_PCA0MD,#0x81
                           000A64  3481 	C$lab6.c$247$1$151 ==.
                                   3482 ;	C:\SiLabs\LITEC\Lab6\lab6.c:247: PCA0CPM1 = 0xC2; //16 bit, enable compare, enable PWM
      000A64 75 DB C2         [24] 3483 	mov	_PCA0CPM1,#0xc2
                           000A67  3484 	C$lab6.c$248$1$151 ==.
                                   3485 ;	C:\SiLabs\LITEC\Lab6\lab6.c:248: PCA0CPM2 = 0xC2; //set up CEX2 the same as CEX1
      000A67 75 DC C2         [24] 3486 	mov	_PCA0CPM2,#0xc2
                           000A6A  3487 	C$lab6.c$249$1$151 ==.
                                   3488 ;	C:\SiLabs\LITEC\Lab6\lab6.c:249: PCA0CPM3 = 0xC2; //set up CEX3 the same as CEX1
      000A6A 75 DD C2         [24] 3489 	mov	_PCA0CPM3,#0xc2
                           000A6D  3490 	C$lab6.c$250$1$151 ==.
                                   3491 ;	C:\SiLabs\LITEC\Lab6\lab6.c:250: PCA0CN |= 0x40; // enable PCA
      000A6D 43 D8 40         [24] 3492 	orl	_PCA0CN,#0x40
                           000A70  3493 	C$lab6.c$251$1$151 ==.
                           000A70  3494 	XG$PCA_Init$0$0 ==.
      000A70 22               [24] 3495 	ret
                                   3496 ;------------------------------------------------------------
                                   3497 ;Allocation info for local variables in function 'Interrupt_Init'
                                   3498 ;------------------------------------------------------------
                           000A71  3499 	G$Interrupt_Init$0$0 ==.
                           000A71  3500 	C$lab6.c$253$1$151 ==.
                                   3501 ;	C:\SiLabs\LITEC\Lab6\lab6.c:253: void Interrupt_Init(void)
                                   3502 ;	-----------------------------------------
                                   3503 ;	 function Interrupt_Init
                                   3504 ;	-----------------------------------------
      000A71                       3505 _Interrupt_Init:
                           000A71  3506 	C$lab6.c$255$1$153 ==.
                                   3507 ;	C:\SiLabs\LITEC\Lab6\lab6.c:255: EIE1 |= 0x08;//enable PCA interrupts
      000A71 43 E6 08         [24] 3508 	orl	_EIE1,#0x08
                           000A74  3509 	C$lab6.c$257$1$153 ==.
                                   3510 ;	C:\SiLabs\LITEC\Lab6\lab6.c:257: EA=1;//enable all interrupts
      000A74 D2 AF            [12] 3511 	setb	_EA
                           000A76  3512 	C$lab6.c$258$1$153 ==.
                           000A76  3513 	XG$Interrupt_Init$0$0 ==.
      000A76 22               [24] 3514 	ret
                                   3515 ;------------------------------------------------------------
                                   3516 ;Allocation info for local variables in function 'PCA_ISR'
                                   3517 ;------------------------------------------------------------
                           000A77  3518 	G$PCA_ISR$0$0 ==.
                           000A77  3519 	C$lab6.c$260$1$153 ==.
                                   3520 ;	C:\SiLabs\LITEC\Lab6\lab6.c:260: void PCA_ISR ( void ) __interrupt 9
                                   3521 ;	-----------------------------------------
                                   3522 ;	 function PCA_ISR
                                   3523 ;	-----------------------------------------
      000A77                       3524 _PCA_ISR:
                           000A77  3525 	C$lab6.c$262$1$155 ==.
                                   3526 ;	C:\SiLabs\LITEC\Lab6\lab6.c:262: if(CF) {
      000A77 30 DF 10         [24] 3527 	jnb	_CF,00102$
                           000A7A  3528 	C$lab6.c$263$2$156 ==.
                                   3529 ;	C:\SiLabs\LITEC\Lab6\lab6.c:263: PCA0 = PCA_start;//Start count
      000A7A 75 E9 FF         [24] 3530 	mov	((_PCA0 >> 0) & 0xFF),#0xff
      000A7D 75 F9 6F         [24] 3531 	mov	((_PCA0 >> 8) & 0xFF),#0x6f
                           000A80  3532 	C$lab6.c$264$2$156 ==.
                                   3533 ;	C:\SiLabs\LITEC\Lab6\lab6.c:264: CF=0;//clear interrupt flag
      000A80 C2 DF            [12] 3534 	clr	_CF
                           000A82  3535 	C$lab6.c$265$2$156 ==.
                                   3536 ;	C:\SiLabs\LITEC\Lab6\lab6.c:265: ccount++;//increment compass counter
      000A82 05*14            [12] 3537 	inc	_ccount
                           000A84  3538 	C$lab6.c$266$2$156 ==.
                                   3539 ;	C:\SiLabs\LITEC\Lab6\lab6.c:266: rcount++;//increment ranger counter
      000A84 05*15            [12] 3540 	inc	_rcount
                           000A86  3541 	C$lab6.c$267$2$156 ==.
                                   3542 ;	C:\SiLabs\LITEC\Lab6\lab6.c:267: count++;//increment general counter
      000A86 05*16            [12] 3543 	inc	_count
      000A88 80 03            [24] 3544 	sjmp	00104$
      000A8A                       3545 00102$:
                           000A8A  3546 	C$lab6.c$269$1$155 ==.
                                   3547 ;	C:\SiLabs\LITEC\Lab6\lab6.c:269: else PCA0CN &= 0xC0;//all other type 9 interrupts
      000A8A 53 D8 C0         [24] 3548 	anl	_PCA0CN,#0xc0
      000A8D                       3549 00104$:
                           000A8D  3550 	C$lab6.c$270$1$155 ==.
                           000A8D  3551 	XG$PCA_ISR$0$0 ==.
      000A8D 32               [24] 3552 	reti
                                   3553 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   3554 ;	eliminated unneeded push/pop psw
                                   3555 ;	eliminated unneeded push/pop dpl
                                   3556 ;	eliminated unneeded push/pop dph
                                   3557 ;	eliminated unneeded push/pop b
                                   3558 ;	eliminated unneeded push/pop acc
                                   3559 	.area CSEG    (CODE)
                                   3560 	.area CONST   (CODE)
                           000000  3561 Flab6$__str_0$0$0 == .
      000000                       3562 ___str_0:
      000000 0A                    3563 	.db 0x0a
      000001 54 79 70 65 20 64 69  3564 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    3565 	.db 0x00
                           000016  3566 Flab6$__str_1$0$0 == .
      000016                       3567 ___str_1:
      000016 20 20 20 20 20 25 63  3568 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    3569 	.db 0x00
                           000026  3570 Flab6$__str_2$0$0 == .
      000026                       3571 ___str_2:
      000026 25 63                 3572 	.ascii "%c"
      000028 00                    3573 	.db 0x00
                           000029  3574 Flab6$__str_3$0$0 == .
      000029                       3575 ___str_3:
      000029 43 68 6F 6F 73 65 20  3576 	.ascii "Choose a desired heading:"
             61 20 64 65 73 69 72
             65 64 20 68 65 61 64
             69 6E 67 3A
      000042 0A                    3577 	.db 0x0a
      000043 0D                    3578 	.db 0x0d
      000044 31 29 20 30           3579 	.ascii "1) 0"
      000048 0A                    3580 	.db 0x0a
      000049 0D                    3581 	.db 0x0d
      00004A 32 29 20 39 30        3582 	.ascii "2) 90"
      00004F 0A                    3583 	.db 0x0a
      000050 0D                    3584 	.db 0x0d
      000051 33 29 20 31 38 30     3585 	.ascii "3) 180"
      000057 0A                    3586 	.db 0x0a
      000058 0D                    3587 	.db 0x0d
      000059 34 29 20 32 37 30     3588 	.ascii "4) 270"
      00005F 0A                    3589 	.db 0x0a
      000060 0D                    3590 	.db 0x0d
      000061 00                    3591 	.db 0x00
                           000062  3592 Flab6$__str_4$0$0 == .
      000062                       3593 ___str_4:
      000062 0A                    3594 	.db 0x0a
      000063 0D                    3595 	.db 0x0d
      000064 50 72 65 73 73 20 75  3596 	.ascii "Press u and d for up and down until the rotors are vertica"
             20 61 6E 64 20 64 20
             66 6F 72 20 75 70 20
             61 6E 64 20 64 6F 77
             6E 20 75 6E 74 69 6C
             20 74 68 65 20 72 6F
             74 6F 72 73 20 61 72
             65 20 76 65 72 74 69
             63 61
      00009E 6C 2E 20 50 72 65 73  3597 	.ascii "l. Press space when done."
             73 20 73 70 61 63 65
             20 77 68 65 6E 20 64
             6F 6E 65 2E
      0000B7 0A                    3598 	.db 0x0a
      0000B8 0D                    3599 	.db 0x0d
      0000B9 00                    3600 	.db 0x00
                           0000BA  3601 Flab6$__str_5$0$0 == .
      0000BA                       3602 ___str_5:
      0000BA 0A                    3603 	.db 0x0a
      0000BB 0D                    3604 	.db 0x0d
      0000BC 44 65 73 69 72 65 64  3605 	.ascii "Desired Heading:%u"
             20 48 65 61 64 69 6E
             67 3A 25 75
      0000CE 0A                    3606 	.db 0x0a
      0000CF 0D                    3607 	.db 0x0d
      0000D0 00                    3608 	.db 0x00
                           0000D1  3609 Flab6$__str_6$0$0 == .
      0000D1                       3610 ___str_6:
      0000D1 0A                    3611 	.db 0x0a
      0000D2 0D                    3612 	.db 0x0d
      0000D3 44 65 73 2E 20 48 65  3613 	.ascii "Des. Head:%u Head.:%u, Ranger:%u, LPW:%ld, Batt.(mV):%u"
             61 64 3A 25 75 20 48
             65 61 64 2E 3A 25 75
             2C 20 52 61 6E 67 65
             72 3A 25 75 2C 20 4C
             50 57 3A 25 6C 64 2C
             20 42 61 74 74 2E 28
             6D 56 29 3A 25 75
      00010A 00                    3614 	.db 0x00
                                   3615 	.area XINIT   (CODE)
                                   3616 	.area CABS    (ABS,CODE)
