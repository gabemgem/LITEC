compiler directives
#include <c8051_SDCC.h>
#include <stdio.h>
#include <stdlib.h>
#include <i2c.h>

declare global variables
Define PCA_Start, PW_CENTER, PW_RIGHT, PW_LEFT, PW_MIN, PW_MAX, PW_NEUT
signed int gx, gy, offsetx, offsety, maxslope
float ksteering
unsigned int print_count, temp, SERVO_PW, DRIVE_PW
unsigned char input, acount, pcount, bcount, moving, adc, kx, ky, newreading, buzzOn
unsigned char Data[4]

__sbit __at 0xB3 SS
__sbit __at 0xB4 BUZZ

function prototypes
void Port_Init(void)
void PCA_Init(void)
void Interrupt_Init(void)
void XBR0_Init()
void SMB_Init(void)
void ADC_Init(void)
void ADC_Convert(void)

void read_accels(void)
void calibrateAccel(void)
void set_servo_PWM(void)
void set_drive_PWM(void)
void PCA_ISR(void) interrupt 9;


main function

	declare local variables

	initialize system, ports, ADC, and PCA

	Print beginning messages
	Have user set side-side pitch gain
	Have user set steering gain

	Print calibration messages
	calibrateAccel()

	Reset counters and turn Buzzer off

	begin infinite loop
		If car is backing up
			Oscillate buzzer .5sec on, 1sec off

		Every second print X accel., Y accel., X gain, Y gain, Steering gain, Motor PW
		If car is stopped print maxslope instead
		
		read_accels(void)
	end infinite loop

end main function

Port_Init()
	Set up P1MDOUT, P1, P3MDOUT, and P3
End Port_Init

XBR0_Init()
	XBR0 = 0x1F
End XBR0_Init

SMB_Init(void)
	Set up SMBus
End SMB_Init

void ADC_Init(void)
	Set up ADC
End ADC_Init

void ADC_Convert(void)
	Set ADC to convert on pin 7
	Get ADC value
	Store value in adc
End ADC_Convert

PCA_Init(void)
	Set up PCA0MD, PCA0CPM0, PCA0CPM2, and PCA0CN
End PCA_Init

void Interrupt_Init(void)
	Set up PCA and all interrupts
End Interrupt_Init

void PCA_ISR (void) interrupt 9
	Handle PCA interrupt with PCA0 and CF
	Increment counters and set new reading flag for accelerometer
End PCA_ISR

void calibrateAccel(void)
	declare local variables
		int avg_gx, avg_gy
		unsigned int i

	reset acount
	wait for the newReading flag
	For 64 iterations
		Read accelerometer until reading is ready
		Read accelerometer data
		Add data to averages

	Divide averages by 64
	Set offsetx
	Set offsety
End calibrateAccel

void read_accels(void)
	declare local variables
		int avg_gx, avg_gy
		unsigned int i

	reset acount
	wait for the newReading flag
	For 4 iterations
		Read accelerometer until reading is ready
		Read accelerometer data
		Add data to averages

	Divide averages by 4
	Set gx
	Set gy

	If gy is greater than the maxslope
		Set maxslope = gy

	set_servo_PWM()
	set_drive_PWM()
End read_accels

void set_servo_PWM(void)
	Servo PW = Center PW - (ksteering*(gx-offset))

	Adjust Servo PW to be in bounds

	Set PCA0CP0 to 0xFFFF - Servo PW
End set_servo_PWM

void set_drive_PWM(void)
	Drive PW = Neutral PW + (ky*(gy-offset))
	Drive PW += kx * abs(gx-offset)

	Adjust Drive PW to be in bounds

	If the car is driving backwards
		Set moving flag

	If SS is on
		Set PCA0CP2 to 0xFFFF - Drive PW
	Else
		Set PCA0CP2 to 0xFFFF - Neutral PW
End set_drive_PWM