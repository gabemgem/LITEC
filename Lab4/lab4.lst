                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module lab4
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _read_keypad
                                     13 	.globl _strlen
                                     14 	.globl _putchar
                                     15 	.globl _getchar
                                     16 	.globl _vsprintf
                                     17 	.globl _printf
                                     18 	.globl _getchar_nw
                                     19 	.globl _Sys_Init
                                     20 	.globl _UART0_Init
                                     21 	.globl _SYSCLK_Init
                                     22 	.globl _SS
                                     23 	.globl _BUS_SCL
                                     24 	.globl _BUS_TOE
                                     25 	.globl _BUS_FTE
                                     26 	.globl _BUS_AA
                                     27 	.globl _BUS_INT
                                     28 	.globl _BUS_STOP
                                     29 	.globl _BUS_START
                                     30 	.globl _BUS_EN
                                     31 	.globl _BUS_BUSY
                                     32 	.globl _SPIF
                                     33 	.globl _WCOL
                                     34 	.globl _MODF
                                     35 	.globl _RXOVRN
                                     36 	.globl _TXBSY
                                     37 	.globl _SLVSEL
                                     38 	.globl _MSTEN
                                     39 	.globl _SPIEN
                                     40 	.globl _AD0EN
                                     41 	.globl _ADCEN
                                     42 	.globl _AD0TM
                                     43 	.globl _ADCTM
                                     44 	.globl _AD0INT
                                     45 	.globl _ADCINT
                                     46 	.globl _AD0BUSY
                                     47 	.globl _ADBUSY
                                     48 	.globl _AD0CM1
                                     49 	.globl _ADSTM1
                                     50 	.globl _AD0CM0
                                     51 	.globl _ADSTM0
                                     52 	.globl _AD0WINT
                                     53 	.globl _ADWINT
                                     54 	.globl _AD0LJST
                                     55 	.globl _ADLJST
                                     56 	.globl _CF
                                     57 	.globl _CR
                                     58 	.globl _CCF4
                                     59 	.globl _CCF3
                                     60 	.globl _CCF2
                                     61 	.globl _CCF1
                                     62 	.globl _CCF0
                                     63 	.globl _CY
                                     64 	.globl _AC
                                     65 	.globl _F0
                                     66 	.globl _RS1
                                     67 	.globl _RS0
                                     68 	.globl _OV
                                     69 	.globl _F1
                                     70 	.globl _P
                                     71 	.globl _TF2
                                     72 	.globl _EXF2
                                     73 	.globl _RCLK
                                     74 	.globl _TCLK
                                     75 	.globl _EXEN2
                                     76 	.globl _TR2
                                     77 	.globl _CT2
                                     78 	.globl _CPRL2
                                     79 	.globl _BUSY
                                     80 	.globl _ENSMB
                                     81 	.globl _STA
                                     82 	.globl _STO
                                     83 	.globl _SI
                                     84 	.globl _AA
                                     85 	.globl _SMBFTE
                                     86 	.globl _SMBTOE
                                     87 	.globl _PT2
                                     88 	.globl _PS
                                     89 	.globl _PS0
                                     90 	.globl _PT1
                                     91 	.globl _PX1
                                     92 	.globl _PT0
                                     93 	.globl _PX0
                                     94 	.globl _P3_7
                                     95 	.globl _P3_6
                                     96 	.globl _P3_5
                                     97 	.globl _P3_4
                                     98 	.globl _P3_3
                                     99 	.globl _P3_2
                                    100 	.globl _P3_1
                                    101 	.globl _P3_0
                                    102 	.globl _EA
                                    103 	.globl _ET2
                                    104 	.globl _ES
                                    105 	.globl _ES0
                                    106 	.globl _ET1
                                    107 	.globl _EX1
                                    108 	.globl _ET0
                                    109 	.globl _EX0
                                    110 	.globl _P2_7
                                    111 	.globl _P2_6
                                    112 	.globl _P2_5
                                    113 	.globl _P2_4
                                    114 	.globl _P2_3
                                    115 	.globl _P2_2
                                    116 	.globl _P2_1
                                    117 	.globl _P2_0
                                    118 	.globl _S0MODE
                                    119 	.globl _SM00
                                    120 	.globl _SM0
                                    121 	.globl _SM10
                                    122 	.globl _SM1
                                    123 	.globl _MCE0
                                    124 	.globl _SM20
                                    125 	.globl _SM2
                                    126 	.globl _REN0
                                    127 	.globl _REN
                                    128 	.globl _TB80
                                    129 	.globl _TB8
                                    130 	.globl _RB80
                                    131 	.globl _RB8
                                    132 	.globl _TI0
                                    133 	.globl _TI
                                    134 	.globl _RI0
                                    135 	.globl _RI
                                    136 	.globl _P1_7
                                    137 	.globl _P1_6
                                    138 	.globl _P1_5
                                    139 	.globl _P1_4
                                    140 	.globl _P1_3
                                    141 	.globl _P1_2
                                    142 	.globl _P1_1
                                    143 	.globl _P1_0
                                    144 	.globl _TF1
                                    145 	.globl _TR1
                                    146 	.globl _TF0
                                    147 	.globl _TR0
                                    148 	.globl _IE1
                                    149 	.globl _IT1
                                    150 	.globl _IE0
                                    151 	.globl _IT0
                                    152 	.globl _P0_7
                                    153 	.globl _P0_6
                                    154 	.globl _P0_5
                                    155 	.globl _P0_4
                                    156 	.globl _P0_3
                                    157 	.globl _P0_2
                                    158 	.globl _P0_1
                                    159 	.globl _P0_0
                                    160 	.globl _PCA0CP4
                                    161 	.globl _PCA0CP3
                                    162 	.globl _PCA0CP2
                                    163 	.globl _PCA0CP1
                                    164 	.globl _PCA0CP0
                                    165 	.globl _PCA0
                                    166 	.globl _DAC1
                                    167 	.globl _DAC0
                                    168 	.globl _ADC0LT
                                    169 	.globl _ADC0GT
                                    170 	.globl _ADC0
                                    171 	.globl _RCAP4
                                    172 	.globl _TMR4
                                    173 	.globl _TMR3RL
                                    174 	.globl _TMR3
                                    175 	.globl _RCAP2
                                    176 	.globl _TMR2
                                    177 	.globl _TMR1
                                    178 	.globl _TMR0
                                    179 	.globl _WDTCN
                                    180 	.globl _PCA0CPH4
                                    181 	.globl _PCA0CPH3
                                    182 	.globl _PCA0CPH2
                                    183 	.globl _PCA0CPH1
                                    184 	.globl _PCA0CPH0
                                    185 	.globl _PCA0H
                                    186 	.globl _SPI0CN
                                    187 	.globl _EIP2
                                    188 	.globl _EIP1
                                    189 	.globl _TH4
                                    190 	.globl _TL4
                                    191 	.globl _SADDR1
                                    192 	.globl _SBUF1
                                    193 	.globl _SCON1
                                    194 	.globl _B
                                    195 	.globl _RSTSRC
                                    196 	.globl _PCA0CPL4
                                    197 	.globl _PCA0CPL3
                                    198 	.globl _PCA0CPL2
                                    199 	.globl _PCA0CPL1
                                    200 	.globl _PCA0CPL0
                                    201 	.globl _PCA0L
                                    202 	.globl _ADC0CN
                                    203 	.globl _EIE2
                                    204 	.globl _EIE1
                                    205 	.globl _RCAP4H
                                    206 	.globl _RCAP4L
                                    207 	.globl _XBR2
                                    208 	.globl _XBR1
                                    209 	.globl _XBR0
                                    210 	.globl _ACC
                                    211 	.globl _PCA0CPM4
                                    212 	.globl _PCA0CPM3
                                    213 	.globl _PCA0CPM2
                                    214 	.globl _PCA0CPM1
                                    215 	.globl _PCA0CPM0
                                    216 	.globl _PCA0MD
                                    217 	.globl _PCA0CN
                                    218 	.globl _DAC1CN
                                    219 	.globl _DAC1H
                                    220 	.globl _DAC1L
                                    221 	.globl _DAC0CN
                                    222 	.globl _DAC0H
                                    223 	.globl _DAC0L
                                    224 	.globl _REF0CN
                                    225 	.globl _PSW
                                    226 	.globl _SMB0CR
                                    227 	.globl _TH2
                                    228 	.globl _TL2
                                    229 	.globl _RCAP2H
                                    230 	.globl _RCAP2L
                                    231 	.globl _T4CON
                                    232 	.globl _T2CON
                                    233 	.globl _ADC0LTH
                                    234 	.globl _ADC0LTL
                                    235 	.globl _ADC0GTH
                                    236 	.globl _ADC0GTL
                                    237 	.globl _SMB0ADR
                                    238 	.globl _SMB0DAT
                                    239 	.globl _SMB0STA
                                    240 	.globl _SMB0CN
                                    241 	.globl _ADC0H
                                    242 	.globl _ADC0L
                                    243 	.globl _P1MDIN
                                    244 	.globl _ADC0CF
                                    245 	.globl _AMX0SL
                                    246 	.globl _AMX0CF
                                    247 	.globl _SADEN0
                                    248 	.globl _IP
                                    249 	.globl _FLACL
                                    250 	.globl _FLSCL
                                    251 	.globl _P74OUT
                                    252 	.globl _OSCICN
                                    253 	.globl _OSCXCN
                                    254 	.globl _P3
                                    255 	.globl __XPAGE
                                    256 	.globl _EMI0CN
                                    257 	.globl _SADEN1
                                    258 	.globl _P3IF
                                    259 	.globl _AMX1SL
                                    260 	.globl _ADC1CF
                                    261 	.globl _ADC1CN
                                    262 	.globl _SADDR0
                                    263 	.globl _IE
                                    264 	.globl _P3MDOUT
                                    265 	.globl _PRT3CF
                                    266 	.globl _P2MDOUT
                                    267 	.globl _PRT2CF
                                    268 	.globl _P1MDOUT
                                    269 	.globl _PRT1CF
                                    270 	.globl _P0MDOUT
                                    271 	.globl _PRT0CF
                                    272 	.globl _EMI0CF
                                    273 	.globl _EMI0TC
                                    274 	.globl _P2
                                    275 	.globl _CPT1CN
                                    276 	.globl _CPT0CN
                                    277 	.globl _SPI0CKR
                                    278 	.globl _ADC1
                                    279 	.globl _SPI0DAT
                                    280 	.globl _SPI0CFG
                                    281 	.globl _SBUF0
                                    282 	.globl _SBUF
                                    283 	.globl _SCON0
                                    284 	.globl _SCON
                                    285 	.globl _P7
                                    286 	.globl _TMR3H
                                    287 	.globl _TMR3L
                                    288 	.globl _TMR3RLH
                                    289 	.globl _TMR3RLL
                                    290 	.globl _TMR3CN
                                    291 	.globl _P1
                                    292 	.globl _PSCTL
                                    293 	.globl _CKCON
                                    294 	.globl _TH1
                                    295 	.globl _TH0
                                    296 	.globl _TL1
                                    297 	.globl _TL0
                                    298 	.globl _TMOD
                                    299 	.globl _TCON
                                    300 	.globl _PCON
                                    301 	.globl _P6
                                    302 	.globl _P5
                                    303 	.globl _P4
                                    304 	.globl _DPH
                                    305 	.globl _DPL
                                    306 	.globl _SP
                                    307 	.globl _P0
                                    308 	.globl _stop
                                    309 	.globl _obstacle
                                    310 	.globl _MOTOR_PW
                                    311 	.globl _PW_NEUT
                                    312 	.globl _PW_MAX
                                    313 	.globl _PW_MIN
                                    314 	.globl _temp
                                    315 	.globl _k
                                    316 	.globl _error
                                    317 	.globl _SERVO_PW
                                    318 	.globl _PW_LEFT
                                    319 	.globl _PW_RIGHT
                                    320 	.globl _PW_CENTER
                                    321 	.globl _loopcontrol
                                    322 	.globl _adc
                                    323 	.globl _Data
                                    324 	.globl _input
                                    325 	.globl _print_count
                                    326 	.globl _rangervalue
                                    327 	.globl _desired
                                    328 	.globl _heading
                                    329 	.globl _rcount
                                    330 	.globl _ccount
                                    331 	.globl _PCA_start
                                    332 	.globl _i2c_read_data_PARM_4
                                    333 	.globl _i2c_read_data_PARM_3
                                    334 	.globl _i2c_read_data_PARM_2
                                    335 	.globl _i2c_write_data_PARM_4
                                    336 	.globl _i2c_write_data_PARM_3
                                    337 	.globl _i2c_write_data_PARM_2
                                    338 	.globl _aligned_alloc_PARM_2
                                    339 	.globl _Data2
                                    340 	.globl _lcd_print
                                    341 	.globl _lcd_clear
                                    342 	.globl _kpd_input
                                    343 	.globl _delay_time
                                    344 	.globl _i2c_start
                                    345 	.globl _i2c_write
                                    346 	.globl _i2c_write_and_stop
                                    347 	.globl _i2c_read
                                    348 	.globl _i2c_read_and_stop
                                    349 	.globl _i2c_write_data
                                    350 	.globl _i2c_read_data
                                    351 	.globl _Accel_Init
                                    352 	.globl _Accel_Init_C
                                    353 	.globl _Port_Init
                                    354 	.globl _XBR0_Init
                                    355 	.globl _SMB_Init
                                    356 	.globl _ADC_Init
                                    357 	.globl _ADC_Convert
                                    358 	.globl _PCA_Init
                                    359 	.globl _Interrupt_Init
                                    360 	.globl _PCA_ISR
                                    361 	.globl _Read_Compass
                                    362 	.globl _ReadRanger
                                    363 	.globl _Ranger
                                    364 	.globl _Steering_Servo
                                    365 ;--------------------------------------------------------
                                    366 ; special function registers
                                    367 ;--------------------------------------------------------
                                    368 	.area RSEG    (ABS,DATA)
      000000                        369 	.org 0x0000
                           000080   370 G$P0$0$0 == 0x0080
                           000080   371 _P0	=	0x0080
                           000081   372 G$SP$0$0 == 0x0081
                           000081   373 _SP	=	0x0081
                           000082   374 G$DPL$0$0 == 0x0082
                           000082   375 _DPL	=	0x0082
                           000083   376 G$DPH$0$0 == 0x0083
                           000083   377 _DPH	=	0x0083
                           000084   378 G$P4$0$0 == 0x0084
                           000084   379 _P4	=	0x0084
                           000085   380 G$P5$0$0 == 0x0085
                           000085   381 _P5	=	0x0085
                           000086   382 G$P6$0$0 == 0x0086
                           000086   383 _P6	=	0x0086
                           000087   384 G$PCON$0$0 == 0x0087
                           000087   385 _PCON	=	0x0087
                           000088   386 G$TCON$0$0 == 0x0088
                           000088   387 _TCON	=	0x0088
                           000089   388 G$TMOD$0$0 == 0x0089
                           000089   389 _TMOD	=	0x0089
                           00008A   390 G$TL0$0$0 == 0x008a
                           00008A   391 _TL0	=	0x008a
                           00008B   392 G$TL1$0$0 == 0x008b
                           00008B   393 _TL1	=	0x008b
                           00008C   394 G$TH0$0$0 == 0x008c
                           00008C   395 _TH0	=	0x008c
                           00008D   396 G$TH1$0$0 == 0x008d
                           00008D   397 _TH1	=	0x008d
                           00008E   398 G$CKCON$0$0 == 0x008e
                           00008E   399 _CKCON	=	0x008e
                           00008F   400 G$PSCTL$0$0 == 0x008f
                           00008F   401 _PSCTL	=	0x008f
                           000090   402 G$P1$0$0 == 0x0090
                           000090   403 _P1	=	0x0090
                           000091   404 G$TMR3CN$0$0 == 0x0091
                           000091   405 _TMR3CN	=	0x0091
                           000092   406 G$TMR3RLL$0$0 == 0x0092
                           000092   407 _TMR3RLL	=	0x0092
                           000093   408 G$TMR3RLH$0$0 == 0x0093
                           000093   409 _TMR3RLH	=	0x0093
                           000094   410 G$TMR3L$0$0 == 0x0094
                           000094   411 _TMR3L	=	0x0094
                           000095   412 G$TMR3H$0$0 == 0x0095
                           000095   413 _TMR3H	=	0x0095
                           000096   414 G$P7$0$0 == 0x0096
                           000096   415 _P7	=	0x0096
                           000098   416 G$SCON$0$0 == 0x0098
                           000098   417 _SCON	=	0x0098
                           000098   418 G$SCON0$0$0 == 0x0098
                           000098   419 _SCON0	=	0x0098
                           000099   420 G$SBUF$0$0 == 0x0099
                           000099   421 _SBUF	=	0x0099
                           000099   422 G$SBUF0$0$0 == 0x0099
                           000099   423 _SBUF0	=	0x0099
                           00009A   424 G$SPI0CFG$0$0 == 0x009a
                           00009A   425 _SPI0CFG	=	0x009a
                           00009B   426 G$SPI0DAT$0$0 == 0x009b
                           00009B   427 _SPI0DAT	=	0x009b
                           00009C   428 G$ADC1$0$0 == 0x009c
                           00009C   429 _ADC1	=	0x009c
                           00009D   430 G$SPI0CKR$0$0 == 0x009d
                           00009D   431 _SPI0CKR	=	0x009d
                           00009E   432 G$CPT0CN$0$0 == 0x009e
                           00009E   433 _CPT0CN	=	0x009e
                           00009F   434 G$CPT1CN$0$0 == 0x009f
                           00009F   435 _CPT1CN	=	0x009f
                           0000A0   436 G$P2$0$0 == 0x00a0
                           0000A0   437 _P2	=	0x00a0
                           0000A1   438 G$EMI0TC$0$0 == 0x00a1
                           0000A1   439 _EMI0TC	=	0x00a1
                           0000A3   440 G$EMI0CF$0$0 == 0x00a3
                           0000A3   441 _EMI0CF	=	0x00a3
                           0000A4   442 G$PRT0CF$0$0 == 0x00a4
                           0000A4   443 _PRT0CF	=	0x00a4
                           0000A4   444 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   445 _P0MDOUT	=	0x00a4
                           0000A5   446 G$PRT1CF$0$0 == 0x00a5
                           0000A5   447 _PRT1CF	=	0x00a5
                           0000A5   448 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   449 _P1MDOUT	=	0x00a5
                           0000A6   450 G$PRT2CF$0$0 == 0x00a6
                           0000A6   451 _PRT2CF	=	0x00a6
                           0000A6   452 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   453 _P2MDOUT	=	0x00a6
                           0000A7   454 G$PRT3CF$0$0 == 0x00a7
                           0000A7   455 _PRT3CF	=	0x00a7
                           0000A7   456 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   457 _P3MDOUT	=	0x00a7
                           0000A8   458 G$IE$0$0 == 0x00a8
                           0000A8   459 _IE	=	0x00a8
                           0000A9   460 G$SADDR0$0$0 == 0x00a9
                           0000A9   461 _SADDR0	=	0x00a9
                           0000AA   462 G$ADC1CN$0$0 == 0x00aa
                           0000AA   463 _ADC1CN	=	0x00aa
                           0000AB   464 G$ADC1CF$0$0 == 0x00ab
                           0000AB   465 _ADC1CF	=	0x00ab
                           0000AC   466 G$AMX1SL$0$0 == 0x00ac
                           0000AC   467 _AMX1SL	=	0x00ac
                           0000AD   468 G$P3IF$0$0 == 0x00ad
                           0000AD   469 _P3IF	=	0x00ad
                           0000AE   470 G$SADEN1$0$0 == 0x00ae
                           0000AE   471 _SADEN1	=	0x00ae
                           0000AF   472 G$EMI0CN$0$0 == 0x00af
                           0000AF   473 _EMI0CN	=	0x00af
                           0000AF   474 G$_XPAGE$0$0 == 0x00af
                           0000AF   475 __XPAGE	=	0x00af
                           0000B0   476 G$P3$0$0 == 0x00b0
                           0000B0   477 _P3	=	0x00b0
                           0000B1   478 G$OSCXCN$0$0 == 0x00b1
                           0000B1   479 _OSCXCN	=	0x00b1
                           0000B2   480 G$OSCICN$0$0 == 0x00b2
                           0000B2   481 _OSCICN	=	0x00b2
                           0000B5   482 G$P74OUT$0$0 == 0x00b5
                           0000B5   483 _P74OUT	=	0x00b5
                           0000B6   484 G$FLSCL$0$0 == 0x00b6
                           0000B6   485 _FLSCL	=	0x00b6
                           0000B7   486 G$FLACL$0$0 == 0x00b7
                           0000B7   487 _FLACL	=	0x00b7
                           0000B8   488 G$IP$0$0 == 0x00b8
                           0000B8   489 _IP	=	0x00b8
                           0000B9   490 G$SADEN0$0$0 == 0x00b9
                           0000B9   491 _SADEN0	=	0x00b9
                           0000BA   492 G$AMX0CF$0$0 == 0x00ba
                           0000BA   493 _AMX0CF	=	0x00ba
                           0000BB   494 G$AMX0SL$0$0 == 0x00bb
                           0000BB   495 _AMX0SL	=	0x00bb
                           0000BC   496 G$ADC0CF$0$0 == 0x00bc
                           0000BC   497 _ADC0CF	=	0x00bc
                           0000BD   498 G$P1MDIN$0$0 == 0x00bd
                           0000BD   499 _P1MDIN	=	0x00bd
                           0000BE   500 G$ADC0L$0$0 == 0x00be
                           0000BE   501 _ADC0L	=	0x00be
                           0000BF   502 G$ADC0H$0$0 == 0x00bf
                           0000BF   503 _ADC0H	=	0x00bf
                           0000C0   504 G$SMB0CN$0$0 == 0x00c0
                           0000C0   505 _SMB0CN	=	0x00c0
                           0000C1   506 G$SMB0STA$0$0 == 0x00c1
                           0000C1   507 _SMB0STA	=	0x00c1
                           0000C2   508 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   509 _SMB0DAT	=	0x00c2
                           0000C3   510 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   511 _SMB0ADR	=	0x00c3
                           0000C4   512 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   513 _ADC0GTL	=	0x00c4
                           0000C5   514 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   515 _ADC0GTH	=	0x00c5
                           0000C6   516 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   517 _ADC0LTL	=	0x00c6
                           0000C7   518 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   519 _ADC0LTH	=	0x00c7
                           0000C8   520 G$T2CON$0$0 == 0x00c8
                           0000C8   521 _T2CON	=	0x00c8
                           0000C9   522 G$T4CON$0$0 == 0x00c9
                           0000C9   523 _T4CON	=	0x00c9
                           0000CA   524 G$RCAP2L$0$0 == 0x00ca
                           0000CA   525 _RCAP2L	=	0x00ca
                           0000CB   526 G$RCAP2H$0$0 == 0x00cb
                           0000CB   527 _RCAP2H	=	0x00cb
                           0000CC   528 G$TL2$0$0 == 0x00cc
                           0000CC   529 _TL2	=	0x00cc
                           0000CD   530 G$TH2$0$0 == 0x00cd
                           0000CD   531 _TH2	=	0x00cd
                           0000CF   532 G$SMB0CR$0$0 == 0x00cf
                           0000CF   533 _SMB0CR	=	0x00cf
                           0000D0   534 G$PSW$0$0 == 0x00d0
                           0000D0   535 _PSW	=	0x00d0
                           0000D1   536 G$REF0CN$0$0 == 0x00d1
                           0000D1   537 _REF0CN	=	0x00d1
                           0000D2   538 G$DAC0L$0$0 == 0x00d2
                           0000D2   539 _DAC0L	=	0x00d2
                           0000D3   540 G$DAC0H$0$0 == 0x00d3
                           0000D3   541 _DAC0H	=	0x00d3
                           0000D4   542 G$DAC0CN$0$0 == 0x00d4
                           0000D4   543 _DAC0CN	=	0x00d4
                           0000D5   544 G$DAC1L$0$0 == 0x00d5
                           0000D5   545 _DAC1L	=	0x00d5
                           0000D6   546 G$DAC1H$0$0 == 0x00d6
                           0000D6   547 _DAC1H	=	0x00d6
                           0000D7   548 G$DAC1CN$0$0 == 0x00d7
                           0000D7   549 _DAC1CN	=	0x00d7
                           0000D8   550 G$PCA0CN$0$0 == 0x00d8
                           0000D8   551 _PCA0CN	=	0x00d8
                           0000D9   552 G$PCA0MD$0$0 == 0x00d9
                           0000D9   553 _PCA0MD	=	0x00d9
                           0000DA   554 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   555 _PCA0CPM0	=	0x00da
                           0000DB   556 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   557 _PCA0CPM1	=	0x00db
                           0000DC   558 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   559 _PCA0CPM2	=	0x00dc
                           0000DD   560 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   561 _PCA0CPM3	=	0x00dd
                           0000DE   562 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   563 _PCA0CPM4	=	0x00de
                           0000E0   564 G$ACC$0$0 == 0x00e0
                           0000E0   565 _ACC	=	0x00e0
                           0000E1   566 G$XBR0$0$0 == 0x00e1
                           0000E1   567 _XBR0	=	0x00e1
                           0000E2   568 G$XBR1$0$0 == 0x00e2
                           0000E2   569 _XBR1	=	0x00e2
                           0000E3   570 G$XBR2$0$0 == 0x00e3
                           0000E3   571 _XBR2	=	0x00e3
                           0000E4   572 G$RCAP4L$0$0 == 0x00e4
                           0000E4   573 _RCAP4L	=	0x00e4
                           0000E5   574 G$RCAP4H$0$0 == 0x00e5
                           0000E5   575 _RCAP4H	=	0x00e5
                           0000E6   576 G$EIE1$0$0 == 0x00e6
                           0000E6   577 _EIE1	=	0x00e6
                           0000E7   578 G$EIE2$0$0 == 0x00e7
                           0000E7   579 _EIE2	=	0x00e7
                           0000E8   580 G$ADC0CN$0$0 == 0x00e8
                           0000E8   581 _ADC0CN	=	0x00e8
                           0000E9   582 G$PCA0L$0$0 == 0x00e9
                           0000E9   583 _PCA0L	=	0x00e9
                           0000EA   584 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   585 _PCA0CPL0	=	0x00ea
                           0000EB   586 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   587 _PCA0CPL1	=	0x00eb
                           0000EC   588 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   589 _PCA0CPL2	=	0x00ec
                           0000ED   590 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   591 _PCA0CPL3	=	0x00ed
                           0000EE   592 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   593 _PCA0CPL4	=	0x00ee
                           0000EF   594 G$RSTSRC$0$0 == 0x00ef
                           0000EF   595 _RSTSRC	=	0x00ef
                           0000F0   596 G$B$0$0 == 0x00f0
                           0000F0   597 _B	=	0x00f0
                           0000F1   598 G$SCON1$0$0 == 0x00f1
                           0000F1   599 _SCON1	=	0x00f1
                           0000F2   600 G$SBUF1$0$0 == 0x00f2
                           0000F2   601 _SBUF1	=	0x00f2
                           0000F3   602 G$SADDR1$0$0 == 0x00f3
                           0000F3   603 _SADDR1	=	0x00f3
                           0000F4   604 G$TL4$0$0 == 0x00f4
                           0000F4   605 _TL4	=	0x00f4
                           0000F5   606 G$TH4$0$0 == 0x00f5
                           0000F5   607 _TH4	=	0x00f5
                           0000F6   608 G$EIP1$0$0 == 0x00f6
                           0000F6   609 _EIP1	=	0x00f6
                           0000F7   610 G$EIP2$0$0 == 0x00f7
                           0000F7   611 _EIP2	=	0x00f7
                           0000F8   612 G$SPI0CN$0$0 == 0x00f8
                           0000F8   613 _SPI0CN	=	0x00f8
                           0000F9   614 G$PCA0H$0$0 == 0x00f9
                           0000F9   615 _PCA0H	=	0x00f9
                           0000FA   616 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   617 _PCA0CPH0	=	0x00fa
                           0000FB   618 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   619 _PCA0CPH1	=	0x00fb
                           0000FC   620 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   621 _PCA0CPH2	=	0x00fc
                           0000FD   622 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   623 _PCA0CPH3	=	0x00fd
                           0000FE   624 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   625 _PCA0CPH4	=	0x00fe
                           0000FF   626 G$WDTCN$0$0 == 0x00ff
                           0000FF   627 _WDTCN	=	0x00ff
                           008C8A   628 G$TMR0$0$0 == 0x8c8a
                           008C8A   629 _TMR0	=	0x8c8a
                           008D8B   630 G$TMR1$0$0 == 0x8d8b
                           008D8B   631 _TMR1	=	0x8d8b
                           00CDCC   632 G$TMR2$0$0 == 0xcdcc
                           00CDCC   633 _TMR2	=	0xcdcc
                           00CBCA   634 G$RCAP2$0$0 == 0xcbca
                           00CBCA   635 _RCAP2	=	0xcbca
                           009594   636 G$TMR3$0$0 == 0x9594
                           009594   637 _TMR3	=	0x9594
                           009392   638 G$TMR3RL$0$0 == 0x9392
                           009392   639 _TMR3RL	=	0x9392
                           00F5F4   640 G$TMR4$0$0 == 0xf5f4
                           00F5F4   641 _TMR4	=	0xf5f4
                           00E5E4   642 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   643 _RCAP4	=	0xe5e4
                           00BFBE   644 G$ADC0$0$0 == 0xbfbe
                           00BFBE   645 _ADC0	=	0xbfbe
                           00C5C4   646 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   647 _ADC0GT	=	0xc5c4
                           00C7C6   648 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   649 _ADC0LT	=	0xc7c6
                           00D3D2   650 G$DAC0$0$0 == 0xd3d2
                           00D3D2   651 _DAC0	=	0xd3d2
                           00D6D5   652 G$DAC1$0$0 == 0xd6d5
                           00D6D5   653 _DAC1	=	0xd6d5
                           00F9E9   654 G$PCA0$0$0 == 0xf9e9
                           00F9E9   655 _PCA0	=	0xf9e9
                           00FAEA   656 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   657 _PCA0CP0	=	0xfaea
                           00FBEB   658 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   659 _PCA0CP1	=	0xfbeb
                           00FCEC   660 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   661 _PCA0CP2	=	0xfcec
                           00FDED   662 G$PCA0CP3$0$0 == 0xfded
                           00FDED   663 _PCA0CP3	=	0xfded
                           00FEEE   664 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   665 _PCA0CP4	=	0xfeee
                                    666 ;--------------------------------------------------------
                                    667 ; special function bits
                                    668 ;--------------------------------------------------------
                                    669 	.area RSEG    (ABS,DATA)
      000000                        670 	.org 0x0000
                           000080   671 G$P0_0$0$0 == 0x0080
                           000080   672 _P0_0	=	0x0080
                           000081   673 G$P0_1$0$0 == 0x0081
                           000081   674 _P0_1	=	0x0081
                           000082   675 G$P0_2$0$0 == 0x0082
                           000082   676 _P0_2	=	0x0082
                           000083   677 G$P0_3$0$0 == 0x0083
                           000083   678 _P0_3	=	0x0083
                           000084   679 G$P0_4$0$0 == 0x0084
                           000084   680 _P0_4	=	0x0084
                           000085   681 G$P0_5$0$0 == 0x0085
                           000085   682 _P0_5	=	0x0085
                           000086   683 G$P0_6$0$0 == 0x0086
                           000086   684 _P0_6	=	0x0086
                           000087   685 G$P0_7$0$0 == 0x0087
                           000087   686 _P0_7	=	0x0087
                           000088   687 G$IT0$0$0 == 0x0088
                           000088   688 _IT0	=	0x0088
                           000089   689 G$IE0$0$0 == 0x0089
                           000089   690 _IE0	=	0x0089
                           00008A   691 G$IT1$0$0 == 0x008a
                           00008A   692 _IT1	=	0x008a
                           00008B   693 G$IE1$0$0 == 0x008b
                           00008B   694 _IE1	=	0x008b
                           00008C   695 G$TR0$0$0 == 0x008c
                           00008C   696 _TR0	=	0x008c
                           00008D   697 G$TF0$0$0 == 0x008d
                           00008D   698 _TF0	=	0x008d
                           00008E   699 G$TR1$0$0 == 0x008e
                           00008E   700 _TR1	=	0x008e
                           00008F   701 G$TF1$0$0 == 0x008f
                           00008F   702 _TF1	=	0x008f
                           000090   703 G$P1_0$0$0 == 0x0090
                           000090   704 _P1_0	=	0x0090
                           000091   705 G$P1_1$0$0 == 0x0091
                           000091   706 _P1_1	=	0x0091
                           000092   707 G$P1_2$0$0 == 0x0092
                           000092   708 _P1_2	=	0x0092
                           000093   709 G$P1_3$0$0 == 0x0093
                           000093   710 _P1_3	=	0x0093
                           000094   711 G$P1_4$0$0 == 0x0094
                           000094   712 _P1_4	=	0x0094
                           000095   713 G$P1_5$0$0 == 0x0095
                           000095   714 _P1_5	=	0x0095
                           000096   715 G$P1_6$0$0 == 0x0096
                           000096   716 _P1_6	=	0x0096
                           000097   717 G$P1_7$0$0 == 0x0097
                           000097   718 _P1_7	=	0x0097
                           000098   719 G$RI$0$0 == 0x0098
                           000098   720 _RI	=	0x0098
                           000098   721 G$RI0$0$0 == 0x0098
                           000098   722 _RI0	=	0x0098
                           000099   723 G$TI$0$0 == 0x0099
                           000099   724 _TI	=	0x0099
                           000099   725 G$TI0$0$0 == 0x0099
                           000099   726 _TI0	=	0x0099
                           00009A   727 G$RB8$0$0 == 0x009a
                           00009A   728 _RB8	=	0x009a
                           00009A   729 G$RB80$0$0 == 0x009a
                           00009A   730 _RB80	=	0x009a
                           00009B   731 G$TB8$0$0 == 0x009b
                           00009B   732 _TB8	=	0x009b
                           00009B   733 G$TB80$0$0 == 0x009b
                           00009B   734 _TB80	=	0x009b
                           00009C   735 G$REN$0$0 == 0x009c
                           00009C   736 _REN	=	0x009c
                           00009C   737 G$REN0$0$0 == 0x009c
                           00009C   738 _REN0	=	0x009c
                           00009D   739 G$SM2$0$0 == 0x009d
                           00009D   740 _SM2	=	0x009d
                           00009D   741 G$SM20$0$0 == 0x009d
                           00009D   742 _SM20	=	0x009d
                           00009D   743 G$MCE0$0$0 == 0x009d
                           00009D   744 _MCE0	=	0x009d
                           00009E   745 G$SM1$0$0 == 0x009e
                           00009E   746 _SM1	=	0x009e
                           00009E   747 G$SM10$0$0 == 0x009e
                           00009E   748 _SM10	=	0x009e
                           00009F   749 G$SM0$0$0 == 0x009f
                           00009F   750 _SM0	=	0x009f
                           00009F   751 G$SM00$0$0 == 0x009f
                           00009F   752 _SM00	=	0x009f
                           00009F   753 G$S0MODE$0$0 == 0x009f
                           00009F   754 _S0MODE	=	0x009f
                           0000A0   755 G$P2_0$0$0 == 0x00a0
                           0000A0   756 _P2_0	=	0x00a0
                           0000A1   757 G$P2_1$0$0 == 0x00a1
                           0000A1   758 _P2_1	=	0x00a1
                           0000A2   759 G$P2_2$0$0 == 0x00a2
                           0000A2   760 _P2_2	=	0x00a2
                           0000A3   761 G$P2_3$0$0 == 0x00a3
                           0000A3   762 _P2_3	=	0x00a3
                           0000A4   763 G$P2_4$0$0 == 0x00a4
                           0000A4   764 _P2_4	=	0x00a4
                           0000A5   765 G$P2_5$0$0 == 0x00a5
                           0000A5   766 _P2_5	=	0x00a5
                           0000A6   767 G$P2_6$0$0 == 0x00a6
                           0000A6   768 _P2_6	=	0x00a6
                           0000A7   769 G$P2_7$0$0 == 0x00a7
                           0000A7   770 _P2_7	=	0x00a7
                           0000A8   771 G$EX0$0$0 == 0x00a8
                           0000A8   772 _EX0	=	0x00a8
                           0000A9   773 G$ET0$0$0 == 0x00a9
                           0000A9   774 _ET0	=	0x00a9
                           0000AA   775 G$EX1$0$0 == 0x00aa
                           0000AA   776 _EX1	=	0x00aa
                           0000AB   777 G$ET1$0$0 == 0x00ab
                           0000AB   778 _ET1	=	0x00ab
                           0000AC   779 G$ES0$0$0 == 0x00ac
                           0000AC   780 _ES0	=	0x00ac
                           0000AC   781 G$ES$0$0 == 0x00ac
                           0000AC   782 _ES	=	0x00ac
                           0000AD   783 G$ET2$0$0 == 0x00ad
                           0000AD   784 _ET2	=	0x00ad
                           0000AF   785 G$EA$0$0 == 0x00af
                           0000AF   786 _EA	=	0x00af
                           0000B0   787 G$P3_0$0$0 == 0x00b0
                           0000B0   788 _P3_0	=	0x00b0
                           0000B1   789 G$P3_1$0$0 == 0x00b1
                           0000B1   790 _P3_1	=	0x00b1
                           0000B2   791 G$P3_2$0$0 == 0x00b2
                           0000B2   792 _P3_2	=	0x00b2
                           0000B3   793 G$P3_3$0$0 == 0x00b3
                           0000B3   794 _P3_3	=	0x00b3
                           0000B4   795 G$P3_4$0$0 == 0x00b4
                           0000B4   796 _P3_4	=	0x00b4
                           0000B5   797 G$P3_5$0$0 == 0x00b5
                           0000B5   798 _P3_5	=	0x00b5
                           0000B6   799 G$P3_6$0$0 == 0x00b6
                           0000B6   800 _P3_6	=	0x00b6
                           0000B7   801 G$P3_7$0$0 == 0x00b7
                           0000B7   802 _P3_7	=	0x00b7
                           0000B8   803 G$PX0$0$0 == 0x00b8
                           0000B8   804 _PX0	=	0x00b8
                           0000B9   805 G$PT0$0$0 == 0x00b9
                           0000B9   806 _PT0	=	0x00b9
                           0000BA   807 G$PX1$0$0 == 0x00ba
                           0000BA   808 _PX1	=	0x00ba
                           0000BB   809 G$PT1$0$0 == 0x00bb
                           0000BB   810 _PT1	=	0x00bb
                           0000BC   811 G$PS0$0$0 == 0x00bc
                           0000BC   812 _PS0	=	0x00bc
                           0000BC   813 G$PS$0$0 == 0x00bc
                           0000BC   814 _PS	=	0x00bc
                           0000BD   815 G$PT2$0$0 == 0x00bd
                           0000BD   816 _PT2	=	0x00bd
                           0000C0   817 G$SMBTOE$0$0 == 0x00c0
                           0000C0   818 _SMBTOE	=	0x00c0
                           0000C1   819 G$SMBFTE$0$0 == 0x00c1
                           0000C1   820 _SMBFTE	=	0x00c1
                           0000C2   821 G$AA$0$0 == 0x00c2
                           0000C2   822 _AA	=	0x00c2
                           0000C3   823 G$SI$0$0 == 0x00c3
                           0000C3   824 _SI	=	0x00c3
                           0000C4   825 G$STO$0$0 == 0x00c4
                           0000C4   826 _STO	=	0x00c4
                           0000C5   827 G$STA$0$0 == 0x00c5
                           0000C5   828 _STA	=	0x00c5
                           0000C6   829 G$ENSMB$0$0 == 0x00c6
                           0000C6   830 _ENSMB	=	0x00c6
                           0000C7   831 G$BUSY$0$0 == 0x00c7
                           0000C7   832 _BUSY	=	0x00c7
                           0000C8   833 G$CPRL2$0$0 == 0x00c8
                           0000C8   834 _CPRL2	=	0x00c8
                           0000C9   835 G$CT2$0$0 == 0x00c9
                           0000C9   836 _CT2	=	0x00c9
                           0000CA   837 G$TR2$0$0 == 0x00ca
                           0000CA   838 _TR2	=	0x00ca
                           0000CB   839 G$EXEN2$0$0 == 0x00cb
                           0000CB   840 _EXEN2	=	0x00cb
                           0000CC   841 G$TCLK$0$0 == 0x00cc
                           0000CC   842 _TCLK	=	0x00cc
                           0000CD   843 G$RCLK$0$0 == 0x00cd
                           0000CD   844 _RCLK	=	0x00cd
                           0000CE   845 G$EXF2$0$0 == 0x00ce
                           0000CE   846 _EXF2	=	0x00ce
                           0000CF   847 G$TF2$0$0 == 0x00cf
                           0000CF   848 _TF2	=	0x00cf
                           0000D0   849 G$P$0$0 == 0x00d0
                           0000D0   850 _P	=	0x00d0
                           0000D1   851 G$F1$0$0 == 0x00d1
                           0000D1   852 _F1	=	0x00d1
                           0000D2   853 G$OV$0$0 == 0x00d2
                           0000D2   854 _OV	=	0x00d2
                           0000D3   855 G$RS0$0$0 == 0x00d3
                           0000D3   856 _RS0	=	0x00d3
                           0000D4   857 G$RS1$0$0 == 0x00d4
                           0000D4   858 _RS1	=	0x00d4
                           0000D5   859 G$F0$0$0 == 0x00d5
                           0000D5   860 _F0	=	0x00d5
                           0000D6   861 G$AC$0$0 == 0x00d6
                           0000D6   862 _AC	=	0x00d6
                           0000D7   863 G$CY$0$0 == 0x00d7
                           0000D7   864 _CY	=	0x00d7
                           0000D8   865 G$CCF0$0$0 == 0x00d8
                           0000D8   866 _CCF0	=	0x00d8
                           0000D9   867 G$CCF1$0$0 == 0x00d9
                           0000D9   868 _CCF1	=	0x00d9
                           0000DA   869 G$CCF2$0$0 == 0x00da
                           0000DA   870 _CCF2	=	0x00da
                           0000DB   871 G$CCF3$0$0 == 0x00db
                           0000DB   872 _CCF3	=	0x00db
                           0000DC   873 G$CCF4$0$0 == 0x00dc
                           0000DC   874 _CCF4	=	0x00dc
                           0000DE   875 G$CR$0$0 == 0x00de
                           0000DE   876 _CR	=	0x00de
                           0000DF   877 G$CF$0$0 == 0x00df
                           0000DF   878 _CF	=	0x00df
                           0000E8   879 G$ADLJST$0$0 == 0x00e8
                           0000E8   880 _ADLJST	=	0x00e8
                           0000E8   881 G$AD0LJST$0$0 == 0x00e8
                           0000E8   882 _AD0LJST	=	0x00e8
                           0000E9   883 G$ADWINT$0$0 == 0x00e9
                           0000E9   884 _ADWINT	=	0x00e9
                           0000E9   885 G$AD0WINT$0$0 == 0x00e9
                           0000E9   886 _AD0WINT	=	0x00e9
                           0000EA   887 G$ADSTM0$0$0 == 0x00ea
                           0000EA   888 _ADSTM0	=	0x00ea
                           0000EA   889 G$AD0CM0$0$0 == 0x00ea
                           0000EA   890 _AD0CM0	=	0x00ea
                           0000EB   891 G$ADSTM1$0$0 == 0x00eb
                           0000EB   892 _ADSTM1	=	0x00eb
                           0000EB   893 G$AD0CM1$0$0 == 0x00eb
                           0000EB   894 _AD0CM1	=	0x00eb
                           0000EC   895 G$ADBUSY$0$0 == 0x00ec
                           0000EC   896 _ADBUSY	=	0x00ec
                           0000EC   897 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   898 _AD0BUSY	=	0x00ec
                           0000ED   899 G$ADCINT$0$0 == 0x00ed
                           0000ED   900 _ADCINT	=	0x00ed
                           0000ED   901 G$AD0INT$0$0 == 0x00ed
                           0000ED   902 _AD0INT	=	0x00ed
                           0000EE   903 G$ADCTM$0$0 == 0x00ee
                           0000EE   904 _ADCTM	=	0x00ee
                           0000EE   905 G$AD0TM$0$0 == 0x00ee
                           0000EE   906 _AD0TM	=	0x00ee
                           0000EF   907 G$ADCEN$0$0 == 0x00ef
                           0000EF   908 _ADCEN	=	0x00ef
                           0000EF   909 G$AD0EN$0$0 == 0x00ef
                           0000EF   910 _AD0EN	=	0x00ef
                           0000F8   911 G$SPIEN$0$0 == 0x00f8
                           0000F8   912 _SPIEN	=	0x00f8
                           0000F9   913 G$MSTEN$0$0 == 0x00f9
                           0000F9   914 _MSTEN	=	0x00f9
                           0000FA   915 G$SLVSEL$0$0 == 0x00fa
                           0000FA   916 _SLVSEL	=	0x00fa
                           0000FB   917 G$TXBSY$0$0 == 0x00fb
                           0000FB   918 _TXBSY	=	0x00fb
                           0000FC   919 G$RXOVRN$0$0 == 0x00fc
                           0000FC   920 _RXOVRN	=	0x00fc
                           0000FD   921 G$MODF$0$0 == 0x00fd
                           0000FD   922 _MODF	=	0x00fd
                           0000FE   923 G$WCOL$0$0 == 0x00fe
                           0000FE   924 _WCOL	=	0x00fe
                           0000FF   925 G$SPIF$0$0 == 0x00ff
                           0000FF   926 _SPIF	=	0x00ff
                           0000C7   927 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   928 _BUS_BUSY	=	0x00c7
                           0000C6   929 G$BUS_EN$0$0 == 0x00c6
                           0000C6   930 _BUS_EN	=	0x00c6
                           0000C5   931 G$BUS_START$0$0 == 0x00c5
                           0000C5   932 _BUS_START	=	0x00c5
                           0000C4   933 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   934 _BUS_STOP	=	0x00c4
                           0000C3   935 G$BUS_INT$0$0 == 0x00c3
                           0000C3   936 _BUS_INT	=	0x00c3
                           0000C2   937 G$BUS_AA$0$0 == 0x00c2
                           0000C2   938 _BUS_AA	=	0x00c2
                           0000C1   939 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   940 _BUS_FTE	=	0x00c1
                           0000C0   941 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   942 _BUS_TOE	=	0x00c0
                           000083   943 G$BUS_SCL$0$0 == 0x0083
                           000083   944 _BUS_SCL	=	0x0083
                           0000B7   945 G$SS$0$0 == 0x00b7
                           0000B7   946 _SS	=	0x00b7
                                    947 ;--------------------------------------------------------
                                    948 ; overlayable register banks
                                    949 ;--------------------------------------------------------
                                    950 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        951 	.ds 8
                                    952 ;--------------------------------------------------------
                                    953 ; internal ram data
                                    954 ;--------------------------------------------------------
                                    955 	.area DSEG    (DATA)
                           000000   956 G$Data2$0$0==.
      000000                        957 _Data2::
      000000                        958 	.ds 3
                           000003   959 Llab4.aligned_alloc$size$1$39==.
      000003                        960 _aligned_alloc_PARM_2:
      000003                        961 	.ds 2
                           000005   962 Llab4.lcd_clear$NumBytes$1$85==.
      000005                        963 _lcd_clear_NumBytes_1_85:
      000005                        964 	.ds 1
                           000006   965 Llab4.lcd_clear$Cmd$1$85==.
      000006                        966 _lcd_clear_Cmd_1_85:
      000006                        967 	.ds 2
                           000008   968 Llab4.read_keypad$Data$1$86==.
      000008                        969 _read_keypad_Data_1_86:
      000008                        970 	.ds 2
                           00000A   971 Llab4.i2c_write_data$start_reg$1$105==.
      00000A                        972 _i2c_write_data_PARM_2:
      00000A                        973 	.ds 1
                           00000B   974 Llab4.i2c_write_data$buffer$1$105==.
      00000B                        975 _i2c_write_data_PARM_3:
      00000B                        976 	.ds 3
                           00000E   977 Llab4.i2c_write_data$num_bytes$1$105==.
      00000E                        978 _i2c_write_data_PARM_4:
      00000E                        979 	.ds 1
                           00000F   980 Llab4.i2c_read_data$start_reg$1$107==.
      00000F                        981 _i2c_read_data_PARM_2:
      00000F                        982 	.ds 1
                           000010   983 Llab4.i2c_read_data$buffer$1$107==.
      000010                        984 _i2c_read_data_PARM_3:
      000010                        985 	.ds 3
                           000013   986 Llab4.i2c_read_data$num_bytes$1$107==.
      000013                        987 _i2c_read_data_PARM_4:
      000013                        988 	.ds 1
                           000014   989 G$PCA_start$0$0==.
      000014                        990 _PCA_start::
      000014                        991 	.ds 2
                           000016   992 G$ccount$0$0==.
      000016                        993 _ccount::
      000016                        994 	.ds 1
                           000017   995 G$rcount$0$0==.
      000017                        996 _rcount::
      000017                        997 	.ds 1
                           000018   998 G$heading$0$0==.
      000018                        999 _heading::
      000018                       1000 	.ds 2
                           00001A  1001 G$desired$0$0==.
      00001A                       1002 _desired::
      00001A                       1003 	.ds 2
                           00001C  1004 G$rangervalue$0$0==.
      00001C                       1005 _rangervalue::
      00001C                       1006 	.ds 2
                           00001E  1007 G$print_count$0$0==.
      00001E                       1008 _print_count::
      00001E                       1009 	.ds 2
                           000020  1010 G$input$0$0==.
      000020                       1011 _input::
      000020                       1012 	.ds 1
                           000021  1013 G$Data$0$0==.
      000021                       1014 _Data::
      000021                       1015 	.ds 2
                           000023  1016 G$adc$0$0==.
      000023                       1017 _adc::
      000023                       1018 	.ds 1
                           000024  1019 G$loopcontrol$0$0==.
      000024                       1020 _loopcontrol::
      000024                       1021 	.ds 1
                           000025  1022 G$PW_CENTER$0$0==.
      000025                       1023 _PW_CENTER::
      000025                       1024 	.ds 2
                           000027  1025 G$PW_RIGHT$0$0==.
      000027                       1026 _PW_RIGHT::
      000027                       1027 	.ds 2
                           000029  1028 G$PW_LEFT$0$0==.
      000029                       1029 _PW_LEFT::
      000029                       1030 	.ds 2
                           00002B  1031 G$SERVO_PW$0$0==.
      00002B                       1032 _SERVO_PW::
      00002B                       1033 	.ds 2
                           00002D  1034 G$error$0$0==.
      00002D                       1035 _error::
      00002D                       1036 	.ds 2
                           00002F  1037 G$k$0$0==.
      00002F                       1038 _k::
      00002F                       1039 	.ds 4
                           000033  1040 G$temp$0$0==.
      000033                       1041 _temp::
      000033                       1042 	.ds 2
                           000035  1043 G$PW_MIN$0$0==.
      000035                       1044 _PW_MIN::
      000035                       1045 	.ds 2
                           000037  1046 G$PW_MAX$0$0==.
      000037                       1047 _PW_MAX::
      000037                       1048 	.ds 2
                           000039  1049 G$PW_NEUT$0$0==.
      000039                       1050 _PW_NEUT::
      000039                       1051 	.ds 2
                           00003B  1052 G$MOTOR_PW$0$0==.
      00003B                       1053 _MOTOR_PW::
      00003B                       1054 	.ds 2
                           00003D  1055 G$obstacle$0$0==.
      00003D                       1056 _obstacle::
      00003D                       1057 	.ds 1
                           00003E  1058 G$stop$0$0==.
      00003E                       1059 _stop::
      00003E                       1060 	.ds 1
                                   1061 ;--------------------------------------------------------
                                   1062 ; overlayable items in internal ram 
                                   1063 ;--------------------------------------------------------
                                   1064 	.area	OSEG    (OVR,DATA)
                                   1065 	.area	OSEG    (OVR,DATA)
                                   1066 	.area	OSEG    (OVR,DATA)
                                   1067 	.area	OSEG    (OVR,DATA)
                                   1068 	.area	OSEG    (OVR,DATA)
                                   1069 	.area	OSEG    (OVR,DATA)
                                   1070 	.area	OSEG    (OVR,DATA)
                                   1071 ;--------------------------------------------------------
                                   1072 ; Stack segment in internal ram 
                                   1073 ;--------------------------------------------------------
                                   1074 	.area	SSEG
      000000                       1075 __start__stack:
      000000                       1076 	.ds	1
                                   1077 
                                   1078 ;--------------------------------------------------------
                                   1079 ; indirectly addressable internal ram data
                                   1080 ;--------------------------------------------------------
                                   1081 	.area ISEG    (DATA)
                                   1082 ;--------------------------------------------------------
                                   1083 ; absolute internal ram data
                                   1084 ;--------------------------------------------------------
                                   1085 	.area IABS    (ABS,DATA)
                                   1086 	.area IABS    (ABS,DATA)
                                   1087 ;--------------------------------------------------------
                                   1088 ; bit data
                                   1089 ;--------------------------------------------------------
                                   1090 	.area BSEG    (BIT)
                                   1091 ;--------------------------------------------------------
                                   1092 ; paged external ram data
                                   1093 ;--------------------------------------------------------
                                   1094 	.area PSEG    (PAG,XDATA)
                                   1095 ;--------------------------------------------------------
                                   1096 ; external ram data
                                   1097 ;--------------------------------------------------------
                                   1098 	.area XSEG    (XDATA)
                           000000  1099 Llab4.lcd_print$text$1$81==.
      000000                       1100 _lcd_print_text_1_81:
      000000                       1101 	.ds 80
                                   1102 ;--------------------------------------------------------
                                   1103 ; absolute external ram data
                                   1104 ;--------------------------------------------------------
                                   1105 	.area XABS    (ABS,XDATA)
                                   1106 ;--------------------------------------------------------
                                   1107 ; external initialized ram data
                                   1108 ;--------------------------------------------------------
                                   1109 	.area XISEG   (XDATA)
                                   1110 	.area HOME    (CODE)
                                   1111 	.area GSINIT0 (CODE)
                                   1112 	.area GSINIT1 (CODE)
                                   1113 	.area GSINIT2 (CODE)
                                   1114 	.area GSINIT3 (CODE)
                                   1115 	.area GSINIT4 (CODE)
                                   1116 	.area GSINIT5 (CODE)
                                   1117 	.area GSINIT  (CODE)
                                   1118 	.area GSFINAL (CODE)
                                   1119 	.area CSEG    (CODE)
                                   1120 ;--------------------------------------------------------
                                   1121 ; interrupt vector 
                                   1122 ;--------------------------------------------------------
                                   1123 	.area HOME    (CODE)
      000000                       1124 __interrupt_vect:
      000000 02r00r00         [24] 1125 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1126 	reti
      000004                       1127 	.ds	7
      00000B 32               [24] 1128 	reti
      00000C                       1129 	.ds	7
      000013 32               [24] 1130 	reti
      000014                       1131 	.ds	7
      00001B 32               [24] 1132 	reti
      00001C                       1133 	.ds	7
      000023 32               [24] 1134 	reti
      000024                       1135 	.ds	7
      00002B 32               [24] 1136 	reti
      00002C                       1137 	.ds	7
      000033 32               [24] 1138 	reti
      000034                       1139 	.ds	7
      00003B 32               [24] 1140 	reti
      00003C                       1141 	.ds	7
      000043 32               [24] 1142 	reti
      000044                       1143 	.ds	7
      00004B 02r07rB0         [24] 1144 	ljmp	_PCA_ISR
                                   1145 ;--------------------------------------------------------
                                   1146 ; global & static initialisations
                                   1147 ;--------------------------------------------------------
                                   1148 	.area HOME    (CODE)
                                   1149 	.area GSINIT  (CODE)
                                   1150 	.area GSFINAL (CODE)
                                   1151 	.area GSINIT  (CODE)
                                   1152 	.globl __sdcc_gsinit_startup
                                   1153 	.globl __sdcc_program_startup
                                   1154 	.globl __start__stack
                                   1155 	.globl __mcs51_genXINIT
                                   1156 	.globl __mcs51_genXRAMCLEAR
                                   1157 	.globl __mcs51_genRAMCLEAR
                           000000  1158 	C$lab4.c$29$1$164 ==.
                                   1159 ;	C:\SiLabs\LITEC\Lab4\lab4.c:29: unsigned int PCA_start = 28671;
      000000 75*14 FF         [24] 1160 	mov	_PCA_start,#0xff
      000003 75*15 6F         [24] 1161 	mov	(_PCA_start + 1),#0x6f
                           000006  1162 	C$lab4.c$30$1$164 ==.
                                   1163 ;	C:\SiLabs\LITEC\Lab4\lab4.c:30: unsigned char ccount = 0;//counter for the compass
      000006 75*16 00         [24] 1164 	mov	_ccount,#0x00
                           000009  1165 	C$lab4.c$31$1$164 ==.
                                   1166 ;	C:\SiLabs\LITEC\Lab4\lab4.c:31: unsigned char rcount = 0;//counter for the ranger
      000009 75*17 00         [24] 1167 	mov	_rcount,#0x00
                           00000C  1168 	C$lab4.c$32$1$164 ==.
                                   1169 ;	C:\SiLabs\LITEC\Lab4\lab4.c:32: unsigned int heading = 2100;//actual heading, updated from compass
      00000C 75*18 34         [24] 1170 	mov	_heading,#0x34
      00000F 75*19 08         [24] 1171 	mov	(_heading + 1),#0x08
                           000012  1172 	C$lab4.c$33$1$164 ==.
                                   1173 ;	C:\SiLabs\LITEC\Lab4\lab4.c:33: unsigned int desired = 2100;//desired heading, set by user
      000012 75*1A 34         [24] 1174 	mov	_desired,#0x34
      000015 75*1B 08         [24] 1175 	mov	(_desired + 1),#0x08
                           000018  1176 	C$lab4.c$34$1$164 ==.
                                   1177 ;	C:\SiLabs\LITEC\Lab4\lab4.c:34: unsigned int rangervalue = 45;//holds ranger reading
      000018 75*1C 2D         [24] 1178 	mov	_rangervalue,#0x2d
      00001B 75*1D 00         [24] 1179 	mov	(_rangervalue + 1),#0x00
                           00001E  1180 	C$lab4.c$35$1$164 ==.
                                   1181 ;	C:\SiLabs\LITEC\Lab4\lab4.c:35: unsigned int print_count = 0;//counter for printing readings
      00001E E4               [12] 1182 	clr	a
      00001F F5*1E            [12] 1183 	mov	_print_count,a
      000021 F5*1F            [12] 1184 	mov	(_print_count + 1),a
                           000023  1185 	C$lab4.c$38$1$164 ==.
                                   1186 ;	C:\SiLabs\LITEC\Lab4\lab4.c:38: unsigned char adc=0;//holds potentiometer data
                                   1187 ;	1-genFromRTrack replaced	mov	_adc,#0x00
      000023 F5*23            [12] 1188 	mov	_adc,a
                           000025  1189 	C$lab4.c$39$1$164 ==.
                                   1190 ;	C:\SiLabs\LITEC\Lab4\lab4.c:39: unsigned char loopcontrol=0;//controls loops, used instead of break statements
                                   1191 ;	1-genFromRTrack replaced	mov	_loopcontrol,#0x00
      000025 F5*24            [12] 1192 	mov	_loopcontrol,a
                           000027  1193 	C$lab4.c$42$1$164 ==.
                                   1194 ;	C:\SiLabs\LITEC\Lab4\lab4.c:42: unsigned int PW_CENTER = 2764;
      000027 75*25 CC         [24] 1195 	mov	_PW_CENTER,#0xcc
      00002A 75*26 0A         [24] 1196 	mov	(_PW_CENTER + 1),#0x0a
                           00002D  1197 	C$lab4.c$43$1$164 ==.
                                   1198 ;	C:\SiLabs\LITEC\Lab4\lab4.c:43: unsigned int PW_RIGHT = 3474;
      00002D 75*27 92         [24] 1199 	mov	_PW_RIGHT,#0x92
      000030 75*28 0D         [24] 1200 	mov	(_PW_RIGHT + 1),#0x0d
                           000033  1201 	C$lab4.c$44$1$164 ==.
                                   1202 ;	C:\SiLabs\LITEC\Lab4\lab4.c:44: unsigned int PW_LEFT = 2384;
      000033 75*29 50         [24] 1203 	mov	_PW_LEFT,#0x50
      000036 75*2A 09         [24] 1204 	mov	(_PW_LEFT + 1),#0x09
                           000039  1205 	C$lab4.c$45$1$164 ==.
                                   1206 ;	C:\SiLabs\LITEC\Lab4\lab4.c:45: unsigned int SERVO_PW = 2764;
      000039 75*2B CC         [24] 1207 	mov	_SERVO_PW,#0xcc
      00003C 75*2C 0A         [24] 1208 	mov	(_SERVO_PW + 1),#0x0a
                           00003F  1209 	C$lab4.c$46$1$164 ==.
                                   1210 ;	C:\SiLabs\LITEC\Lab4\lab4.c:46: int error=0;
      00003F F5*2D            [12] 1211 	mov	_error,a
      000041 F5*2E            [12] 1212 	mov	(_error + 1),a
                           000043  1213 	C$lab4.c$47$1$164 ==.
                                   1214 ;	C:\SiLabs\LITEC\Lab4\lab4.c:47: float k=2;//gain, set by potentiometer
      000043 F5*2F            [12] 1215 	mov	_k,a
      000045 F5*30            [12] 1216 	mov	(_k + 1),a
      000047 F5*31            [12] 1217 	mov	(_k + 2),a
      000049 75*32 40         [24] 1218 	mov	(_k + 3),#0x40
                           00004C  1219 	C$lab4.c$48$1$164 ==.
                                   1220 ;	C:\SiLabs\LITEC\Lab4\lab4.c:48: unsigned int temp=0;
      00004C F5*33            [12] 1221 	mov	_temp,a
      00004E F5*34            [12] 1222 	mov	(_temp + 1),a
                           000050  1223 	C$lab4.c$51$1$164 ==.
                                   1224 ;	C:\SiLabs\LITEC\Lab4\lab4.c:51: unsigned int PW_MIN = 2027;      //1.1 ms  ((MAX-PCA_Start)/20) *(1.1)
      000050 75*35 EB         [24] 1225 	mov	_PW_MIN,#0xeb
      000053 75*36 07         [24] 1226 	mov	(_PW_MIN + 1),#0x07
                           000056  1227 	C$lab4.c$52$1$164 ==.
                                   1228 ;	C:\SiLabs\LITEC\Lab4\lab4.c:52: unsigned int PW_MAX = 3502;      //1.9 
      000056 75*37 AE         [24] 1229 	mov	_PW_MAX,#0xae
      000059 75*38 0D         [24] 1230 	mov	(_PW_MAX + 1),#0x0d
                           00005C  1231 	C$lab4.c$53$1$164 ==.
                                   1232 ;	C:\SiLabs\LITEC\Lab4\lab4.c:53: unsigned int PW_NEUT = 2764;
      00005C 75*39 CC         [24] 1233 	mov	_PW_NEUT,#0xcc
      00005F 75*3A 0A         [24] 1234 	mov	(_PW_NEUT + 1),#0x0a
                           000062  1235 	C$lab4.c$54$1$164 ==.
                                   1236 ;	C:\SiLabs\LITEC\Lab4\lab4.c:54: unsigned int MOTOR_PW = 2764;
      000062 75*3B CC         [24] 1237 	mov	_MOTOR_PW,#0xcc
      000065 75*3C 0A         [24] 1238 	mov	(_MOTOR_PW + 1),#0x0a
                           000068  1239 	C$lab4.c$55$1$164 ==.
                                   1240 ;	C:\SiLabs\LITEC\Lab4\lab4.c:55: unsigned char obstacle=0;
                                   1241 ;	1-genFromRTrack replaced	mov	_obstacle,#0x00
      000068 F5*3D            [12] 1242 	mov	_obstacle,a
                           00006A  1243 	C$lab4.c$56$1$164 ==.
                                   1244 ;	C:\SiLabs\LITEC\Lab4\lab4.c:56: unsigned char stop=0;
                                   1245 ;	1-genFromRTrack replaced	mov	_stop,#0x00
      00006A F5*3E            [12] 1246 	mov	_stop,a
                                   1247 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1248 	ljmp	__sdcc_program_startup
                                   1249 ;--------------------------------------------------------
                                   1250 ; Home
                                   1251 ;--------------------------------------------------------
                                   1252 	.area HOME    (CODE)
                                   1253 	.area HOME    (CODE)
      00004E                       1254 __sdcc_program_startup:
      00004E 02r05r02         [24] 1255 	ljmp	_main
                                   1256 ;	return from main will return to caller
                                   1257 ;--------------------------------------------------------
                                   1258 ; code
                                   1259 ;--------------------------------------------------------
                                   1260 	.area CSEG    (CODE)
                                   1261 ;------------------------------------------------------------
                                   1262 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1263 ;------------------------------------------------------------
                                   1264 ;i                         Allocated to registers r6 r7 
                                   1265 ;------------------------------------------------------------
                           000000  1266 	G$SYSCLK_Init$0$0 ==.
                           000000  1267 	C$c8051_SDCC.h$42$0$0 ==.
                                   1268 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:42: void SYSCLK_Init(void)
                                   1269 ;	-----------------------------------------
                                   1270 ;	 function SYSCLK_Init
                                   1271 ;	-----------------------------------------
      000000                       1272 _SYSCLK_Init:
                           000007  1273 	ar7 = 0x07
                           000006  1274 	ar6 = 0x06
                           000005  1275 	ar5 = 0x05
                           000004  1276 	ar4 = 0x04
                           000003  1277 	ar3 = 0x03
                           000002  1278 	ar2 = 0x02
                           000001  1279 	ar1 = 0x01
                           000000  1280 	ar0 = 0x00
                           000000  1281 	C$c8051_SDCC.h$46$1$2 ==.
                                   1282 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:46: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1283 	mov	_OSCXCN,#0x67
                           000003  1284 	C$c8051_SDCC.h$49$1$2 ==.
                                   1285 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:49: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1286 	mov	r6,#0x00
      000005 7F 01            [12] 1287 	mov	r7,#0x01
      000007                       1288 00107$:
      000007 EE               [12] 1289 	mov	a,r6
      000008 24 FF            [12] 1290 	add	a,#0xff
      00000A FC               [12] 1291 	mov	r4,a
      00000B EF               [12] 1292 	mov	a,r7
      00000C 34 FF            [12] 1293 	addc	a,#0xff
      00000E FD               [12] 1294 	mov	r5,a
      00000F 8C 06            [24] 1295 	mov	ar6,r4
      000011 8D 07            [24] 1296 	mov	ar7,r5
      000013 EC               [12] 1297 	mov	a,r4
      000014 4D               [12] 1298 	orl	a,r5
      000015 70 F0            [24] 1299 	jnz	00107$
                           000017  1300 	C$c8051_SDCC.h$51$1$2 ==.
                                   1301 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:51: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000017                       1302 00102$:
      000017 E5 B1            [12] 1303 	mov	a,_OSCXCN
      000019 30 E7 FB         [24] 1304 	jnb	acc.7,00102$
                           00001C  1305 	C$c8051_SDCC.h$53$1$2 ==.
                                   1306 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:53: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      00001C 75 B2 88         [24] 1307 	mov	_OSCICN,#0x88
                           00001F  1308 	C$c8051_SDCC.h$56$1$2 ==.
                           00001F  1309 	XG$SYSCLK_Init$0$0 ==.
      00001F 22               [24] 1310 	ret
                                   1311 ;------------------------------------------------------------
                                   1312 ;Allocation info for local variables in function 'UART0_Init'
                                   1313 ;------------------------------------------------------------
                           000020  1314 	G$UART0_Init$0$0 ==.
                           000020  1315 	C$c8051_SDCC.h$64$1$2 ==.
                                   1316 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:64: void UART0_Init(void)
                                   1317 ;	-----------------------------------------
                                   1318 ;	 function UART0_Init
                                   1319 ;	-----------------------------------------
      000020                       1320 _UART0_Init:
                           000020  1321 	C$c8051_SDCC.h$66$1$4 ==.
                                   1322 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000020 75 98 50         [24] 1323 	mov	_SCON0,#0x50
                           000023  1324 	C$c8051_SDCC.h$67$1$4 ==.
                                   1325 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:67: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      000023 75 89 20         [24] 1326 	mov	_TMOD,#0x20
                           000026  1327 	C$c8051_SDCC.h$68$1$4 ==.
                                   1328 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:68: TH1    = 0xFF&-(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      000026 75 8D DC         [24] 1329 	mov	_TH1,#0xdc
                           000029  1330 	C$c8051_SDCC.h$69$1$4 ==.
                                   1331 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: TR1    = 1;                         // start Timer1
      000029 D2 8E            [12] 1332 	setb	_TR1
                           00002B  1333 	C$c8051_SDCC.h$70$1$4 ==.
                                   1334 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:70: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      00002B 43 8E 10         [24] 1335 	orl	_CKCON,#0x10
                           00002E  1336 	C$c8051_SDCC.h$71$1$4 ==.
                                   1337 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      00002E 43 87 80         [24] 1338 	orl	_PCON,#0x80
                           000031  1339 	C$c8051_SDCC.h$73$1$4 ==.
                                   1340 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: TI0    = 1;                         // Indicate TX0 ready
      000031 D2 99            [12] 1341 	setb	_TI0
                           000033  1342 	C$c8051_SDCC.h$74$1$4 ==.
                                   1343 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:74: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      000033 43 A4 01         [24] 1344 	orl	_P0MDOUT,#0x01
                           000036  1345 	C$c8051_SDCC.h$75$1$4 ==.
                           000036  1346 	XG$UART0_Init$0$0 ==.
      000036 22               [24] 1347 	ret
                                   1348 ;------------------------------------------------------------
                                   1349 ;Allocation info for local variables in function 'Sys_Init'
                                   1350 ;------------------------------------------------------------
                           000037  1351 	G$Sys_Init$0$0 ==.
                           000037  1352 	C$c8051_SDCC.h$83$1$4 ==.
                                   1353 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:83: void Sys_Init(void)
                                   1354 ;	-----------------------------------------
                                   1355 ;	 function Sys_Init
                                   1356 ;	-----------------------------------------
      000037                       1357 _Sys_Init:
                           000037  1358 	C$c8051_SDCC.h$85$1$6 ==.
                                   1359 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:85: WDTCN = 0xde;			// disable watchdog timer
      000037 75 FF DE         [24] 1360 	mov	_WDTCN,#0xde
                           00003A  1361 	C$c8051_SDCC.h$86$1$6 ==.
                                   1362 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: WDTCN = 0xad;
      00003A 75 FF AD         [24] 1363 	mov	_WDTCN,#0xad
                           00003D  1364 	C$c8051_SDCC.h$88$1$6 ==.
                                   1365 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: SYSCLK_Init();			// initialize oscillator
      00003D 12r00r00         [24] 1366 	lcall	_SYSCLK_Init
                           000040  1367 	C$c8051_SDCC.h$89$1$6 ==.
                                   1368 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: UART0_Init();			// initialize UART0
      000040 12r00r20         [24] 1369 	lcall	_UART0_Init
                           000043  1370 	C$c8051_SDCC.h$91$1$6 ==.
                                   1371 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: XBR0 |= 0x04;
      000043 43 E1 04         [24] 1372 	orl	_XBR0,#0x04
                           000046  1373 	C$c8051_SDCC.h$92$1$6 ==.
                                   1374 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:92: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      000046 43 E3 40         [24] 1375 	orl	_XBR2,#0x40
                           000049  1376 	C$c8051_SDCC.h$93$1$6 ==.
                           000049  1377 	XG$Sys_Init$0$0 ==.
      000049 22               [24] 1378 	ret
                                   1379 ;------------------------------------------------------------
                                   1380 ;Allocation info for local variables in function 'putchar'
                                   1381 ;------------------------------------------------------------
                                   1382 ;c                         Allocated to registers r7 
                                   1383 ;------------------------------------------------------------
                           00004A  1384 	G$putchar$0$0 ==.
                           00004A  1385 	C$c8051_SDCC.h$98$1$6 ==.
                                   1386 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:98: void putchar(char c)
                                   1387 ;	-----------------------------------------
                                   1388 ;	 function putchar
                                   1389 ;	-----------------------------------------
      00004A                       1390 _putchar:
      00004A AF 82            [24] 1391 	mov	r7,dpl
                           00004C  1392 	C$c8051_SDCC.h$100$1$8 ==.
                                   1393 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:100: while (!TI0); 
      00004C                       1394 00101$:
                           00004C  1395 	C$c8051_SDCC.h$101$1$8 ==.
                                   1396 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:101: TI0 = 0;
      00004C 10 99 02         [24] 1397 	jbc	_TI0,00112$
      00004F 80 FB            [24] 1398 	sjmp	00101$
      000051                       1399 00112$:
                           000051  1400 	C$c8051_SDCC.h$102$1$8 ==.
                                   1401 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:102: SBUF0 = c;
      000051 8F 99            [24] 1402 	mov	_SBUF0,r7
                           000053  1403 	C$c8051_SDCC.h$103$1$8 ==.
                           000053  1404 	XG$putchar$0$0 ==.
      000053 22               [24] 1405 	ret
                                   1406 ;------------------------------------------------------------
                                   1407 ;Allocation info for local variables in function 'getchar'
                                   1408 ;------------------------------------------------------------
                                   1409 ;c                         Allocated to registers 
                                   1410 ;------------------------------------------------------------
                           000054  1411 	G$getchar$0$0 ==.
                           000054  1412 	C$c8051_SDCC.h$108$1$8 ==.
                                   1413 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: char getchar(void)
                                   1414 ;	-----------------------------------------
                                   1415 ;	 function getchar
                                   1416 ;	-----------------------------------------
      000054                       1417 _getchar:
                           000054  1418 	C$c8051_SDCC.h$111$1$10 ==.
                                   1419 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: while (!RI0);
      000054                       1420 00101$:
                           000054  1421 	C$c8051_SDCC.h$112$1$10 ==.
                                   1422 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: RI0 = 0;
      000054 10 98 02         [24] 1423 	jbc	_RI0,00112$
      000057 80 FB            [24] 1424 	sjmp	00101$
      000059                       1425 00112$:
                           000059  1426 	C$c8051_SDCC.h$113$1$10 ==.
                                   1427 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:113: c = SBUF0;
      000059 85 99 82         [24] 1428 	mov	dpl,_SBUF0
                           00005C  1429 	C$c8051_SDCC.h$114$1$10 ==.
                                   1430 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:114: putchar(c);                          // echo to terminal
      00005C 12r00r4A         [24] 1431 	lcall	_putchar
                           00005F  1432 	C$c8051_SDCC.h$115$1$10 ==.
                                   1433 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:115: return SBUF0;
      00005F 85 99 82         [24] 1434 	mov	dpl,_SBUF0
                           000062  1435 	C$c8051_SDCC.h$116$1$10 ==.
                           000062  1436 	XG$getchar$0$0 ==.
      000062 22               [24] 1437 	ret
                                   1438 ;------------------------------------------------------------
                                   1439 ;Allocation info for local variables in function 'getchar_nw'
                                   1440 ;------------------------------------------------------------
                                   1441 ;c                         Allocated to registers 
                                   1442 ;------------------------------------------------------------
                           000063  1443 	G$getchar_nw$0$0 ==.
                           000063  1444 	C$c8051_SDCC.h$121$1$10 ==.
                                   1445 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:121: char getchar_nw(void)
                                   1446 ;	-----------------------------------------
                                   1447 ;	 function getchar_nw
                                   1448 ;	-----------------------------------------
      000063                       1449 _getchar_nw:
                           000063  1450 	C$c8051_SDCC.h$124$1$12 ==.
                                   1451 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:124: if (!RI0) return 0xFF;
      000063 20 98 05         [24] 1452 	jb	_RI0,00102$
      000066 75 82 FF         [24] 1453 	mov	dpl,#0xff
      000069 80 0B            [24] 1454 	sjmp	00104$
      00006B                       1455 00102$:
                           00006B  1456 	C$c8051_SDCC.h$127$2$13 ==.
                                   1457 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:127: RI0 = 0;
      00006B C2 98            [12] 1458 	clr	_RI0
                           00006D  1459 	C$c8051_SDCC.h$128$2$13 ==.
                                   1460 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:128: c = SBUF0;
      00006D 85 99 82         [24] 1461 	mov	dpl,_SBUF0
                           000070  1462 	C$c8051_SDCC.h$129$2$13 ==.
                                   1463 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:129: putchar(c);                          // echo to terminal
      000070 12r00r4A         [24] 1464 	lcall	_putchar
                           000073  1465 	C$c8051_SDCC.h$130$2$13 ==.
                                   1466 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:130: return SBUF0;
      000073 85 99 82         [24] 1467 	mov	dpl,_SBUF0
      000076                       1468 00104$:
                           000076  1469 	C$c8051_SDCC.h$132$1$12 ==.
                           000076  1470 	XG$getchar_nw$0$0 ==.
      000076 22               [24] 1471 	ret
                                   1472 ;------------------------------------------------------------
                                   1473 ;Allocation info for local variables in function 'lcd_print'
                                   1474 ;------------------------------------------------------------
                                   1475 ;fmt                       Allocated to stack - _bp -5
                                   1476 ;len                       Allocated to registers r6 
                                   1477 ;i                         Allocated to registers 
                                   1478 ;ap                        Allocated to registers 
                                   1479 ;text                      Allocated with name '_lcd_print_text_1_81'
                                   1480 ;------------------------------------------------------------
                           000077  1481 	G$lcd_print$0$0 ==.
                           000077  1482 	C$i2c.h$84$1$12 ==.
                                   1483 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:84: void lcd_print(const char *fmt, ...)
                                   1484 ;	-----------------------------------------
                                   1485 ;	 function lcd_print
                                   1486 ;	-----------------------------------------
      000077                       1487 _lcd_print:
      000077 C0*00            [24] 1488 	push	_bp
      000079 85 81*00         [24] 1489 	mov	_bp,sp
                           00007C  1490 	C$i2c.h$90$1$81 ==.
                                   1491 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:90: if ( strlen(fmt) <= 0 ) return;         //If there is no data to print, return
      00007C E5*00            [12] 1492 	mov	a,_bp
      00007E 24 FB            [12] 1493 	add	a,#0xfb
      000080 F8               [12] 1494 	mov	r0,a
      000081 86 82            [24] 1495 	mov	dpl,@r0
      000083 08               [12] 1496 	inc	r0
      000084 86 83            [24] 1497 	mov	dph,@r0
      000086 08               [12] 1498 	inc	r0
      000087 86 F0            [24] 1499 	mov	b,@r0
      000089 12r00r00         [24] 1500 	lcall	_strlen
      00008C E5 82            [12] 1501 	mov	a,dpl
      00008E 85 83 F0         [24] 1502 	mov	b,dph
      000091 45 F0            [12] 1503 	orl	a,b
      000093 70 02            [24] 1504 	jnz	00102$
      000095 80 62            [24] 1505 	sjmp	00109$
      000097                       1506 00102$:
                           000097  1507 	C$i2c.h$92$2$82 ==.
                                   1508 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:92: va_start(ap, fmt);
      000097 E5*00            [12] 1509 	mov	a,_bp
      000099 24 FB            [12] 1510 	add	a,#0xfb
      00009B FF               [12] 1511 	mov	r7,a
      00009C 8F*00            [24] 1512 	mov	_vsprintf_PARM_3,r7
                           00009E  1513 	C$i2c.h$93$1$81 ==.
                                   1514 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:93: vsprintf(text, fmt, ap);
      00009E E5*00            [12] 1515 	mov	a,_bp
      0000A0 24 FB            [12] 1516 	add	a,#0xfb
      0000A2 F8               [12] 1517 	mov	r0,a
      0000A3 86*00            [24] 1518 	mov	_vsprintf_PARM_2,@r0
      0000A5 08               [12] 1519 	inc	r0
      0000A6 86*01            [24] 1520 	mov	(_vsprintf_PARM_2 + 1),@r0
      0000A8 08               [12] 1521 	inc	r0
      0000A9 86*02            [24] 1522 	mov	(_vsprintf_PARM_2 + 2),@r0
      0000AB 90r00r00         [24] 1523 	mov	dptr,#_lcd_print_text_1_81
      0000AE 75 F0 00         [24] 1524 	mov	b,#0x00
      0000B1 12r00r00         [24] 1525 	lcall	_vsprintf
                           0000B4  1526 	C$i2c.h$96$1$81 ==.
                                   1527 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:96: len = strlen(text);
      0000B4 90r00r00         [24] 1528 	mov	dptr,#_lcd_print_text_1_81
      0000B7 75 F0 00         [24] 1529 	mov	b,#0x00
      0000BA 12r00r00         [24] 1530 	lcall	_strlen
      0000BD AE 82            [24] 1531 	mov	r6,dpl
                           0000BF  1532 	C$i2c.h$97$1$81 ==.
                                   1533 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:97: for(i=0; i<len; i++)
      0000BF 7F 00            [12] 1534 	mov	r7,#0x00
      0000C1                       1535 00107$:
      0000C1 C3               [12] 1536 	clr	c
      0000C2 EF               [12] 1537 	mov	a,r7
      0000C3 9E               [12] 1538 	subb	a,r6
      0000C4 50 1F            [24] 1539 	jnc	00105$
                           0000C6  1540 	C$i2c.h$99$2$84 ==.
                                   1541 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:99: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000C6 EF               [12] 1542 	mov	a,r7
      0000C7 24r00            [12] 1543 	add	a,#_lcd_print_text_1_81
      0000C9 F5 82            [12] 1544 	mov	dpl,a
      0000CB E4               [12] 1545 	clr	a
      0000CC 34s00            [12] 1546 	addc	a,#(_lcd_print_text_1_81 >> 8)
      0000CE F5 83            [12] 1547 	mov	dph,a
      0000D0 E0               [24] 1548 	movx	a,@dptr
      0000D1 FD               [12] 1549 	mov	r5,a
      0000D2 BD 0A 0D         [24] 1550 	cjne	r5,#0x0a,00108$
      0000D5 EF               [12] 1551 	mov	a,r7
      0000D6 24r00            [12] 1552 	add	a,#_lcd_print_text_1_81
      0000D8 F5 82            [12] 1553 	mov	dpl,a
      0000DA E4               [12] 1554 	clr	a
      0000DB 34s00            [12] 1555 	addc	a,#(_lcd_print_text_1_81 >> 8)
      0000DD F5 83            [12] 1556 	mov	dph,a
      0000DF 74 0D            [12] 1557 	mov	a,#0x0d
      0000E1 F0               [24] 1558 	movx	@dptr,a
      0000E2                       1559 00108$:
                           0000E2  1560 	C$i2c.h$97$1$81 ==.
                                   1561 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:97: for(i=0; i<len; i++)
      0000E2 0F               [12] 1562 	inc	r7
      0000E3 80 DC            [24] 1563 	sjmp	00107$
      0000E5                       1564 00105$:
                           0000E5  1565 	C$i2c.h$102$1$81 ==.
                                   1566 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:102: i2c_write_data(0xC6, 0x00, text, len);
      0000E5 75*0Br00         [24] 1567 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_81
      0000E8 75*0Cs00         [24] 1568 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_81 >> 8)
      0000EB 75*0D 00         [24] 1569 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000EE 75*0A 00         [24] 1570 	mov	_i2c_write_data_PARM_2,#0x00
      0000F1 8E*0E            [24] 1571 	mov	_i2c_write_data_PARM_4,r6
      0000F3 75 82 C6         [24] 1572 	mov	dpl,#0xc6
      0000F6 12r03r88         [24] 1573 	lcall	_i2c_write_data
      0000F9                       1574 00109$:
      0000F9 D0*00            [24] 1575 	pop	_bp
                           0000FB  1576 	C$i2c.h$103$1$81 ==.
                           0000FB  1577 	XG$lcd_print$0$0 ==.
      0000FB 22               [24] 1578 	ret
                                   1579 ;------------------------------------------------------------
                                   1580 ;Allocation info for local variables in function 'lcd_clear'
                                   1581 ;------------------------------------------------------------
                                   1582 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_85'
                                   1583 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_85'
                                   1584 ;------------------------------------------------------------
                           0000FC  1585 	G$lcd_clear$0$0 ==.
                           0000FC  1586 	C$i2c.h$106$1$81 ==.
                                   1587 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:106: void lcd_clear()
                                   1588 ;	-----------------------------------------
                                   1589 ;	 function lcd_clear
                                   1590 ;	-----------------------------------------
      0000FC                       1591 _lcd_clear:
                           0000FC  1592 	C$i2c.h$108$1$81 ==.
                                   1593 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:108: unsigned char NumBytes=0, Cmd[2];
      0000FC 75*05 00         [24] 1594 	mov	_lcd_clear_NumBytes_1_85,#0x00
                           0000FF  1595 	C$i2c.h$110$1$85 ==.
                                   1596 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:110: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      0000FF                       1597 00101$:
      0000FF 74 C0            [12] 1598 	mov	a,#0x100 - 0x40
      000101 25*05            [12] 1599 	add	a,_lcd_clear_NumBytes_1_85
      000103 40 17            [24] 1600 	jc	00103$
      000105 75*10r05         [24] 1601 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_85
      000108 75*11 00         [24] 1602 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00010B 75*12 40         [24] 1603 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      00010E 75*0F 00         [24] 1604 	mov	_i2c_read_data_PARM_2,#0x00
      000111 75*13 01         [24] 1605 	mov	_i2c_read_data_PARM_4,#0x01
      000114 75 82 C6         [24] 1606 	mov	dpl,#0xc6
      000117 12r04r02         [24] 1607 	lcall	_i2c_read_data
      00011A 80 E3            [24] 1608 	sjmp	00101$
      00011C                       1609 00103$:
                           00011C  1610 	C$i2c.h$112$1$85 ==.
                                   1611 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:112: Cmd[0] = 12;
      00011C 75*06 0C         [24] 1612 	mov	_lcd_clear_Cmd_1_85,#0x0c
                           00011F  1613 	C$i2c.h$113$1$85 ==.
                                   1614 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:113: i2c_write_data(0xC6, 0x00, Cmd, 1);
      00011F 75*0Br06         [24] 1615 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_85
      000122 75*0C 00         [24] 1616 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000125 75*0D 40         [24] 1617 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000128 75*0A 00         [24] 1618 	mov	_i2c_write_data_PARM_2,#0x00
      00012B 75*0E 01         [24] 1619 	mov	_i2c_write_data_PARM_4,#0x01
      00012E 75 82 C6         [24] 1620 	mov	dpl,#0xc6
      000131 12r03r88         [24] 1621 	lcall	_i2c_write_data
                           000134  1622 	C$i2c.h$114$1$85 ==.
                           000134  1623 	XG$lcd_clear$0$0 ==.
      000134 22               [24] 1624 	ret
                                   1625 ;------------------------------------------------------------
                                   1626 ;Allocation info for local variables in function 'read_keypad'
                                   1627 ;------------------------------------------------------------
                                   1628 ;i                         Allocated to registers r7 
                                   1629 ;Data                      Allocated with name '_read_keypad_Data_1_86'
                                   1630 ;------------------------------------------------------------
                           000135  1631 	G$read_keypad$0$0 ==.
                           000135  1632 	C$i2c.h$117$1$85 ==.
                                   1633 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:117: char read_keypad()
                                   1634 ;	-----------------------------------------
                                   1635 ;	 function read_keypad
                                   1636 ;	-----------------------------------------
      000135                       1637 _read_keypad:
                           000135  1638 	C$i2c.h$121$1$86 ==.
                                   1639 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:121: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      000135 75*10r08         [24] 1640 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_86
      000138 75*11 00         [24] 1641 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00013B 75*12 40         [24] 1642 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      00013E 75*0F 01         [24] 1643 	mov	_i2c_read_data_PARM_2,#0x01
      000141 75*13 02         [24] 1644 	mov	_i2c_read_data_PARM_4,#0x02
      000144 75 82 C6         [24] 1645 	mov	dpl,#0xc6
      000147 12r04r02         [24] 1646 	lcall	_i2c_read_data
                           00014A  1647 	C$i2c.h$122$1$86 ==.
                                   1648 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:122: if(Data[0] == 0xFF) return 0;   //No response on bus, no display
      00014A 74 FF            [12] 1649 	mov	a,#0xff
      00014C B5*08 05         [24] 1650 	cjne	a,_read_keypad_Data_1_86,00102$
      00014F 75 82 00         [24] 1651 	mov	dpl,#0x00
      000152 80 5F            [24] 1652 	sjmp	00116$
      000154                       1653 00102$:
                           000154  1654 	C$i2c.h$124$1$86 ==.
                                   1655 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:124: for(i=0; i<8; i++)              //loop 8 times
      000154 7F 00            [12] 1656 	mov	r7,#0x00
      000156 8F 06            [24] 1657 	mov	ar6,r7
      000158                       1658 00114$:
                           000158  1659 	C$i2c.h$126$2$87 ==.
                                   1660 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:126: if(Data[0] & (0x01 << i))   //find the ASCII value of the keypad read, if it is the current loop value
      000158 8E F0            [24] 1661 	mov	b,r6
      00015A 05 F0            [12] 1662 	inc	b
      00015C 7C 01            [12] 1663 	mov	r4,#0x01
      00015E 7D 00            [12] 1664 	mov	r5,#0x00
      000160 80 06            [24] 1665 	sjmp	00145$
      000162                       1666 00144$:
      000162 EC               [12] 1667 	mov	a,r4
      000163 2C               [12] 1668 	add	a,r4
      000164 FC               [12] 1669 	mov	r4,a
      000165 ED               [12] 1670 	mov	a,r5
      000166 33               [12] 1671 	rlc	a
      000167 FD               [12] 1672 	mov	r5,a
      000168                       1673 00145$:
      000168 D5 F0 F7         [24] 1674 	djnz	b,00144$
      00016B AA*08            [24] 1675 	mov	r2,_read_keypad_Data_1_86
      00016D 7B 00            [12] 1676 	mov	r3,#0x00
      00016F EA               [12] 1677 	mov	a,r2
      000170 52 04            [12] 1678 	anl	ar4,a
      000172 EB               [12] 1679 	mov	a,r3
      000173 52 05            [12] 1680 	anl	ar5,a
      000175 EC               [12] 1681 	mov	a,r4
      000176 4D               [12] 1682 	orl	a,r5
      000177 60 07            [24] 1683 	jz	00115$
                           000179  1684 	C$i2c.h$127$2$87 ==.
                                   1685 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:127: return i+49;
      000179 74 31            [12] 1686 	mov	a,#0x31
      00017B 2F               [12] 1687 	add	a,r7
      00017C F5 82            [12] 1688 	mov	dpl,a
      00017E 80 33            [24] 1689 	sjmp	00116$
      000180                       1690 00115$:
                           000180  1691 	C$i2c.h$124$1$86 ==.
                                   1692 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:124: for(i=0; i<8; i++)              //loop 8 times
      000180 0E               [12] 1693 	inc	r6
      000181 8E 07            [24] 1694 	mov	ar7,r6
      000183 BE 08 00         [24] 1695 	cjne	r6,#0x08,00147$
      000186                       1696 00147$:
      000186 40 D0            [24] 1697 	jc	00114$
                           000188  1698 	C$i2c.h$130$1$86 ==.
                                   1699 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:130: if(Data[1] & 0x01) return '9';  //if the value is equal to 9 return 9.
      000188 E5*09            [12] 1700 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      00018A 30 E0 05         [24] 1701 	jnb	acc.0,00107$
      00018D 75 82 39         [24] 1702 	mov	dpl,#0x39
      000190 80 21            [24] 1703 	sjmp	00116$
      000192                       1704 00107$:
                           000192  1705 	C$i2c.h$132$1$86 ==.
                                   1706 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:132: if(Data[1] & 0x02) return '*';  //if the value is equal to the star.
      000192 E5*09            [12] 1707 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      000194 30 E1 05         [24] 1708 	jnb	acc.1,00109$
      000197 75 82 2A         [24] 1709 	mov	dpl,#0x2a
      00019A 80 17            [24] 1710 	sjmp	00116$
      00019C                       1711 00109$:
                           00019C  1712 	C$i2c.h$134$1$86 ==.
                                   1713 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:134: if(Data[1] & 0x04) return '0';  //if the value is equal to the 0 key
      00019C E5*09            [12] 1714 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      00019E 30 E2 05         [24] 1715 	jnb	acc.2,00111$
      0001A1 75 82 30         [24] 1716 	mov	dpl,#0x30
      0001A4 80 0D            [24] 1717 	sjmp	00116$
      0001A6                       1718 00111$:
                           0001A6  1719 	C$i2c.h$136$1$86 ==.
                                   1720 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:136: if(Data[1] & 0x08) return '#';  //if the value is equal to the pound key
      0001A6 E5*09            [12] 1721 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      0001A8 30 E3 05         [24] 1722 	jnb	acc.3,00113$
      0001AB 75 82 23         [24] 1723 	mov	dpl,#0x23
      0001AE 80 03            [24] 1724 	sjmp	00116$
      0001B0                       1725 00113$:
                           0001B0  1726 	C$i2c.h$138$1$86 ==.
                                   1727 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:138: return 0xFF;                    //else return a numerical -1 (0xFF)
      0001B0 75 82 FF         [24] 1728 	mov	dpl,#0xff
      0001B3                       1729 00116$:
                           0001B3  1730 	C$i2c.h$139$1$86 ==.
                           0001B3  1731 	XG$read_keypad$0$0 ==.
      0001B3 22               [24] 1732 	ret
                                   1733 ;------------------------------------------------------------
                                   1734 ;Allocation info for local variables in function 'kpd_input'
                                   1735 ;------------------------------------------------------------
                                   1736 ;mode                      Allocated to registers r7 
                                   1737 ;sum                       Allocated to registers r5 r6 
                                   1738 ;key                       Allocated to registers r3 
                                   1739 ;i                         Allocated to registers 
                                   1740 ;------------------------------------------------------------
                           0001B4  1741 	G$kpd_input$0$0 ==.
                           0001B4  1742 	C$i2c.h$151$1$86 ==.
                                   1743 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:151: unsigned int kpd_input(char mode)
                                   1744 ;	-----------------------------------------
                                   1745 ;	 function kpd_input
                                   1746 ;	-----------------------------------------
      0001B4                       1747 _kpd_input:
      0001B4 AF 82            [24] 1748 	mov	r7,dpl
                           0001B6  1749 	C$i2c.h$156$1$89 ==.
                                   1750 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:156: sum = 0;
                           0001B6  1751 	C$i2c.h$159$1$89 ==.
                                   1752 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:159: if(mode==0)lcd_print("\nType digits; end w/#");
      0001B6 E4               [12] 1753 	clr	a
      0001B7 FD               [12] 1754 	mov	r5,a
      0001B8 FE               [12] 1755 	mov	r6,a
      0001B9 EF               [12] 1756 	mov	a,r7
      0001BA 70 1D            [24] 1757 	jnz	00102$
      0001BC C0 06            [24] 1758 	push	ar6
      0001BE C0 05            [24] 1759 	push	ar5
      0001C0 74r00            [12] 1760 	mov	a,#___str_0
      0001C2 C0 E0            [24] 1761 	push	acc
      0001C4 74s00            [12] 1762 	mov	a,#(___str_0 >> 8)
      0001C6 C0 E0            [24] 1763 	push	acc
      0001C8 74 80            [12] 1764 	mov	a,#0x80
      0001CA C0 E0            [24] 1765 	push	acc
      0001CC 12r00r77         [24] 1766 	lcall	_lcd_print
      0001CF 15 81            [12] 1767 	dec	sp
      0001D1 15 81            [12] 1768 	dec	sp
      0001D3 15 81            [12] 1769 	dec	sp
      0001D5 D0 05            [24] 1770 	pop	ar5
      0001D7 D0 06            [24] 1771 	pop	ar6
      0001D9                       1772 00102$:
                           0001D9  1773 	C$i2c.h$161$1$89 ==.
                                   1774 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:161: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001D9 C0 06            [24] 1775 	push	ar6
      0001DB C0 05            [24] 1776 	push	ar5
      0001DD 74 08            [12] 1777 	mov	a,#0x08
      0001DF C0 E0            [24] 1778 	push	acc
      0001E1 E4               [12] 1779 	clr	a
      0001E2 C0 E0            [24] 1780 	push	acc
      0001E4 74 08            [12] 1781 	mov	a,#0x08
      0001E6 C0 E0            [24] 1782 	push	acc
      0001E8 E4               [12] 1783 	clr	a
      0001E9 C0 E0            [24] 1784 	push	acc
      0001EB 74 08            [12] 1785 	mov	a,#0x08
      0001ED C0 E0            [24] 1786 	push	acc
      0001EF E4               [12] 1787 	clr	a
      0001F0 C0 E0            [24] 1788 	push	acc
      0001F2 74 08            [12] 1789 	mov	a,#0x08
      0001F4 C0 E0            [24] 1790 	push	acc
      0001F6 E4               [12] 1791 	clr	a
      0001F7 C0 E0            [24] 1792 	push	acc
      0001F9 74 08            [12] 1793 	mov	a,#0x08
      0001FB C0 E0            [24] 1794 	push	acc
      0001FD E4               [12] 1795 	clr	a
      0001FE C0 E0            [24] 1796 	push	acc
      000200 74r16            [12] 1797 	mov	a,#___str_1
      000202 C0 E0            [24] 1798 	push	acc
      000204 74s00            [12] 1799 	mov	a,#(___str_1 >> 8)
      000206 C0 E0            [24] 1800 	push	acc
      000208 74 80            [12] 1801 	mov	a,#0x80
      00020A C0 E0            [24] 1802 	push	acc
      00020C 12r00r77         [24] 1803 	lcall	_lcd_print
      00020F E5 81            [12] 1804 	mov	a,sp
      000211 24 F3            [12] 1805 	add	a,#0xf3
      000213 F5 81            [12] 1806 	mov	sp,a
                           000215  1807 	C$i2c.h$163$1$89 ==.
                                   1808 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:163: delay_time(500000);             //Add 20ms delay before reading i2c in loop
      000215 90 A1 20         [24] 1809 	mov	dptr,#0xa120
      000218 75 F0 07         [24] 1810 	mov	b,#0x07
      00021B E4               [12] 1811 	clr	a
      00021C 12r03r23         [24] 1812 	lcall	_delay_time
      00021F D0 05            [24] 1813 	pop	ar5
      000221 D0 06            [24] 1814 	pop	ar6
                           000223  1815 	C$i2c.h$167$1$89 ==.
                                   1816 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:167: for(i=0; i<5; i++)
      000223 7F 00            [12] 1817 	mov	r7,#0x00
                           000225  1818 	C$i2c.h$169$3$92 ==.
                                   1819 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:169: while(((key=read_keypad()) == 0xFF) || (key == '*'))delay_time(10000);
      000225                       1820 00104$:
      000225 C0 07            [24] 1821 	push	ar7
      000227 C0 06            [24] 1822 	push	ar6
      000229 C0 05            [24] 1823 	push	ar5
      00022B 12r01r35         [24] 1824 	lcall	_read_keypad
      00022E AC 82            [24] 1825 	mov	r4,dpl
      000230 D0 05            [24] 1826 	pop	ar5
      000232 D0 06            [24] 1827 	pop	ar6
      000234 D0 07            [24] 1828 	pop	ar7
      000236 8C 03            [24] 1829 	mov	ar3,r4
      000238 BC FF 02         [24] 1830 	cjne	r4,#0xff,00146$
      00023B 80 03            [24] 1831 	sjmp	00105$
      00023D                       1832 00146$:
      00023D BB 2A 17         [24] 1833 	cjne	r3,#0x2a,00106$
      000240                       1834 00105$:
      000240 90 27 10         [24] 1835 	mov	dptr,#0x2710
      000243 E4               [12] 1836 	clr	a
      000244 F5 F0            [12] 1837 	mov	b,a
      000246 C0 07            [24] 1838 	push	ar7
      000248 C0 06            [24] 1839 	push	ar6
      00024A C0 05            [24] 1840 	push	ar5
      00024C 12r03r23         [24] 1841 	lcall	_delay_time
      00024F D0 05            [24] 1842 	pop	ar5
      000251 D0 06            [24] 1843 	pop	ar6
      000253 D0 07            [24] 1844 	pop	ar7
      000255 80 CE            [24] 1845 	sjmp	00104$
      000257                       1846 00106$:
                           000257  1847 	C$i2c.h$170$2$90 ==.
                                   1848 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:170: if(key == '#')
      000257 BB 23 2A         [24] 1849 	cjne	r3,#0x23,00114$
                           00025A  1850 	C$i2c.h$172$3$91 ==.
                                   1851 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:172: while(read_keypad() == '#')delay_time(10000);
      00025A                       1852 00107$:
      00025A C0 06            [24] 1853 	push	ar6
      00025C C0 05            [24] 1854 	push	ar5
      00025E 12r01r35         [24] 1855 	lcall	_read_keypad
      000261 AC 82            [24] 1856 	mov	r4,dpl
      000263 D0 05            [24] 1857 	pop	ar5
      000265 D0 06            [24] 1858 	pop	ar6
      000267 BC 23 13         [24] 1859 	cjne	r4,#0x23,00109$
      00026A 90 27 10         [24] 1860 	mov	dptr,#0x2710
      00026D E4               [12] 1861 	clr	a
      00026E F5 F0            [12] 1862 	mov	b,a
      000270 C0 06            [24] 1863 	push	ar6
      000272 C0 05            [24] 1864 	push	ar5
      000274 12r03r23         [24] 1865 	lcall	_delay_time
      000277 D0 05            [24] 1866 	pop	ar5
      000279 D0 06            [24] 1867 	pop	ar6
      00027B 80 DD            [24] 1868 	sjmp	00107$
      00027D                       1869 00109$:
                           00027D  1870 	C$i2c.h$173$3$91 ==.
                                   1871 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:173: return sum;
      00027D 8D 82            [24] 1872 	mov	dpl,r5
      00027F 8E 83            [24] 1873 	mov	dph,r6
      000281 02r03r22         [24] 1874 	ljmp	00119$
      000284                       1875 00114$:
                           000284  1876 	C$i2c.h$177$3$92 ==.
                                   1877 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:177: lcd_print("%c", key);
      000284 8B 02            [24] 1878 	mov	ar2,r3
      000286 7C 00            [12] 1879 	mov	r4,#0x00
      000288 C0 07            [24] 1880 	push	ar7
      00028A C0 06            [24] 1881 	push	ar6
      00028C C0 05            [24] 1882 	push	ar5
      00028E C0 04            [24] 1883 	push	ar4
      000290 C0 03            [24] 1884 	push	ar3
      000292 C0 02            [24] 1885 	push	ar2
      000294 C0 02            [24] 1886 	push	ar2
      000296 C0 04            [24] 1887 	push	ar4
      000298 74r26            [12] 1888 	mov	a,#___str_2
      00029A C0 E0            [24] 1889 	push	acc
      00029C 74s00            [12] 1890 	mov	a,#(___str_2 >> 8)
      00029E C0 E0            [24] 1891 	push	acc
      0002A0 74 80            [12] 1892 	mov	a,#0x80
      0002A2 C0 E0            [24] 1893 	push	acc
      0002A4 12r00r77         [24] 1894 	lcall	_lcd_print
      0002A7 E5 81            [12] 1895 	mov	a,sp
      0002A9 24 FB            [12] 1896 	add	a,#0xfb
      0002AB F5 81            [12] 1897 	mov	sp,a
      0002AD D0 02            [24] 1898 	pop	ar2
      0002AF D0 03            [24] 1899 	pop	ar3
      0002B1 D0 04            [24] 1900 	pop	ar4
      0002B3 D0 05            [24] 1901 	pop	ar5
      0002B5 D0 06            [24] 1902 	pop	ar6
                           0002B7  1903 	C$i2c.h$178$1$89 ==.
                                   1904 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:178: sum = sum*10 + key - '0';
      0002B7 8D*00            [24] 1905 	mov	__mulint_PARM_2,r5
      0002B9 8E*01            [24] 1906 	mov	(__mulint_PARM_2 + 1),r6
      0002BB 90 00 0A         [24] 1907 	mov	dptr,#0x000a
      0002BE C0 04            [24] 1908 	push	ar4
      0002C0 C0 03            [24] 1909 	push	ar3
      0002C2 C0 02            [24] 1910 	push	ar2
      0002C4 12r00r00         [24] 1911 	lcall	__mulint
      0002C7 A8 82            [24] 1912 	mov	r0,dpl
      0002C9 A9 83            [24] 1913 	mov	r1,dph
      0002CB D0 02            [24] 1914 	pop	ar2
      0002CD D0 03            [24] 1915 	pop	ar3
      0002CF D0 04            [24] 1916 	pop	ar4
      0002D1 D0 07            [24] 1917 	pop	ar7
      0002D3 EA               [12] 1918 	mov	a,r2
      0002D4 28               [12] 1919 	add	a,r0
      0002D5 F8               [12] 1920 	mov	r0,a
      0002D6 EC               [12] 1921 	mov	a,r4
      0002D7 39               [12] 1922 	addc	a,r1
      0002D8 F9               [12] 1923 	mov	r1,a
      0002D9 E8               [12] 1924 	mov	a,r0
      0002DA 24 D0            [12] 1925 	add	a,#0xd0
      0002DC FD               [12] 1926 	mov	r5,a
      0002DD E9               [12] 1927 	mov	a,r1
      0002DE 34 FF            [12] 1928 	addc	a,#0xff
      0002E0 FE               [12] 1929 	mov	r6,a
                           0002E1  1930 	C$i2c.h$179$3$92 ==.
                                   1931 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:179: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002E1                       1932 00110$:
      0002E1 C0 07            [24] 1933 	push	ar7
      0002E3 C0 06            [24] 1934 	push	ar6
      0002E5 C0 05            [24] 1935 	push	ar5
      0002E7 C0 03            [24] 1936 	push	ar3
      0002E9 12r01r35         [24] 1937 	lcall	_read_keypad
      0002EC AC 82            [24] 1938 	mov	r4,dpl
      0002EE D0 03            [24] 1939 	pop	ar3
      0002F0 D0 05            [24] 1940 	pop	ar5
      0002F2 D0 06            [24] 1941 	pop	ar6
      0002F4 D0 07            [24] 1942 	pop	ar7
      0002F6 EC               [12] 1943 	mov	a,r4
      0002F7 B5 03 1B         [24] 1944 	cjne	a,ar3,00118$
      0002FA 90 27 10         [24] 1945 	mov	dptr,#0x2710
      0002FD E4               [12] 1946 	clr	a
      0002FE F5 F0            [12] 1947 	mov	b,a
      000300 C0 07            [24] 1948 	push	ar7
      000302 C0 06            [24] 1949 	push	ar6
      000304 C0 05            [24] 1950 	push	ar5
      000306 C0 03            [24] 1951 	push	ar3
      000308 12r03r23         [24] 1952 	lcall	_delay_time
      00030B D0 03            [24] 1953 	pop	ar3
      00030D D0 05            [24] 1954 	pop	ar5
      00030F D0 06            [24] 1955 	pop	ar6
      000311 D0 07            [24] 1956 	pop	ar7
      000313 80 CC            [24] 1957 	sjmp	00110$
      000315                       1958 00118$:
                           000315  1959 	C$i2c.h$167$1$89 ==.
                                   1960 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:167: for(i=0; i<5; i++)
      000315 0F               [12] 1961 	inc	r7
      000316 BF 05 00         [24] 1962 	cjne	r7,#0x05,00155$
      000319                       1963 00155$:
      000319 50 03            [24] 1964 	jnc	00156$
      00031B 02r02r25         [24] 1965 	ljmp	00104$
      00031E                       1966 00156$:
                           00031E  1967 	C$i2c.h$182$1$89 ==.
                                   1968 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:182: return sum;
      00031E 8D 82            [24] 1969 	mov	dpl,r5
      000320 8E 83            [24] 1970 	mov	dph,r6
      000322                       1971 00119$:
                           000322  1972 	C$i2c.h$183$1$89 ==.
                           000322  1973 	XG$kpd_input$0$0 ==.
      000322 22               [24] 1974 	ret
                                   1975 ;------------------------------------------------------------
                                   1976 ;Allocation info for local variables in function 'delay_time'
                                   1977 ;------------------------------------------------------------
                                   1978 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1979 ;index                     Allocated to registers 
                                   1980 ;------------------------------------------------------------
                           000323  1981 	G$delay_time$0$0 ==.
                           000323  1982 	C$i2c.h$192$1$89 ==.
                                   1983 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:192: void delay_time (unsigned long time_end)
                                   1984 ;	-----------------------------------------
                                   1985 ;	 function delay_time
                                   1986 ;	-----------------------------------------
      000323                       1987 _delay_time:
      000323 AC 82            [24] 1988 	mov	r4,dpl
      000325 AD 83            [24] 1989 	mov	r5,dph
      000327 AE F0            [24] 1990 	mov	r6,b
      000329 FF               [12] 1991 	mov	r7,a
                           00032A  1992 	C$i2c.h$196$1$94 ==.
                                   1993 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:196: for (index = 0; index < time_end; index++); //for loop delay
      00032A 78 00            [12] 1994 	mov	r0,#0x00
      00032C 79 00            [12] 1995 	mov	r1,#0x00
      00032E 7A 00            [12] 1996 	mov	r2,#0x00
      000330 7B 00            [12] 1997 	mov	r3,#0x00
      000332                       1998 00103$:
      000332 C3               [12] 1999 	clr	c
      000333 E8               [12] 2000 	mov	a,r0
      000334 9C               [12] 2001 	subb	a,r4
      000335 E9               [12] 2002 	mov	a,r1
      000336 9D               [12] 2003 	subb	a,r5
      000337 EA               [12] 2004 	mov	a,r2
      000338 9E               [12] 2005 	subb	a,r6
      000339 EB               [12] 2006 	mov	a,r3
      00033A 9F               [12] 2007 	subb	a,r7
      00033B 50 0F            [24] 2008 	jnc	00105$
      00033D 08               [12] 2009 	inc	r0
      00033E B8 00 09         [24] 2010 	cjne	r0,#0x00,00115$
      000341 09               [12] 2011 	inc	r1
      000342 B9 00 05         [24] 2012 	cjne	r1,#0x00,00115$
      000345 0A               [12] 2013 	inc	r2
      000346 BA 00 E9         [24] 2014 	cjne	r2,#0x00,00103$
      000349 0B               [12] 2015 	inc	r3
      00034A                       2016 00115$:
      00034A 80 E6            [24] 2017 	sjmp	00103$
      00034C                       2018 00105$:
                           00034C  2019 	C$i2c.h$197$1$94 ==.
                           00034C  2020 	XG$delay_time$0$0 ==.
      00034C 22               [24] 2021 	ret
                                   2022 ;------------------------------------------------------------
                                   2023 ;Allocation info for local variables in function 'i2c_start'
                                   2024 ;------------------------------------------------------------
                           00034D  2025 	G$i2c_start$0$0 ==.
                           00034D  2026 	C$i2c.h$200$1$94 ==.
                                   2027 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:200: void i2c_start(void)
                                   2028 ;	-----------------------------------------
                                   2029 ;	 function i2c_start
                                   2030 ;	-----------------------------------------
      00034D                       2031 _i2c_start:
                           00034D  2032 	C$i2c.h$202$1$96 ==.
                                   2033 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:202: while(BUSY);                //Wait until SMBus0 is free
      00034D                       2034 00101$:
      00034D 20 C7 FD         [24] 2035 	jb	_BUSY,00101$
                           000350  2036 	C$i2c.h$203$1$96 ==.
                                   2037 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:203: STA = 1;                    //Set Start Bit
      000350 D2 C5            [12] 2038 	setb	_STA
                           000352  2039 	C$i2c.h$204$1$96 ==.
                                   2040 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:204: while(!SI);                 //Wait until start sent
      000352                       2041 00104$:
      000352 30 C3 FD         [24] 2042 	jnb	_SI,00104$
                           000355  2043 	C$i2c.h$205$1$96 ==.
                                   2044 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:205: STA = 0;                    //Clear start bit
      000355 C2 C5            [12] 2045 	clr	_STA
                           000357  2046 	C$i2c.h$206$1$96 ==.
                                   2047 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:206: SI = 0;                     //Clear SI
      000357 C2 C3            [12] 2048 	clr	_SI
                           000359  2049 	C$i2c.h$207$1$96 ==.
                           000359  2050 	XG$i2c_start$0$0 ==.
      000359 22               [24] 2051 	ret
                                   2052 ;------------------------------------------------------------
                                   2053 ;Allocation info for local variables in function 'i2c_write'
                                   2054 ;------------------------------------------------------------
                                   2055 ;output_data               Allocated to registers 
                                   2056 ;------------------------------------------------------------
                           00035A  2057 	G$i2c_write$0$0 ==.
                           00035A  2058 	C$i2c.h$210$1$96 ==.
                                   2059 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:210: void i2c_write(unsigned char output_data)
                                   2060 ;	-----------------------------------------
                                   2061 ;	 function i2c_write
                                   2062 ;	-----------------------------------------
      00035A                       2063 _i2c_write:
      00035A 85 82 C2         [24] 2064 	mov	_SMB0DAT,dpl
                           00035D  2065 	C$i2c.h$213$1$98 ==.
                                   2066 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:213: while(!SI);                 //Wait until send is complete
      00035D                       2067 00101$:
                           00035D  2068 	C$i2c.h$214$1$98 ==.
                                   2069 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:214: SI = 0;                     //Clear SI
      00035D 10 C3 02         [24] 2070 	jbc	_SI,00112$
      000360 80 FB            [24] 2071 	sjmp	00101$
      000362                       2072 00112$:
                           000362  2073 	C$i2c.h$215$1$98 ==.
                           000362  2074 	XG$i2c_write$0$0 ==.
      000362 22               [24] 2075 	ret
                                   2076 ;------------------------------------------------------------
                                   2077 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   2078 ;------------------------------------------------------------
                                   2079 ;output_data               Allocated to registers 
                                   2080 ;------------------------------------------------------------
                           000363  2081 	G$i2c_write_and_stop$0$0 ==.
                           000363  2082 	C$i2c.h$218$1$98 ==.
                                   2083 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:218: void i2c_write_and_stop(unsigned char output_data)
                                   2084 ;	-----------------------------------------
                                   2085 ;	 function i2c_write_and_stop
                                   2086 ;	-----------------------------------------
      000363                       2087 _i2c_write_and_stop:
      000363 85 82 C2         [24] 2088 	mov	_SMB0DAT,dpl
                           000366  2089 	C$i2c.h$221$1$100 ==.
                                   2090 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:221: STO = 1;                    //Set stop bit
      000366 D2 C4            [12] 2091 	setb	_STO
                           000368  2092 	C$i2c.h$222$1$100 ==.
                                   2093 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:222: while(!SI);                 //Wait until send is complete
      000368                       2094 00101$:
                           000368  2095 	C$i2c.h$223$1$100 ==.
                                   2096 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:223: SI = 0;                     //Clear SI
      000368 10 C3 02         [24] 2097 	jbc	_SI,00112$
      00036B 80 FB            [24] 2098 	sjmp	00101$
      00036D                       2099 00112$:
                           00036D  2100 	C$i2c.h$224$1$100 ==.
                           00036D  2101 	XG$i2c_write_and_stop$0$0 ==.
      00036D 22               [24] 2102 	ret
                                   2103 ;------------------------------------------------------------
                                   2104 ;Allocation info for local variables in function 'i2c_read'
                                   2105 ;------------------------------------------------------------
                                   2106 ;input_data                Allocated to registers 
                                   2107 ;------------------------------------------------------------
                           00036E  2108 	G$i2c_read$0$0 ==.
                           00036E  2109 	C$i2c.h$227$1$100 ==.
                                   2110 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:227: unsigned char i2c_read(void)
                                   2111 ;	-----------------------------------------
                                   2112 ;	 function i2c_read
                                   2113 ;	-----------------------------------------
      00036E                       2114 _i2c_read:
                           00036E  2115 	C$i2c.h$231$1$102 ==.
                                   2116 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:231: while(!SI);                 //Wait until we have data to read
      00036E                       2117 00101$:
      00036E 30 C3 FD         [24] 2118 	jnb	_SI,00101$
                           000371  2119 	C$i2c.h$232$1$102 ==.
                                   2120 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:232: input_data = SMB0DAT;       //Read the data
      000371 85 C2 82         [24] 2121 	mov	dpl,_SMB0DAT
                           000374  2122 	C$i2c.h$233$1$102 ==.
                                   2123 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:233: SI = 0;                     //Clear SI
      000374 C2 C3            [12] 2124 	clr	_SI
                           000376  2125 	C$i2c.h$234$1$102 ==.
                                   2126 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:234: return input_data;          //Return the read data
                           000376  2127 	C$i2c.h$235$1$102 ==.
                           000376  2128 	XG$i2c_read$0$0 ==.
      000376 22               [24] 2129 	ret
                                   2130 ;------------------------------------------------------------
                                   2131 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   2132 ;------------------------------------------------------------
                                   2133 ;input_data                Allocated to registers r7 
                                   2134 ;------------------------------------------------------------
                           000377  2135 	G$i2c_read_and_stop$0$0 ==.
                           000377  2136 	C$i2c.h$238$1$102 ==.
                                   2137 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:238: unsigned char i2c_read_and_stop(void)
                                   2138 ;	-----------------------------------------
                                   2139 ;	 function i2c_read_and_stop
                                   2140 ;	-----------------------------------------
      000377                       2141 _i2c_read_and_stop:
                           000377  2142 	C$i2c.h$242$1$104 ==.
                                   2143 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:242: while(!SI);                 //Wait until we have data to read
      000377                       2144 00101$:
      000377 30 C3 FD         [24] 2145 	jnb	_SI,00101$
                           00037A  2146 	C$i2c.h$243$1$104 ==.
                                   2147 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:243: input_data = SMB0DAT;       //Read the data
      00037A AF C2            [24] 2148 	mov	r7,_SMB0DAT
                           00037C  2149 	C$i2c.h$244$1$104 ==.
                                   2150 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:244: SI = 0;                     //Clear SI
      00037C C2 C3            [12] 2151 	clr	_SI
                           00037E  2152 	C$i2c.h$245$1$104 ==.
                                   2153 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:245: STO = 1;                    //Set stop bit
      00037E D2 C4            [12] 2154 	setb	_STO
                           000380  2155 	C$i2c.h$246$1$104 ==.
                                   2156 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:246: while(!SI);                 //Wait for stop
      000380                       2157 00104$:
                           000380  2158 	C$i2c.h$247$1$104 ==.
                                   2159 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:247: SI = 0;
      000380 10 C3 02         [24] 2160 	jbc	_SI,00122$
      000383 80 FB            [24] 2161 	sjmp	00104$
      000385                       2162 00122$:
                           000385  2163 	C$i2c.h$248$1$104 ==.
                                   2164 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:248: return input_data;          //Return the read data
      000385 8F 82            [24] 2165 	mov	dpl,r7
                           000387  2166 	C$i2c.h$249$1$104 ==.
                           000387  2167 	XG$i2c_read_and_stop$0$0 ==.
      000387 22               [24] 2168 	ret
                                   2169 ;------------------------------------------------------------
                                   2170 ;Allocation info for local variables in function 'i2c_write_data'
                                   2171 ;------------------------------------------------------------
                                   2172 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2173 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2174 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2175 ;addr                      Allocated to registers r7 
                                   2176 ;i                         Allocated to registers 
                                   2177 ;------------------------------------------------------------
                           000388  2178 	G$i2c_write_data$0$0 ==.
                           000388  2179 	C$i2c.h$252$1$104 ==.
                                   2180 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:252: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2181 ;	-----------------------------------------
                                   2182 ;	 function i2c_write_data
                                   2183 ;	-----------------------------------------
      000388                       2184 _i2c_write_data:
      000388 AF 82            [24] 2185 	mov	r7,dpl
                           00038A  2186 	C$i2c.h$256$1$106 ==.
                                   2187 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:256: EA = 0;                     //Don't allow interrupts during I2C work
      00038A C2 AF            [12] 2188 	clr	_EA
                           00038C  2189 	C$i2c.h$257$1$106 ==.
                                   2190 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:257: i2c_start();                //Initiate I2C transfer
      00038C C0 07            [24] 2191 	push	ar7
      00038E 12r03r4D         [24] 2192 	lcall	_i2c_start
      000391 D0 07            [24] 2193 	pop	ar7
                           000393  2194 	C$i2c.h$258$1$106 ==.
                                   2195 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:258: i2c_write(addr & ~0x01);    //Write the desired address to the bus
      000393 74 FE            [12] 2196 	mov	a,#0xfe
      000395 5F               [12] 2197 	anl	a,r7
      000396 F5 82            [12] 2198 	mov	dpl,a
      000398 12r03r5A         [24] 2199 	lcall	_i2c_write
                           00039B  2200 	C$i2c.h$259$1$106 ==.
                                   2201 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:259: i2c_write(start_reg);       //Write the start register to the bus
      00039B 85*0A 82         [24] 2202 	mov	dpl,_i2c_write_data_PARM_2
      00039E 12r03r5A         [24] 2203 	lcall	_i2c_write
                           0003A1  2204 	C$i2c.h$260$1$106 ==.
                                   2205 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:260: for(i=0; i<num_bytes-1; i++) //Write the data to the register(s)
      0003A1 7F 00            [12] 2206 	mov	r7,#0x00
      0003A3                       2207 00103$:
      0003A3 AD*0E            [24] 2208 	mov	r5,_i2c_write_data_PARM_4
      0003A5 7E 00            [12] 2209 	mov	r6,#0x00
      0003A7 1D               [12] 2210 	dec	r5
      0003A8 BD FF 01         [24] 2211 	cjne	r5,#0xff,00114$
      0003AB 1E               [12] 2212 	dec	r6
      0003AC                       2213 00114$:
      0003AC 8F 03            [24] 2214 	mov	ar3,r7
      0003AE 7C 00            [12] 2215 	mov	r4,#0x00
      0003B0 C3               [12] 2216 	clr	c
      0003B1 EB               [12] 2217 	mov	a,r3
      0003B2 9D               [12] 2218 	subb	a,r5
      0003B3 EC               [12] 2219 	mov	a,r4
      0003B4 64 80            [12] 2220 	xrl	a,#0x80
      0003B6 8E F0            [24] 2221 	mov	b,r6
      0003B8 63 F0 80         [24] 2222 	xrl	b,#0x80
      0003BB 95 F0            [12] 2223 	subb	a,b
      0003BD 50 1F            [24] 2224 	jnc	00101$
                           0003BF  2225 	C$i2c.h$261$1$106 ==.
                                   2226 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:261: i2c_write(buffer[i]);
      0003BF EF               [12] 2227 	mov	a,r7
      0003C0 25*0B            [12] 2228 	add	a,_i2c_write_data_PARM_3
      0003C2 FC               [12] 2229 	mov	r4,a
      0003C3 E4               [12] 2230 	clr	a
      0003C4 35*0C            [12] 2231 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003C6 FD               [12] 2232 	mov	r5,a
      0003C7 AE*0D            [24] 2233 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003C9 8C 82            [24] 2234 	mov	dpl,r4
      0003CB 8D 83            [24] 2235 	mov	dph,r5
      0003CD 8E F0            [24] 2236 	mov	b,r6
      0003CF 12r00r00         [24] 2237 	lcall	__gptrget
      0003D2 F5 82            [12] 2238 	mov	dpl,a
      0003D4 C0 07            [24] 2239 	push	ar7
      0003D6 12r03r5A         [24] 2240 	lcall	_i2c_write
      0003D9 D0 07            [24] 2241 	pop	ar7
                           0003DB  2242 	C$i2c.h$260$1$106 ==.
                                   2243 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:260: for(i=0; i<num_bytes-1; i++) //Write the data to the register(s)
      0003DB 0F               [12] 2244 	inc	r7
      0003DC 80 C5            [24] 2245 	sjmp	00103$
      0003DE                       2246 00101$:
                           0003DE  2247 	C$i2c.h$262$1$106 ==.
                                   2248 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:262: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003DE AE*0E            [24] 2249 	mov	r6,_i2c_write_data_PARM_4
      0003E0 7F 00            [12] 2250 	mov	r7,#0x00
      0003E2 1E               [12] 2251 	dec	r6
      0003E3 BE FF 01         [24] 2252 	cjne	r6,#0xff,00116$
      0003E6 1F               [12] 2253 	dec	r7
      0003E7                       2254 00116$:
      0003E7 EE               [12] 2255 	mov	a,r6
      0003E8 25*0B            [12] 2256 	add	a,_i2c_write_data_PARM_3
      0003EA FE               [12] 2257 	mov	r6,a
      0003EB EF               [12] 2258 	mov	a,r7
      0003EC 35*0C            [12] 2259 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003EE FF               [12] 2260 	mov	r7,a
      0003EF AD*0D            [24] 2261 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003F1 8E 82            [24] 2262 	mov	dpl,r6
      0003F3 8F 83            [24] 2263 	mov	dph,r7
      0003F5 8D F0            [24] 2264 	mov	b,r5
      0003F7 12r00r00         [24] 2265 	lcall	__gptrget
      0003FA F5 82            [12] 2266 	mov	dpl,a
      0003FC 12r03r63         [24] 2267 	lcall	_i2c_write_and_stop
                           0003FF  2268 	C$i2c.h$263$1$106 ==.
                                   2269 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:263: EA = 1;                     //Re-Enable interrupts
      0003FF D2 AF            [12] 2270 	setb	_EA
                           000401  2271 	C$i2c.h$264$1$106 ==.
                           000401  2272 	XG$i2c_write_data$0$0 ==.
      000401 22               [24] 2273 	ret
                                   2274 ;------------------------------------------------------------
                                   2275 ;Allocation info for local variables in function 'i2c_read_data'
                                   2276 ;------------------------------------------------------------
                                   2277 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2278 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2279 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2280 ;addr                      Allocated to registers r7 
                                   2281 ;j                         Allocated to registers 
                                   2282 ;------------------------------------------------------------
                           000402  2283 	G$i2c_read_data$0$0 ==.
                           000402  2284 	C$i2c.h$267$1$106 ==.
                                   2285 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:267: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2286 ;	-----------------------------------------
                                   2287 ;	 function i2c_read_data
                                   2288 ;	-----------------------------------------
      000402                       2289 _i2c_read_data:
      000402 AF 82            [24] 2290 	mov	r7,dpl
                           000404  2291 	C$i2c.h$271$1$108 ==.
                                   2292 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:271: EA = 0;                     //Don't allow interrupts during I2C work
      000404 C2 AF            [12] 2293 	clr	_EA
                           000406  2294 	C$i2c.h$272$1$108 ==.
                                   2295 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:272: i2c_start();                //Start I2C transfer
      000406 C0 07            [24] 2296 	push	ar7
      000408 12r03r4D         [24] 2297 	lcall	_i2c_start
      00040B D0 07            [24] 2298 	pop	ar7
                           00040D  2299 	C$i2c.h$273$1$108 ==.
                                   2300 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:273: i2c_write(addr & ~0x01);    //Write address of device that will be written to, send 0
      00040D 74 FE            [12] 2301 	mov	a,#0xfe
      00040F 5F               [12] 2302 	anl	a,r7
      000410 F5 82            [12] 2303 	mov	dpl,a
      000412 C0 07            [24] 2304 	push	ar7
      000414 12r03r5A         [24] 2305 	lcall	_i2c_write
                           000417  2306 	C$i2c.h$274$1$108 ==.
                                   2307 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:274: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      000417 85*0F 82         [24] 2308 	mov	dpl,_i2c_read_data_PARM_2
      00041A 12r03r63         [24] 2309 	lcall	_i2c_write_and_stop
                           00041D  2310 	C$i2c.h$275$1$108 ==.
                                   2311 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:275: i2c_start();                //Start I2C transfer
      00041D 12r03r4D         [24] 2312 	lcall	_i2c_start
      000420 D0 07            [24] 2313 	pop	ar7
                           000422  2314 	C$i2c.h$276$1$108 ==.
                                   2315 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:276: i2c_write(addr | 0x01);     //Write address again, this time indicating a read operation
      000422 74 01            [12] 2316 	mov	a,#0x01
      000424 4F               [12] 2317 	orl	a,r7
      000425 F5 82            [12] 2318 	mov	dpl,a
      000427 12r03r5A         [24] 2319 	lcall	_i2c_write
                           00042A  2320 	C$i2c.h$277$1$108 ==.
                                   2321 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:277: for(j = 0; j < num_bytes - 1; j++)
      00042A 7F 00            [12] 2322 	mov	r7,#0x00
      00042C                       2323 00103$:
      00042C AD*13            [24] 2324 	mov	r5,_i2c_read_data_PARM_4
      00042E 7E 00            [12] 2325 	mov	r6,#0x00
      000430 1D               [12] 2326 	dec	r5
      000431 BD FF 01         [24] 2327 	cjne	r5,#0xff,00114$
      000434 1E               [12] 2328 	dec	r6
      000435                       2329 00114$:
      000435 8F 03            [24] 2330 	mov	ar3,r7
      000437 7C 00            [12] 2331 	mov	r4,#0x00
      000439 C3               [12] 2332 	clr	c
      00043A EB               [12] 2333 	mov	a,r3
      00043B 9D               [12] 2334 	subb	a,r5
      00043C EC               [12] 2335 	mov	a,r4
      00043D 64 80            [12] 2336 	xrl	a,#0x80
      00043F 8E F0            [24] 2337 	mov	b,r6
      000441 63 F0 80         [24] 2338 	xrl	b,#0x80
      000444 95 F0            [12] 2339 	subb	a,b
      000446 50 2E            [24] 2340 	jnc	00101$
                           000448  2341 	C$i2c.h$279$2$109 ==.
                                   2342 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:279: AA = 1;                 //Set acknowledge bit
      000448 D2 C2            [12] 2343 	setb	_AA
                           00044A  2344 	C$i2c.h$280$2$109 ==.
                                   2345 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:280: buffer[j] = i2c_read(); //Read data, save it in buffer
      00044A EF               [12] 2346 	mov	a,r7
      00044B 25*10            [12] 2347 	add	a,_i2c_read_data_PARM_3
      00044D FC               [12] 2348 	mov	r4,a
      00044E E4               [12] 2349 	clr	a
      00044F 35*11            [12] 2350 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000451 FD               [12] 2351 	mov	r5,a
      000452 AE*12            [24] 2352 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      000454 C0 07            [24] 2353 	push	ar7
      000456 C0 06            [24] 2354 	push	ar6
      000458 C0 05            [24] 2355 	push	ar5
      00045A C0 04            [24] 2356 	push	ar4
      00045C 12r03r6E         [24] 2357 	lcall	_i2c_read
      00045F AB 82            [24] 2358 	mov	r3,dpl
      000461 D0 04            [24] 2359 	pop	ar4
      000463 D0 05            [24] 2360 	pop	ar5
      000465 D0 06            [24] 2361 	pop	ar6
      000467 D0 07            [24] 2362 	pop	ar7
      000469 8C 82            [24] 2363 	mov	dpl,r4
      00046B 8D 83            [24] 2364 	mov	dph,r5
      00046D 8E F0            [24] 2365 	mov	b,r6
      00046F EB               [12] 2366 	mov	a,r3
      000470 12r00r00         [24] 2367 	lcall	__gptrput
                           000473  2368 	C$i2c.h$277$1$108 ==.
                                   2369 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:277: for(j = 0; j < num_bytes - 1; j++)
      000473 0F               [12] 2370 	inc	r7
      000474 80 B6            [24] 2371 	sjmp	00103$
      000476                       2372 00101$:
                           000476  2373 	C$i2c.h$282$1$108 ==.
                                   2374 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:282: AA = 0;
      000476 C2 C2            [12] 2375 	clr	_AA
                           000478  2376 	C$i2c.h$283$1$108 ==.
                                   2377 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:283: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      000478 AE*13            [24] 2378 	mov	r6,_i2c_read_data_PARM_4
      00047A 7F 00            [12] 2379 	mov	r7,#0x00
      00047C 1E               [12] 2380 	dec	r6
      00047D BE FF 01         [24] 2381 	cjne	r6,#0xff,00116$
      000480 1F               [12] 2382 	dec	r7
      000481                       2383 00116$:
      000481 EE               [12] 2384 	mov	a,r6
      000482 25*10            [12] 2385 	add	a,_i2c_read_data_PARM_3
      000484 FE               [12] 2386 	mov	r6,a
      000485 EF               [12] 2387 	mov	a,r7
      000486 35*11            [12] 2388 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000488 FF               [12] 2389 	mov	r7,a
      000489 AD*12            [24] 2390 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      00048B C0 07            [24] 2391 	push	ar7
      00048D C0 06            [24] 2392 	push	ar6
      00048F C0 05            [24] 2393 	push	ar5
      000491 12r03r77         [24] 2394 	lcall	_i2c_read_and_stop
      000494 AC 82            [24] 2395 	mov	r4,dpl
      000496 D0 05            [24] 2396 	pop	ar5
      000498 D0 06            [24] 2397 	pop	ar6
      00049A D0 07            [24] 2398 	pop	ar7
      00049C 8E 82            [24] 2399 	mov	dpl,r6
      00049E 8F 83            [24] 2400 	mov	dph,r7
      0004A0 8D F0            [24] 2401 	mov	b,r5
      0004A2 EC               [12] 2402 	mov	a,r4
      0004A3 12r00r00         [24] 2403 	lcall	__gptrput
                           0004A6  2404 	C$i2c.h$284$1$108 ==.
                                   2405 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:284: EA = 1;                     //Re-Enable interrupts
      0004A6 D2 AF            [12] 2406 	setb	_EA
                           0004A8  2407 	C$i2c.h$285$1$108 ==.
                           0004A8  2408 	XG$i2c_read_data$0$0 ==.
      0004A8 22               [24] 2409 	ret
                                   2410 ;------------------------------------------------------------
                                   2411 ;Allocation info for local variables in function 'Accel_Init'
                                   2412 ;------------------------------------------------------------
                           0004A9  2413 	G$Accel_Init$0$0 ==.
                           0004A9  2414 	C$i2c.h$294$1$108 ==.
                                   2415 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:294: void Accel_Init(void)
                                   2416 ;	-----------------------------------------
                                   2417 ;	 function Accel_Init
                                   2418 ;	-----------------------------------------
      0004A9                       2419 _Accel_Init:
                           0004A9  2420 	C$i2c.h$298$1$111 ==.
                                   2421 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:298: Data2[0]=0x23;  //normal power mode, 50Hz ODR, y & x axes enabled
      0004A9 75*00 23         [24] 2422 	mov	_Data2,#0x23
                           0004AC  2423 	C$i2c.h$300$1$111 ==.
                                   2424 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:300: Data2[1]=0x00;  //default - no filtering
      0004AC 75*01 00         [24] 2425 	mov	(_Data2 + 0x0001),#0x00
                           0004AF  2426 	C$i2c.h$301$1$111 ==.
                                   2427 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:301: Data2[1]=0x10;  //filtered data selected, HPF = 1.0->0.125Hz
      0004AF 75*01 10         [24] 2428 	mov	(_Data2 + 0x0001),#0x10
                           0004B2  2429 	C$i2c.h$302$1$111 ==.
                                   2430 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:302: Data2[2]=0x00;  //default - no interrupts enabled
      0004B2 75*02 00         [24] 2431 	mov	(_Data2 + 0x0002),#0x00
                           0004B5  2432 	C$i2c.h$304$1$111 ==.
                                   2433 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:304: i2c_write_data(addr_accel, 0x20, Data2, 1);
      0004B5 75*0Br00         [24] 2434 	mov	_i2c_write_data_PARM_3,#_Data2
      0004B8 75*0C 00         [24] 2435 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004BB 75*0D 40         [24] 2436 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004BE 75*0A 20         [24] 2437 	mov	_i2c_write_data_PARM_2,#0x20
      0004C1 75*0E 01         [24] 2438 	mov	_i2c_write_data_PARM_4,#0x01
      0004C4 75 82 30         [24] 2439 	mov	dpl,#0x30
      0004C7 12r03r88         [24] 2440 	lcall	_i2c_write_data
                           0004CA  2441 	C$i2c.h$310$1$111 ==.
                           0004CA  2442 	XG$Accel_Init$0$0 ==.
      0004CA 22               [24] 2443 	ret
                                   2444 ;------------------------------------------------------------
                                   2445 ;Allocation info for local variables in function 'Accel_Init_C'
                                   2446 ;------------------------------------------------------------
                           0004CB  2447 	G$Accel_Init_C$0$0 ==.
                           0004CB  2448 	C$i2c.h$313$1$111 ==.
                                   2449 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:313: void Accel_Init_C(void)
                                   2450 ;	-----------------------------------------
                                   2451 ;	 function Accel_Init_C
                                   2452 ;	-----------------------------------------
      0004CB                       2453 _Accel_Init_C:
                           0004CB  2454 	C$i2c.h$318$1$113 ==.
                                   2455 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:318: Data2[0]=0x04;  //set register address auto increment bit
      0004CB 75*00 04         [24] 2456 	mov	_Data2,#0x04
                           0004CE  2457 	C$i2c.h$319$1$113 ==.
                                   2458 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:319: i2c_write_data(addr_accelC, 0x23, Data2, 1);
      0004CE 75*0Br00         [24] 2459 	mov	_i2c_write_data_PARM_3,#_Data2
      0004D1 75*0C 00         [24] 2460 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004D4 75*0D 40         [24] 2461 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004D7 75*0A 23         [24] 2462 	mov	_i2c_write_data_PARM_2,#0x23
      0004DA 75*0E 01         [24] 2463 	mov	_i2c_write_data_PARM_4,#0x01
      0004DD 75 82 3A         [24] 2464 	mov	dpl,#0x3a
      0004E0 12r03r88         [24] 2465 	lcall	_i2c_write_data
                           0004E3  2466 	C$i2c.h$321$1$113 ==.
                                   2467 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:321: Data2[0]=0x6B;  //R20 normal power mode, 800Hz ODR, y & x axes enabled
      0004E3 75*00 6B         [24] 2468 	mov	_Data2,#0x6b
                           0004E6  2469 	C$i2c.h$323$1$113 ==.
                                   2470 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:323: Data2[1]=0x00;  //R21 Default - no HP filtering
      0004E6 75*01 00         [24] 2471 	mov	(_Data2 + 0x0001),#0x00
                           0004E9  2472 	C$i2c.h$325$1$113 ==.
                                   2473 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:325: Data2[2]=0x00;  //R22 Default - no interrupts enabled
      0004E9 75*02 00         [24] 2474 	mov	(_Data2 + 0x0002),#0x00
                           0004EC  2475 	C$i2c.h$326$1$113 ==.
                                   2476 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:326: i2c_write_data(addr_accelC, 0x20, Data2, 1);
      0004EC 75*0Br00         [24] 2477 	mov	_i2c_write_data_PARM_3,#_Data2
      0004EF 75*0C 00         [24] 2478 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004F2 75*0D 40         [24] 2479 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004F5 75*0A 20         [24] 2480 	mov	_i2c_write_data_PARM_2,#0x20
      0004F8 75*0E 01         [24] 2481 	mov	_i2c_write_data_PARM_4,#0x01
      0004FB 75 82 3A         [24] 2482 	mov	dpl,#0x3a
      0004FE 12r03r88         [24] 2483 	lcall	_i2c_write_data
                           000501  2484 	C$i2c.h$328$1$113 ==.
                           000501  2485 	XG$Accel_Init_C$0$0 ==.
      000501 22               [24] 2486 	ret
                                   2487 ;------------------------------------------------------------
                                   2488 ;Allocation info for local variables in function 'main'
                                   2489 ;------------------------------------------------------------
                           000502  2490 	G$main$0$0 ==.
                           000502  2491 	C$lab4.c$62$1$113 ==.
                                   2492 ;	C:\SiLabs\LITEC\Lab4\lab4.c:62: void main(void)
                                   2493 ;	-----------------------------------------
                                   2494 ;	 function main
                                   2495 ;	-----------------------------------------
      000502                       2496 _main:
                           000502  2497 	C$lab4.c$66$1$126 ==.
                                   2498 ;	C:\SiLabs\LITEC\Lab4\lab4.c:66: Sys_Init();
      000502 12r00r37         [24] 2499 	lcall	_Sys_Init
                           000505  2500 	C$lab4.c$67$1$126 ==.
                                   2501 ;	C:\SiLabs\LITEC\Lab4\lab4.c:67: putchar(' '); //the quotes in this line may not format correctly
      000505 75 82 20         [24] 2502 	mov	dpl,#0x20
      000508 12r00r4A         [24] 2503 	lcall	_putchar
                           00050B  2504 	C$lab4.c$68$1$126 ==.
                                   2505 ;	C:\SiLabs\LITEC\Lab4\lab4.c:68: Port_Init();
      00050B 12r07r6A         [24] 2506 	lcall	_Port_Init
                           00050E  2507 	C$lab4.c$69$1$126 ==.
                                   2508 ;	C:\SiLabs\LITEC\Lab4\lab4.c:69: ADC_Init();
      00050E 12r07r81         [24] 2509 	lcall	_ADC_Init
                           000511  2510 	C$lab4.c$70$1$126 ==.
                                   2511 ;	C:\SiLabs\LITEC\Lab4\lab4.c:70: XBR0_Init();
      000511 12r07r77         [24] 2512 	lcall	_XBR0_Init
                           000514  2513 	C$lab4.c$71$1$126 ==.
                                   2514 ;	C:\SiLabs\LITEC\Lab4\lab4.c:71: PCA_Init();
      000514 12r07r9D         [24] 2515 	lcall	_PCA_Init
                           000517  2516 	C$lab4.c$72$1$126 ==.
                                   2517 ;	C:\SiLabs\LITEC\Lab4\lab4.c:72: SMB_Init();
      000517 12r07r7B         [24] 2518 	lcall	_SMB_Init
                           00051A  2519 	C$lab4.c$73$1$126 ==.
                                   2520 ;	C:\SiLabs\LITEC\Lab4\lab4.c:73: Interrupt_Init();
      00051A 12r07rAA         [24] 2521 	lcall	_Interrupt_Init
                           00051D  2522 	C$lab4.c$76$1$126 ==.
                                   2523 ;	C:\SiLabs\LITEC\Lab4\lab4.c:76: printf("Car control menu:\n\r");
      00051D 74r29            [12] 2524 	mov	a,#___str_3
      00051F C0 E0            [24] 2525 	push	acc
      000521 74s00            [12] 2526 	mov	a,#(___str_3 >> 8)
      000523 C0 E0            [24] 2527 	push	acc
      000525 74 80            [12] 2528 	mov	a,#0x80
      000527 C0 E0            [24] 2529 	push	acc
      000529 12r00r00         [24] 2530 	lcall	_printf
      00052C 15 81            [12] 2531 	dec	sp
      00052E 15 81            [12] 2532 	dec	sp
      000530 15 81            [12] 2533 	dec	sp
                           000532  2534 	C$lab4.c$77$1$126 ==.
                                   2535 ;	C:\SiLabs\LITEC\Lab4\lab4.c:77: printf("Choose a desired heading from the options below:\n\r");
      000532 74r3D            [12] 2536 	mov	a,#___str_4
      000534 C0 E0            [24] 2537 	push	acc
      000536 74s00            [12] 2538 	mov	a,#(___str_4 >> 8)
      000538 C0 E0            [24] 2539 	push	acc
      00053A 74 80            [12] 2540 	mov	a,#0x80
      00053C C0 E0            [24] 2541 	push	acc
      00053E 12r00r00         [24] 2542 	lcall	_printf
      000541 15 81            [12] 2543 	dec	sp
      000543 15 81            [12] 2544 	dec	sp
      000545 15 81            [12] 2545 	dec	sp
                           000547  2546 	C$lab4.c$78$2$127 ==.
                                   2547 ;	C:\SiLabs\LITEC\Lab4\lab4.c:78: while(!loopcontrol) {//loop until it gets valid input
      000547                       2548 00113$:
      000547 E5*24            [12] 2549 	mov	a,_loopcontrol
      000549 70 79            [24] 2550 	jnz	00115$
                           00054B  2551 	C$lab4.c$79$2$127 ==.
                                   2552 ;	C:\SiLabs\LITEC\Lab4\lab4.c:79: printf("1) 0 degrees\n\r2) 90 degrees\n\r3) 180 degrees\n\r4) 270 degrees\n\r");
      00054B 74r70            [12] 2553 	mov	a,#___str_5
      00054D C0 E0            [24] 2554 	push	acc
      00054F 74s00            [12] 2555 	mov	a,#(___str_5 >> 8)
      000551 C0 E0            [24] 2556 	push	acc
      000553 74 80            [12] 2557 	mov	a,#0x80
      000555 C0 E0            [24] 2558 	push	acc
      000557 12r00r00         [24] 2559 	lcall	_printf
      00055A 15 81            [12] 2560 	dec	sp
      00055C 15 81            [12] 2561 	dec	sp
      00055E 15 81            [12] 2562 	dec	sp
                           000560  2563 	C$lab4.c$80$2$127 ==.
                                   2564 ;	C:\SiLabs\LITEC\Lab4\lab4.c:80: input = getchar();
      000560 12r00r54         [24] 2565 	lcall	_getchar
      000563 85 82*20         [24] 2566 	mov	_input,dpl
                           000566  2567 	C$lab4.c$81$2$127 ==.
                                   2568 ;	C:\SiLabs\LITEC\Lab4\lab4.c:81: if(input=='1') {
      000566 74 31            [12] 2569 	mov	a,#0x31
      000568 B5*20 0A         [24] 2570 	cjne	a,_input,00111$
                           00056B  2571 	C$lab4.c$82$3$128 ==.
                                   2572 ;	C:\SiLabs\LITEC\Lab4\lab4.c:82: desired=0;
      00056B E4               [12] 2573 	clr	a
      00056C F5*1A            [12] 2574 	mov	_desired,a
      00056E F5*1B            [12] 2575 	mov	(_desired + 1),a
                           000570  2576 	C$lab4.c$83$3$128 ==.
                                   2577 ;	C:\SiLabs\LITEC\Lab4\lab4.c:83: loopcontrol=1;
      000570 75*24 01         [24] 2578 	mov	_loopcontrol,#0x01
      000573 80 D2            [24] 2579 	sjmp	00113$
      000575                       2580 00111$:
                           000575  2581 	C$lab4.c$85$2$127 ==.
                                   2582 ;	C:\SiLabs\LITEC\Lab4\lab4.c:85: else if(input=='2') {
      000575 74 32            [12] 2583 	mov	a,#0x32
      000577 B5*20 0B         [24] 2584 	cjne	a,_input,00108$
                           00057A  2585 	C$lab4.c$86$3$129 ==.
                                   2586 ;	C:\SiLabs\LITEC\Lab4\lab4.c:86: desired=900;
      00057A 75*1A 84         [24] 2587 	mov	_desired,#0x84
      00057D 75*1B 03         [24] 2588 	mov	(_desired + 1),#0x03
                           000580  2589 	C$lab4.c$87$3$129 ==.
                                   2590 ;	C:\SiLabs\LITEC\Lab4\lab4.c:87: loopcontrol=1;
      000580 75*24 01         [24] 2591 	mov	_loopcontrol,#0x01
      000583 80 C2            [24] 2592 	sjmp	00113$
      000585                       2593 00108$:
                           000585  2594 	C$lab4.c$89$2$127 ==.
                                   2595 ;	C:\SiLabs\LITEC\Lab4\lab4.c:89: else if(input=='3') {
      000585 74 33            [12] 2596 	mov	a,#0x33
      000587 B5*20 0B         [24] 2597 	cjne	a,_input,00105$
                           00058A  2598 	C$lab4.c$90$3$130 ==.
                                   2599 ;	C:\SiLabs\LITEC\Lab4\lab4.c:90: desired=1800;
      00058A 75*1A 08         [24] 2600 	mov	_desired,#0x08
      00058D 75*1B 07         [24] 2601 	mov	(_desired + 1),#0x07
                           000590  2602 	C$lab4.c$91$3$130 ==.
                                   2603 ;	C:\SiLabs\LITEC\Lab4\lab4.c:91: loopcontrol=1;
      000590 75*24 01         [24] 2604 	mov	_loopcontrol,#0x01
      000593 80 B2            [24] 2605 	sjmp	00113$
      000595                       2606 00105$:
                           000595  2607 	C$lab4.c$93$2$127 ==.
                                   2608 ;	C:\SiLabs\LITEC\Lab4\lab4.c:93: else if(input=='4') {
      000595 74 34            [12] 2609 	mov	a,#0x34
      000597 B5*20 0B         [24] 2610 	cjne	a,_input,00102$
                           00059A  2611 	C$lab4.c$94$3$131 ==.
                                   2612 ;	C:\SiLabs\LITEC\Lab4\lab4.c:94: desired=2700;
      00059A 75*1A 8C         [24] 2613 	mov	_desired,#0x8c
      00059D 75*1B 0A         [24] 2614 	mov	(_desired + 1),#0x0a
                           0005A0  2615 	C$lab4.c$95$3$131 ==.
                                   2616 ;	C:\SiLabs\LITEC\Lab4\lab4.c:95: loopcontrol=1;
      0005A0 75*24 01         [24] 2617 	mov	_loopcontrol,#0x01
      0005A3 80 A2            [24] 2618 	sjmp	00113$
      0005A5                       2619 00102$:
                           0005A5  2620 	C$lab4.c$98$2$127 ==.
                                   2621 ;	C:\SiLabs\LITEC\Lab4\lab4.c:98: printf("Invalid input:%u, Please enter valid input.\n\r", input);
      0005A5 AE*20            [24] 2622 	mov	r6,_input
      0005A7 7F 00            [12] 2623 	mov	r7,#0x00
      0005A9 C0 06            [24] 2624 	push	ar6
      0005AB C0 07            [24] 2625 	push	ar7
      0005AD 74rAE            [12] 2626 	mov	a,#___str_6
      0005AF C0 E0            [24] 2627 	push	acc
      0005B1 74s00            [12] 2628 	mov	a,#(___str_6 >> 8)
      0005B3 C0 E0            [24] 2629 	push	acc
      0005B5 74 80            [12] 2630 	mov	a,#0x80
      0005B7 C0 E0            [24] 2631 	push	acc
      0005B9 12r00r00         [24] 2632 	lcall	_printf
      0005BC E5 81            [12] 2633 	mov	a,sp
      0005BE 24 FB            [12] 2634 	add	a,#0xfb
      0005C0 F5 81            [12] 2635 	mov	sp,a
      0005C2 80 83            [24] 2636 	sjmp	00113$
      0005C4                       2637 00115$:
                           0005C4  2638 	C$lab4.c$100$1$126 ==.
                                   2639 ;	C:\SiLabs\LITEC\Lab4\lab4.c:100: printf("Now use the potentiometer to select a steering gain.\n\r");
      0005C4 74rDC            [12] 2640 	mov	a,#___str_7
      0005C6 C0 E0            [24] 2641 	push	acc
      0005C8 74s00            [12] 2642 	mov	a,#(___str_7 >> 8)
      0005CA C0 E0            [24] 2643 	push	acc
      0005CC 74 80            [12] 2644 	mov	a,#0x80
      0005CE C0 E0            [24] 2645 	push	acc
      0005D0 12r00r00         [24] 2646 	lcall	_printf
      0005D3 15 81            [12] 2647 	dec	sp
      0005D5 15 81            [12] 2648 	dec	sp
      0005D7 15 81            [12] 2649 	dec	sp
                           0005D9  2650 	C$lab4.c$101$1$126 ==.
                                   2651 ;	C:\SiLabs\LITEC\Lab4\lab4.c:101: printf("Switch the slide switch when finished.\n\r");
      0005D9 74r13            [12] 2652 	mov	a,#___str_8
      0005DB C0 E0            [24] 2653 	push	acc
      0005DD 74s01            [12] 2654 	mov	a,#(___str_8 >> 8)
      0005DF C0 E0            [24] 2655 	push	acc
      0005E1 74 80            [12] 2656 	mov	a,#0x80
      0005E3 C0 E0            [24] 2657 	push	acc
      0005E5 12r00r00         [24] 2658 	lcall	_printf
      0005E8 15 81            [12] 2659 	dec	sp
      0005EA 15 81            [12] 2660 	dec	sp
      0005EC 15 81            [12] 2661 	dec	sp
                           0005EE  2662 	C$lab4.c$102$1$126 ==.
                                   2663 ;	C:\SiLabs\LITEC\Lab4\lab4.c:102: temp=SS;//store value of slide switch
      0005EE A2 B7            [12] 2664 	mov	c,_SS
      0005F0 E4               [12] 2665 	clr	a
      0005F1 33               [12] 2666 	rlc	a
      0005F2 F5*33            [12] 2667 	mov	_temp,a
      0005F4 75*34 00         [24] 2668 	mov	(_temp + 1),#0x00
                           0005F7  2669 	C$lab4.c$103$1$126 ==.
                                   2670 ;	C:\SiLabs\LITEC\Lab4\lab4.c:103: ccount=0;//reset timer
      0005F7 75*16 00         [24] 2671 	mov	_ccount,#0x00
                           0005FA  2672 	C$lab4.c$104$2$132 ==.
                                   2673 ;	C:\SiLabs\LITEC\Lab4\lab4.c:104: while(SS==temp) {//loops until user switches the slide switch
      0005FA                       2674 00119$:
      0005FA A2 B7            [12] 2675 	mov	c,_SS
      0005FC E4               [12] 2676 	clr	a
      0005FD 33               [12] 2677 	rlc	a
      0005FE FE               [12] 2678 	mov	r6,a
      0005FF 7F 00            [12] 2679 	mov	r7,#0x00
      000601 B5*33 06         [24] 2680 	cjne	a,_temp,00171$
      000604 EF               [12] 2681 	mov	a,r7
      000605 B5*34 02         [24] 2682 	cjne	a,(_temp + 1),00171$
      000608 80 03            [24] 2683 	sjmp	00172$
      00060A                       2684 00171$:
      00060A 02r06rB8         [24] 2685 	ljmp	00121$
      00060D                       2686 00172$:
                           00060D  2687 	C$lab4.c$105$2$132 ==.
                                   2688 ;	C:\SiLabs\LITEC\Lab4\lab4.c:105: while(ccount<40);//wait ~800ms
      00060D                       2689 00116$:
      00060D 74 D8            [12] 2690 	mov	a,#0x100 - 0x28
      00060F 25*16            [12] 2691 	add	a,_ccount
      000611 50 FA            [24] 2692 	jnc	00116$
                           000613  2693 	C$lab4.c$106$2$132 ==.
                                   2694 ;	C:\SiLabs\LITEC\Lab4\lab4.c:106: ADC_Convert();//get POT value
      000613 12r07r8B         [24] 2695 	lcall	_ADC_Convert
                           000616  2696 	C$lab4.c$107$1$126 ==.
                                   2697 ;	C:\SiLabs\LITEC\Lab4\lab4.c:107: k=(adc/255.0)*10.2;//calculate gain
      000616 85*23 82         [24] 2698 	mov	dpl,_adc
      000619 12r00r00         [24] 2699 	lcall	___uchar2fs
      00061C AC 82            [24] 2700 	mov	r4,dpl
      00061E AD 83            [24] 2701 	mov	r5,dph
      000620 AE F0            [24] 2702 	mov	r6,b
      000622 FF               [12] 2703 	mov	r7,a
      000623 E4               [12] 2704 	clr	a
      000624 C0 E0            [24] 2705 	push	acc
      000626 C0 E0            [24] 2706 	push	acc
      000628 74 7F            [12] 2707 	mov	a,#0x7f
      00062A C0 E0            [24] 2708 	push	acc
      00062C 74 43            [12] 2709 	mov	a,#0x43
      00062E C0 E0            [24] 2710 	push	acc
      000630 8C 82            [24] 2711 	mov	dpl,r4
      000632 8D 83            [24] 2712 	mov	dph,r5
      000634 8E F0            [24] 2713 	mov	b,r6
      000636 EF               [12] 2714 	mov	a,r7
      000637 12r00r00         [24] 2715 	lcall	___fsdiv
      00063A AC 82            [24] 2716 	mov	r4,dpl
      00063C AD 83            [24] 2717 	mov	r5,dph
      00063E AE F0            [24] 2718 	mov	r6,b
      000640 FF               [12] 2719 	mov	r7,a
      000641 E5 81            [12] 2720 	mov	a,sp
      000643 24 FC            [12] 2721 	add	a,#0xfc
      000645 F5 81            [12] 2722 	mov	sp,a
      000647 C0 04            [24] 2723 	push	ar4
      000649 C0 05            [24] 2724 	push	ar5
      00064B C0 06            [24] 2725 	push	ar6
      00064D C0 07            [24] 2726 	push	ar7
      00064F 90 33 33         [24] 2727 	mov	dptr,#0x3333
      000652 75 F0 23         [24] 2728 	mov	b,#0x23
      000655 74 41            [12] 2729 	mov	a,#0x41
      000657 12r00r00         [24] 2730 	lcall	___fsmul
      00065A 85 82*2F         [24] 2731 	mov	_k,dpl
      00065D 85 83*30         [24] 2732 	mov	(_k + 1),dph
      000660 85 F0*31         [24] 2733 	mov	(_k + 2),b
      000663 F5*32            [12] 2734 	mov	(_k + 3),a
      000665 E5 81            [12] 2735 	mov	a,sp
      000667 24 FC            [12] 2736 	add	a,#0xfc
      000669 F5 81            [12] 2737 	mov	sp,a
                           00066B  2738 	C$lab4.c$108$1$126 ==.
                                   2739 ;	C:\SiLabs\LITEC\Lab4\lab4.c:108: printf("Current value*100: %d\n\r", (int)(k*100));//print gain
      00066B C0*2F            [24] 2740 	push	_k
      00066D C0*30            [24] 2741 	push	(_k + 1)
      00066F C0*31            [24] 2742 	push	(_k + 2)
      000671 C0*32            [24] 2743 	push	(_k + 3)
      000673 90 00 00         [24] 2744 	mov	dptr,#0x0000
      000676 75 F0 C8         [24] 2745 	mov	b,#0xc8
      000679 74 42            [12] 2746 	mov	a,#0x42
      00067B 12r00r00         [24] 2747 	lcall	___fsmul
      00067E AC 82            [24] 2748 	mov	r4,dpl
      000680 AD 83            [24] 2749 	mov	r5,dph
      000682 AE F0            [24] 2750 	mov	r6,b
      000684 FF               [12] 2751 	mov	r7,a
      000685 E5 81            [12] 2752 	mov	a,sp
      000687 24 FC            [12] 2753 	add	a,#0xfc
      000689 F5 81            [12] 2754 	mov	sp,a
      00068B 8C 82            [24] 2755 	mov	dpl,r4
      00068D 8D 83            [24] 2756 	mov	dph,r5
      00068F 8E F0            [24] 2757 	mov	b,r6
      000691 EF               [12] 2758 	mov	a,r7
      000692 12r00r00         [24] 2759 	lcall	___fs2sint
      000695 AE 82            [24] 2760 	mov	r6,dpl
      000697 AF 83            [24] 2761 	mov	r7,dph
      000699 C0 06            [24] 2762 	push	ar6
      00069B C0 07            [24] 2763 	push	ar7
      00069D 74r3C            [12] 2764 	mov	a,#___str_9
      00069F C0 E0            [24] 2765 	push	acc
      0006A1 74s01            [12] 2766 	mov	a,#(___str_9 >> 8)
      0006A3 C0 E0            [24] 2767 	push	acc
      0006A5 74 80            [12] 2768 	mov	a,#0x80
      0006A7 C0 E0            [24] 2769 	push	acc
      0006A9 12r00r00         [24] 2770 	lcall	_printf
      0006AC E5 81            [12] 2771 	mov	a,sp
      0006AE 24 FB            [12] 2772 	add	a,#0xfb
      0006B0 F5 81            [12] 2773 	mov	sp,a
                           0006B2  2774 	C$lab4.c$109$2$132 ==.
                                   2775 ;	C:\SiLabs\LITEC\Lab4\lab4.c:109: ccount=0;//reset timer
      0006B2 75*16 00         [24] 2776 	mov	_ccount,#0x00
      0006B5 02r05rFA         [24] 2777 	ljmp	00119$
      0006B8                       2778 00121$:
                           0006B8  2779 	C$lab4.c$111$1$126 ==.
                                   2780 ;	C:\SiLabs\LITEC\Lab4\lab4.c:111: printf("Final gain*100:%d\n\r", (int)(k*100));//print the final gain value
      0006B8 C0*2F            [24] 2781 	push	_k
      0006BA C0*30            [24] 2782 	push	(_k + 1)
      0006BC C0*31            [24] 2783 	push	(_k + 2)
      0006BE C0*32            [24] 2784 	push	(_k + 3)
      0006C0 90 00 00         [24] 2785 	mov	dptr,#0x0000
      0006C3 75 F0 C8         [24] 2786 	mov	b,#0xc8
      0006C6 74 42            [12] 2787 	mov	a,#0x42
      0006C8 12r00r00         [24] 2788 	lcall	___fsmul
      0006CB AC 82            [24] 2789 	mov	r4,dpl
      0006CD AD 83            [24] 2790 	mov	r5,dph
      0006CF AE F0            [24] 2791 	mov	r6,b
      0006D1 FF               [12] 2792 	mov	r7,a
      0006D2 E5 81            [12] 2793 	mov	a,sp
      0006D4 24 FC            [12] 2794 	add	a,#0xfc
      0006D6 F5 81            [12] 2795 	mov	sp,a
      0006D8 8C 82            [24] 2796 	mov	dpl,r4
      0006DA 8D 83            [24] 2797 	mov	dph,r5
      0006DC 8E F0            [24] 2798 	mov	b,r6
      0006DE EF               [12] 2799 	mov	a,r7
      0006DF 12r00r00         [24] 2800 	lcall	___fs2sint
      0006E2 AE 82            [24] 2801 	mov	r6,dpl
      0006E4 AF 83            [24] 2802 	mov	r7,dph
      0006E6 C0 06            [24] 2803 	push	ar6
      0006E8 C0 07            [24] 2804 	push	ar7
      0006EA 74r54            [12] 2805 	mov	a,#___str_10
      0006EC C0 E0            [24] 2806 	push	acc
      0006EE 74s01            [12] 2807 	mov	a,#(___str_10 >> 8)
      0006F0 C0 E0            [24] 2808 	push	acc
      0006F2 74 80            [12] 2809 	mov	a,#0x80
      0006F4 C0 E0            [24] 2810 	push	acc
      0006F6 12r00r00         [24] 2811 	lcall	_printf
      0006F9 E5 81            [12] 2812 	mov	a,sp
      0006FB 24 FB            [12] 2813 	add	a,#0xfb
      0006FD F5 81            [12] 2814 	mov	sp,a
                           0006FF  2815 	C$lab4.c$114$1$126 ==.
                                   2816 ;	C:\SiLabs\LITEC\Lab4\lab4.c:114: SERVO_PW = PW_CENTER;
      0006FF 85*25*2B         [24] 2817 	mov	_SERVO_PW,_PW_CENTER
      000702 85*26*2C         [24] 2818 	mov	(_SERVO_PW + 1),(_PW_CENTER + 1)
                           000705  2819 	C$lab4.c$115$1$126 ==.
                                   2820 ;	C:\SiLabs\LITEC\Lab4\lab4.c:115: MOTOR_PW = PW_NEUT;
      000705 85*39*3B         [24] 2821 	mov	_MOTOR_PW,_PW_NEUT
      000708 85*3A*3C         [24] 2822 	mov	(_MOTOR_PW + 1),(_PW_NEUT + 1)
                           00070B  2823 	C$lab4.c$116$1$126 ==.
                                   2824 ;	C:\SiLabs\LITEC\Lab4\lab4.c:116: lcd_clear();
      00070B 12r00rFC         [24] 2825 	lcall	_lcd_clear
                           00070E  2826 	C$lab4.c$117$1$126 ==.
                                   2827 ;	C:\SiLabs\LITEC\Lab4\lab4.c:117: ccount=0;
      00070E 75*16 00         [24] 2828 	mov	_ccount,#0x00
                           000711  2829 	C$lab4.c$118$1$126 ==.
                                   2830 ;	C:\SiLabs\LITEC\Lab4\lab4.c:118: rcount=0;
      000711 75*17 00         [24] 2831 	mov	_rcount,#0x00
                           000714  2832 	C$lab4.c$119$1$126 ==.
                                   2833 ;	C:\SiLabs\LITEC\Lab4\lab4.c:119: while(1) {
      000714                       2834 00125$:
                           000714  2835 	C$lab4.c$120$2$133 ==.
                                   2836 ;	C:\SiLabs\LITEC\Lab4\lab4.c:120: Steering_Servo();//Servo control with compass
      000714 12r09r8D         [24] 2837 	lcall	_Steering_Servo
                           000717  2838 	C$lab4.c$121$2$133 ==.
                                   2839 ;	C:\SiLabs\LITEC\Lab4\lab4.c:121: Ranger();//Motor control with ranger
      000717 12r08r11         [24] 2840 	lcall	_Ranger
                           00071A  2841 	C$lab4.c$122$2$133 ==.
                                   2842 ;	C:\SiLabs\LITEC\Lab4\lab4.c:122: if(print_count>=25) {//print data every 1 seconds
      00071A C3               [12] 2843 	clr	c
      00071B E5*1E            [12] 2844 	mov	a,_print_count
      00071D 94 19            [12] 2845 	subb	a,#0x19
      00071F E5*1F            [12] 2846 	mov	a,(_print_count + 1)
      000721 94 00            [12] 2847 	subb	a,#0x00
      000723 40 EF            [24] 2848 	jc	00125$
                           000725  2849 	C$lab4.c$123$3$134 ==.
                                   2850 ;	C:\SiLabs\LITEC\Lab4\lab4.c:123: lcd_clear();
      000725 12r00rFC         [24] 2851 	lcall	_lcd_clear
                           000728  2852 	C$lab4.c$124$3$134 ==.
                                   2853 ;	C:\SiLabs\LITEC\Lab4\lab4.c:124: lcd_print("Heading: %u\nRanger Value: %u", heading, rangervalue);
      000728 C0*1C            [24] 2854 	push	_rangervalue
      00072A C0*1D            [24] 2855 	push	(_rangervalue + 1)
      00072C C0*18            [24] 2856 	push	_heading
      00072E C0*19            [24] 2857 	push	(_heading + 1)
      000730 74r68            [12] 2858 	mov	a,#___str_11
      000732 C0 E0            [24] 2859 	push	acc
      000734 74s01            [12] 2860 	mov	a,#(___str_11 >> 8)
      000736 C0 E0            [24] 2861 	push	acc
      000738 74 80            [12] 2862 	mov	a,#0x80
      00073A C0 E0            [24] 2863 	push	acc
      00073C 12r00r77         [24] 2864 	lcall	_lcd_print
      00073F E5 81            [12] 2865 	mov	a,sp
      000741 24 F9            [12] 2866 	add	a,#0xf9
      000743 F5 81            [12] 2867 	mov	sp,a
                           000745  2868 	C$lab4.c$125$3$134 ==.
                                   2869 ;	C:\SiLabs\LITEC\Lab4\lab4.c:125: printf("\n\rHeading: %u\t\tRanger Value: %u\n\r", heading, rangervalue);
      000745 C0*1C            [24] 2870 	push	_rangervalue
      000747 C0*1D            [24] 2871 	push	(_rangervalue + 1)
      000749 C0*18            [24] 2872 	push	_heading
      00074B C0*19            [24] 2873 	push	(_heading + 1)
      00074D 74r85            [12] 2874 	mov	a,#___str_12
      00074F C0 E0            [24] 2875 	push	acc
      000751 74s01            [12] 2876 	mov	a,#(___str_12 >> 8)
      000753 C0 E0            [24] 2877 	push	acc
      000755 74 80            [12] 2878 	mov	a,#0x80
      000757 C0 E0            [24] 2879 	push	acc
      000759 12r00r00         [24] 2880 	lcall	_printf
      00075C E5 81            [12] 2881 	mov	a,sp
      00075E 24 F9            [12] 2882 	add	a,#0xf9
      000760 F5 81            [12] 2883 	mov	sp,a
                           000762  2884 	C$lab4.c$126$3$134 ==.
                                   2885 ;	C:\SiLabs\LITEC\Lab4\lab4.c:126: print_count=0;
      000762 E4               [12] 2886 	clr	a
      000763 F5*1E            [12] 2887 	mov	_print_count,a
      000765 F5*1F            [12] 2888 	mov	(_print_count + 1),a
      000767 80 AB            [24] 2889 	sjmp	00125$
                           000769  2890 	C$lab4.c$129$1$126 ==.
                           000769  2891 	XG$main$0$0 ==.
      000769 22               [24] 2892 	ret
                                   2893 ;------------------------------------------------------------
                                   2894 ;Allocation info for local variables in function 'Port_Init'
                                   2895 ;------------------------------------------------------------
                           00076A  2896 	G$Port_Init$0$0 ==.
                           00076A  2897 	C$lab4.c$136$1$126 ==.
                                   2898 ;	C:\SiLabs\LITEC\Lab4\lab4.c:136: void Port_Init()
                                   2899 ;	-----------------------------------------
                                   2900 ;	 function Port_Init
                                   2901 ;	-----------------------------------------
      00076A                       2902 _Port_Init:
                           00076A  2903 	C$lab4.c$138$1$135 ==.
                                   2904 ;	C:\SiLabs\LITEC\Lab4\lab4.c:138: P1MDOUT = 0x05;//set output pin for CEX0,2 in push-pull mode
      00076A 75 A5 05         [24] 2905 	mov	_P1MDOUT,#0x05
                           00076D  2906 	C$lab4.c$139$1$135 ==.
                                   2907 ;	C:\SiLabs\LITEC\Lab4\lab4.c:139: P1 |= 0x80;	   //also set pin for POT in open-drain mode
      00076D 43 90 80         [24] 2908 	orl	_P1,#0x80
                           000770  2909 	C$lab4.c$140$1$135 ==.
                                   2910 ;	C:\SiLabs\LITEC\Lab4\lab4.c:140: P3MDOUT &= ~0x80;//set pin for slide switch in open-drain mode
      000770 53 A7 7F         [24] 2911 	anl	_P3MDOUT,#0x7f
                           000773  2912 	C$lab4.c$141$1$135 ==.
                                   2913 ;	C:\SiLabs\LITEC\Lab4\lab4.c:141: P3 |=0x80;
      000773 43 B0 80         [24] 2914 	orl	_P3,#0x80
                           000776  2915 	C$lab4.c$142$1$135 ==.
                           000776  2916 	XG$Port_Init$0$0 ==.
      000776 22               [24] 2917 	ret
                                   2918 ;------------------------------------------------------------
                                   2919 ;Allocation info for local variables in function 'XBR0_Init'
                                   2920 ;------------------------------------------------------------
                           000777  2921 	G$XBR0_Init$0$0 ==.
                           000777  2922 	C$lab4.c$149$1$135 ==.
                                   2923 ;	C:\SiLabs\LITEC\Lab4\lab4.c:149: void XBR0_Init()
                                   2924 ;	-----------------------------------------
                                   2925 ;	 function XBR0_Init
                                   2926 ;	-----------------------------------------
      000777                       2927 _XBR0_Init:
                           000777  2928 	C$lab4.c$151$1$136 ==.
                                   2929 ;	C:\SiLabs\LITEC\Lab4\lab4.c:151: XBR0 = 0x1F; //configure crossbar with UART, SPI, SMBus, and CEX channels 0,1,2
      000777 75 E1 1F         [24] 2930 	mov	_XBR0,#0x1f
                           00077A  2931 	C$lab4.c$152$1$136 ==.
                           00077A  2932 	XG$XBR0_Init$0$0 ==.
      00077A 22               [24] 2933 	ret
                                   2934 ;------------------------------------------------------------
                                   2935 ;Allocation info for local variables in function 'SMB_Init'
                                   2936 ;------------------------------------------------------------
                           00077B  2937 	G$SMB_Init$0$0 ==.
                           00077B  2938 	C$lab4.c$154$1$136 ==.
                                   2939 ;	C:\SiLabs\LITEC\Lab4\lab4.c:154: void SMB_Init(void) {//Set up i2c
                                   2940 ;	-----------------------------------------
                                   2941 ;	 function SMB_Init
                                   2942 ;	-----------------------------------------
      00077B                       2943 _SMB_Init:
                           00077B  2944 	C$lab4.c$155$1$138 ==.
                                   2945 ;	C:\SiLabs\LITEC\Lab4\lab4.c:155: SMB0CR = 0x93; //run at 100kHZ
      00077B 75 CF 93         [24] 2946 	mov	_SMB0CR,#0x93
                           00077E  2947 	C$lab4.c$156$1$138 ==.
                                   2948 ;	C:\SiLabs\LITEC\Lab4\lab4.c:156: ENSMB = 1; //enable smbus
      00077E D2 C6            [12] 2949 	setb	_ENSMB
                           000780  2950 	C$lab4.c$157$1$138 ==.
                           000780  2951 	XG$SMB_Init$0$0 ==.
      000780 22               [24] 2952 	ret
                                   2953 ;------------------------------------------------------------
                                   2954 ;Allocation info for local variables in function 'ADC_Init'
                                   2955 ;------------------------------------------------------------
                           000781  2956 	G$ADC_Init$0$0 ==.
                           000781  2957 	C$lab4.c$159$1$138 ==.
                                   2958 ;	C:\SiLabs\LITEC\Lab4\lab4.c:159: void ADC_Init(void) {		//initialize ADC
                                   2959 ;	-----------------------------------------
                                   2960 ;	 function ADC_Init
                                   2961 ;	-----------------------------------------
      000781                       2962 _ADC_Init:
                           000781  2963 	C$lab4.c$160$1$140 ==.
                                   2964 ;	C:\SiLabs\LITEC\Lab4\lab4.c:160: REF0CN = 0x03; 			//set Vref to use 2.4V
      000781 75 D1 03         [24] 2965 	mov	_REF0CN,#0x03
                           000784  2966 	C$lab4.c$161$1$140 ==.
                                   2967 ;	C:\SiLabs\LITEC\Lab4\lab4.c:161: ADC1CF |= 0x01;			//set gain of 1
      000784 43 AB 01         [24] 2968 	orl	_ADC1CF,#0x01
                           000787  2969 	C$lab4.c$162$1$140 ==.
                                   2970 ;	C:\SiLabs\LITEC\Lab4\lab4.c:162: ADC1CN = 0x80; 			//enable A/D converter
      000787 75 AA 80         [24] 2971 	mov	_ADC1CN,#0x80
                           00078A  2972 	C$lab4.c$164$1$140 ==.
                           00078A  2973 	XG$ADC_Init$0$0 ==.
      00078A 22               [24] 2974 	ret
                                   2975 ;------------------------------------------------------------
                                   2976 ;Allocation info for local variables in function 'ADC_Convert'
                                   2977 ;------------------------------------------------------------
                           00078B  2978 	G$ADC_Convert$0$0 ==.
                           00078B  2979 	C$lab4.c$166$1$140 ==.
                                   2980 ;	C:\SiLabs\LITEC\Lab4\lab4.c:166: void ADC_Convert(void) {	//get POT value
                                   2981 ;	-----------------------------------------
                                   2982 ;	 function ADC_Convert
                                   2983 ;	-----------------------------------------
      00078B                       2984 _ADC_Convert:
                           00078B  2985 	C$lab4.c$167$1$142 ==.
                                   2986 ;	C:\SiLabs\LITEC\Lab4\lab4.c:167: AMX1SL = 7;				//Set ADC to convert value on pin 7
      00078B 75 AC 07         [24] 2987 	mov	_AMX1SL,#0x07
                           00078E  2988 	C$lab4.c$168$1$142 ==.
                                   2989 ;	C:\SiLabs\LITEC\Lab4\lab4.c:168: ADC1CN &= ~0x20;//clear flag		
      00078E 53 AA DF         [24] 2990 	anl	_ADC1CN,#0xdf
                           000791  2991 	C$lab4.c$169$1$142 ==.
                                   2992 ;	C:\SiLabs\LITEC\Lab4\lab4.c:169: ADC1CN |= 0x10;//start conversion
      000791 43 AA 10         [24] 2993 	orl	_ADC1CN,#0x10
                           000794  2994 	C$lab4.c$170$1$142 ==.
                                   2995 ;	C:\SiLabs\LITEC\Lab4\lab4.c:170: while((ADC1CN & 0x20)==0x00);//wait for conversion to finish
      000794                       2996 00101$:
      000794 E5 AA            [12] 2997 	mov	a,_ADC1CN
      000796 30 E5 FB         [24] 2998 	jnb	acc.5,00101$
                           000799  2999 	C$lab4.c$171$1$142 ==.
                                   3000 ;	C:\SiLabs\LITEC\Lab4\lab4.c:171: adc = ADC1;//store adc value
      000799 85 9C*23         [24] 3001 	mov	_adc,_ADC1
                           00079C  3002 	C$lab4.c$172$1$142 ==.
                           00079C  3003 	XG$ADC_Convert$0$0 ==.
      00079C 22               [24] 3004 	ret
                                   3005 ;------------------------------------------------------------
                                   3006 ;Allocation info for local variables in function 'PCA_Init'
                                   3007 ;------------------------------------------------------------
                           00079D  3008 	G$PCA_Init$0$0 ==.
                           00079D  3009 	C$lab4.c$174$1$142 ==.
                                   3010 ;	C:\SiLabs\LITEC\Lab4\lab4.c:174: void PCA_Init(void)
                                   3011 ;	-----------------------------------------
                                   3012 ;	 function PCA_Init
                                   3013 ;	-----------------------------------------
      00079D                       3014 _PCA_Init:
                           00079D  3015 	C$lab4.c$176$1$144 ==.
                                   3016 ;	C:\SiLabs\LITEC\Lab4\lab4.c:176: PCA0MD = 0x81; //SYSCLK/12, enable CF interrupts, suspend when idle
      00079D 75 D9 81         [24] 3017 	mov	_PCA0MD,#0x81
                           0007A0  3018 	C$lab4.c$177$1$144 ==.
                                   3019 ;	C:\SiLabs\LITEC\Lab4\lab4.c:177: PCA0CPM0 = 0xC2; //16 bit, enable compare, enable PWM
      0007A0 75 DA C2         [24] 3020 	mov	_PCA0CPM0,#0xc2
                           0007A3  3021 	C$lab4.c$178$1$144 ==.
                                   3022 ;	C:\SiLabs\LITEC\Lab4\lab4.c:178: PCA0CPM2 = 0xC2; //set up CEX2 the same as CEX0
      0007A3 75 DC C2         [24] 3023 	mov	_PCA0CPM2,#0xc2
                           0007A6  3024 	C$lab4.c$179$1$144 ==.
                                   3025 ;	C:\SiLabs\LITEC\Lab4\lab4.c:179: PCA0CN |= 0x40; // enable PCA
      0007A6 43 D8 40         [24] 3026 	orl	_PCA0CN,#0x40
                           0007A9  3027 	C$lab4.c$180$1$144 ==.
                           0007A9  3028 	XG$PCA_Init$0$0 ==.
      0007A9 22               [24] 3029 	ret
                                   3030 ;------------------------------------------------------------
                                   3031 ;Allocation info for local variables in function 'Interrupt_Init'
                                   3032 ;------------------------------------------------------------
                           0007AA  3033 	G$Interrupt_Init$0$0 ==.
                           0007AA  3034 	C$lab4.c$182$1$144 ==.
                                   3035 ;	C:\SiLabs\LITEC\Lab4\lab4.c:182: void Interrupt_Init(void)
                                   3036 ;	-----------------------------------------
                                   3037 ;	 function Interrupt_Init
                                   3038 ;	-----------------------------------------
      0007AA                       3039 _Interrupt_Init:
                           0007AA  3040 	C$lab4.c$184$1$146 ==.
                                   3041 ;	C:\SiLabs\LITEC\Lab4\lab4.c:184: EIE1 |= 0x08;//enable PCA interrupts
      0007AA 43 E6 08         [24] 3042 	orl	_EIE1,#0x08
                           0007AD  3043 	C$lab4.c$186$1$146 ==.
                                   3044 ;	C:\SiLabs\LITEC\Lab4\lab4.c:186: EA=1;//enable all interrupts
      0007AD D2 AF            [12] 3045 	setb	_EA
                           0007AF  3046 	C$lab4.c$187$1$146 ==.
                           0007AF  3047 	XG$Interrupt_Init$0$0 ==.
      0007AF 22               [24] 3048 	ret
                                   3049 ;------------------------------------------------------------
                                   3050 ;Allocation info for local variables in function 'PCA_ISR'
                                   3051 ;------------------------------------------------------------
                           0007B0  3052 	G$PCA_ISR$0$0 ==.
                           0007B0  3053 	C$lab4.c$189$1$146 ==.
                                   3054 ;	C:\SiLabs\LITEC\Lab4\lab4.c:189: void PCA_ISR ( void ) __interrupt 9
                                   3055 ;	-----------------------------------------
                                   3056 ;	 function PCA_ISR
                                   3057 ;	-----------------------------------------
      0007B0                       3058 _PCA_ISR:
                           0007B0  3059 	C$lab4.c$191$1$148 ==.
                                   3060 ;	C:\SiLabs\LITEC\Lab4\lab4.c:191: if(CF) {
      0007B0 30 DF 0E         [24] 3061 	jnb	_CF,00102$
                           0007B3  3062 	C$lab4.c$192$2$149 ==.
                                   3063 ;	C:\SiLabs\LITEC\Lab4\lab4.c:192: PCA0 = PCA_start;//Start count
      0007B3 85*14 E9         [24] 3064 	mov	((_PCA0 >> 0) & 0xFF),_PCA_start
      0007B6 85*15 F9         [24] 3065 	mov	((_PCA0 >> 8) & 0xFF),(_PCA_start + 1)
                           0007B9  3066 	C$lab4.c$193$2$149 ==.
                                   3067 ;	C:\SiLabs\LITEC\Lab4\lab4.c:193: CF=0;//clear interrupt flag
      0007B9 C2 DF            [12] 3068 	clr	_CF
                           0007BB  3069 	C$lab4.c$194$2$149 ==.
                                   3070 ;	C:\SiLabs\LITEC\Lab4\lab4.c:194: ccount++;//increment compass counter
      0007BB 05*16            [12] 3071 	inc	_ccount
                           0007BD  3072 	C$lab4.c$195$2$149 ==.
                                   3073 ;	C:\SiLabs\LITEC\Lab4\lab4.c:195: rcount++;//increment ranger counter
      0007BD 05*17            [12] 3074 	inc	_rcount
      0007BF 80 03            [24] 3075 	sjmp	00104$
      0007C1                       3076 00102$:
                           0007C1  3077 	C$lab4.c$197$1$148 ==.
                                   3078 ;	C:\SiLabs\LITEC\Lab4\lab4.c:197: else PCA0CN &= 0xC0;//all other type 9 interrupts
      0007C1 53 D8 C0         [24] 3079 	anl	_PCA0CN,#0xc0
      0007C4                       3080 00104$:
                           0007C4  3081 	C$lab4.c$198$1$148 ==.
                           0007C4  3082 	XG$PCA_ISR$0$0 ==.
      0007C4 32               [24] 3083 	reti
                                   3084 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   3085 ;	eliminated unneeded push/pop psw
                                   3086 ;	eliminated unneeded push/pop dpl
                                   3087 ;	eliminated unneeded push/pop dph
                                   3088 ;	eliminated unneeded push/pop b
                                   3089 ;	eliminated unneeded push/pop acc
                                   3090 ;------------------------------------------------------------
                                   3091 ;Allocation info for local variables in function 'Read_Compass'
                                   3092 ;------------------------------------------------------------
                           0007C5  3093 	G$Read_Compass$0$0 ==.
                           0007C5  3094 	C$lab4.c$200$1$148 ==.
                                   3095 ;	C:\SiLabs\LITEC\Lab4\lab4.c:200: void Read_Compass(void) {
                                   3096 ;	-----------------------------------------
                                   3097 ;	 function Read_Compass
                                   3098 ;	-----------------------------------------
      0007C5                       3099 _Read_Compass:
                           0007C5  3100 	C$lab4.c$201$1$151 ==.
                                   3101 ;	C:\SiLabs\LITEC\Lab4\lab4.c:201: i2c_read_data(0xC0, 2, Data, 2);//read two bytes starting at reg. 2
      0007C5 75*10r21         [24] 3102 	mov	_i2c_read_data_PARM_3,#_Data
      0007C8 75*11 00         [24] 3103 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0007CB 75*12 40         [24] 3104 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0007CE 75*0F 02         [24] 3105 	mov	_i2c_read_data_PARM_2,#0x02
      0007D1 75*13 02         [24] 3106 	mov	_i2c_read_data_PARM_4,#0x02
      0007D4 75 82 C0         [24] 3107 	mov	dpl,#0xc0
      0007D7 12r04r02         [24] 3108 	lcall	_i2c_read_data
                           0007DA  3109 	C$lab4.c$202$1$151 ==.
                                   3110 ;	C:\SiLabs\LITEC\Lab4\lab4.c:202: heading = (((unsigned int)Data[0]<<8) | Data[1]);//combine data
      0007DA AF*21            [24] 3111 	mov	r7,_Data
      0007DC 7E 00            [12] 3112 	mov	r6,#0x00
      0007DE AC*22            [24] 3113 	mov	r4,(_Data + 0x0001)
      0007E0 7D 00            [12] 3114 	mov	r5,#0x00
      0007E2 EC               [12] 3115 	mov	a,r4
      0007E3 4E               [12] 3116 	orl	a,r6
      0007E4 F5*18            [12] 3117 	mov	_heading,a
      0007E6 ED               [12] 3118 	mov	a,r5
      0007E7 4F               [12] 3119 	orl	a,r7
      0007E8 F5*19            [12] 3120 	mov	(_heading + 1),a
                           0007EA  3121 	C$lab4.c$203$1$151 ==.
                           0007EA  3122 	XG$Read_Compass$0$0 ==.
      0007EA 22               [24] 3123 	ret
                                   3124 ;------------------------------------------------------------
                                   3125 ;Allocation info for local variables in function 'ReadRanger'
                                   3126 ;------------------------------------------------------------
                                   3127 ;range                     Allocated to registers 
                                   3128 ;addr                      Allocated to registers 
                                   3129 ;------------------------------------------------------------
                           0007EB  3130 	G$ReadRanger$0$0 ==.
                           0007EB  3131 	C$lab4.c$205$1$151 ==.
                                   3132 ;	C:\SiLabs\LITEC\Lab4\lab4.c:205: unsigned int ReadRanger()
                                   3133 ;	-----------------------------------------
                                   3134 ;	 function ReadRanger
                                   3135 ;	-----------------------------------------
      0007EB                       3136 _ReadRanger:
                           0007EB  3137 	C$lab4.c$209$1$152 ==.
                                   3138 ;	C:\SiLabs\LITEC\Lab4\lab4.c:209: i2c_read_data(addr,2, Data, 2);    // read two bytes, starting at reg 2 
      0007EB 75*10r21         [24] 3139 	mov	_i2c_read_data_PARM_3,#_Data
      0007EE 75*11 00         [24] 3140 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0007F1 75*12 40         [24] 3141 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0007F4 75*0F 02         [24] 3142 	mov	_i2c_read_data_PARM_2,#0x02
      0007F7 75*13 02         [24] 3143 	mov	_i2c_read_data_PARM_4,#0x02
      0007FA 75 82 E0         [24] 3144 	mov	dpl,#0xe0
      0007FD 12r04r02         [24] 3145 	lcall	_i2c_read_data
                           000800  3146 	C$lab4.c$210$1$152 ==.
                                   3147 ;	C:\SiLabs\LITEC\Lab4\lab4.c:210: range = (((unsigned int)Data[0] << 8) | Data[1]);    //value read from i2c 
      000800 AF*21            [24] 3148 	mov	r7,_Data
      000802 7E 00            [12] 3149 	mov	r6,#0x00
      000804 AC*22            [24] 3150 	mov	r4,(_Data + 0x0001)
      000806 7D 00            [12] 3151 	mov	r5,#0x00
      000808 EC               [12] 3152 	mov	a,r4
      000809 4E               [12] 3153 	orl	a,r6
      00080A F5 82            [12] 3154 	mov	dpl,a
      00080C ED               [12] 3155 	mov	a,r5
      00080D 4F               [12] 3156 	orl	a,r7
      00080E F5 83            [12] 3157 	mov	dph,a
                           000810  3158 	C$lab4.c$211$1$152 ==.
                                   3159 ;	C:\SiLabs\LITEC\Lab4\lab4.c:211: return range;
                           000810  3160 	C$lab4.c$212$1$152 ==.
                           000810  3161 	XG$ReadRanger$0$0 ==.
      000810 22               [24] 3162 	ret
                                   3163 ;------------------------------------------------------------
                                   3164 ;Allocation info for local variables in function 'Ranger'
                                   3165 ;------------------------------------------------------------
                           000811  3166 	G$Ranger$0$0 ==.
                           000811  3167 	C$lab4.c$214$1$152 ==.
                                   3168 ;	C:\SiLabs\LITEC\Lab4\lab4.c:214: void Ranger(void)//function to control the motor with the ranger
                                   3169 ;	-----------------------------------------
                                   3170 ;	 function Ranger
                                   3171 ;	-----------------------------------------
      000811                       3172 _Ranger:
                           000811  3173 	C$lab4.c$219$1$154 ==.
                                   3174 ;	C:\SiLabs\LITEC\Lab4\lab4.c:219: if(rcount>=4) {
      000811 74 FC            [12] 3175 	mov	a,#0x100 - 0x04
      000813 25*17            [12] 3176 	add	a,_rcount
      000815 50 24            [24] 3177 	jnc	00102$
                           000817  3178 	C$lab4.c$220$2$155 ==.
                                   3179 ;	C:\SiLabs\LITEC\Lab4\lab4.c:220: rangervalue = ReadRanger();//get ranger value
      000817 12r07rEB         [24] 3180 	lcall	_ReadRanger
      00081A 85 82*1C         [24] 3181 	mov	_rangervalue,dpl
      00081D 85 83*1D         [24] 3182 	mov	(_rangervalue + 1),dph
                           000820  3183 	C$lab4.c$221$2$155 ==.
                                   3184 ;	C:\SiLabs\LITEC\Lab4\lab4.c:221: Data[0] = 0x51;                //sets results in cm
      000820 75*21 51         [24] 3185 	mov	_Data,#0x51
                           000823  3186 	C$lab4.c$222$2$155 ==.
                                   3187 ;	C:\SiLabs\LITEC\Lab4\lab4.c:222: i2c_write_data(0xE0,0,Data,1);    //Write one byte of data to reg 0 at addr			
      000823 75*0Br21         [24] 3188 	mov	_i2c_write_data_PARM_3,#_Data
      000826 75*0C 00         [24] 3189 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000829 75*0D 40         [24] 3190 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00082C 75*0A 00         [24] 3191 	mov	_i2c_write_data_PARM_2,#0x00
      00082F 75*0E 01         [24] 3192 	mov	_i2c_write_data_PARM_4,#0x01
      000832 75 82 E0         [24] 3193 	mov	dpl,#0xe0
      000835 12r03r88         [24] 3194 	lcall	_i2c_write_data
                           000838  3195 	C$lab4.c$223$2$155 ==.
                                   3196 ;	C:\SiLabs\LITEC\Lab4\lab4.c:223: rcount=0;
      000838 75*17 00         [24] 3197 	mov	_rcount,#0x00
      00083B                       3198 00102$:
                           00083B  3199 	C$lab4.c$226$1$154 ==.
                                   3200 ;	C:\SiLabs\LITEC\Lab4\lab4.c:226: if(rangervalue<30 && !SS && !stop) {//if it detects an obstacle and program is running
      00083B C3               [12] 3201 	clr	c
      00083C E5*1C            [12] 3202 	mov	a,_rangervalue
      00083E 94 1E            [12] 3203 	subb	a,#0x1e
      000840 E5*1D            [12] 3204 	mov	a,(_rangervalue + 1)
      000842 94 00            [12] 3205 	subb	a,#0x00
      000844 40 03            [24] 3206 	jc	00170$
      000846 02r09r64         [24] 3207 	ljmp	00121$
      000849                       3208 00170$:
      000849 30 B7 03         [24] 3209 	jnb	_SS,00171$
      00084C 02r09r64         [24] 3210 	ljmp	00121$
      00084F                       3211 00171$:
      00084F E5*3E            [12] 3212 	mov	a,_stop
      000851 60 03            [24] 3213 	jz	00172$
      000853 02r09r64         [24] 3214 	ljmp	00121$
      000856                       3215 00172$:
                           000856  3216 	C$lab4.c$227$2$156 ==.
                                   3217 ;	C:\SiLabs\LITEC\Lab4\lab4.c:227: if(obstacle>=1) {//if this is the second obstacle
      000856 74 FF            [12] 3218 	mov	a,#0x100 - 0x01
      000858 25*3D            [12] 3219 	add	a,_obstacle
      00085A 50 1B            [24] 3220 	jnc	00118$
                           00085C  3221 	C$lab4.c$228$3$157 ==.
                                   3222 ;	C:\SiLabs\LITEC\Lab4\lab4.c:228: printf("Second obstacle found\n\r");
      00085C 74rA7            [12] 3223 	mov	a,#___str_13
      00085E C0 E0            [24] 3224 	push	acc
      000860 74s01            [12] 3225 	mov	a,#(___str_13 >> 8)
      000862 C0 E0            [24] 3226 	push	acc
      000864 74 80            [12] 3227 	mov	a,#0x80
      000866 C0 E0            [24] 3228 	push	acc
      000868 12r00r00         [24] 3229 	lcall	_printf
      00086B 15 81            [12] 3230 	dec	sp
      00086D 15 81            [12] 3231 	dec	sp
      00086F 15 81            [12] 3232 	dec	sp
                           000871  3233 	C$lab4.c$229$3$157 ==.
                                   3234 ;	C:\SiLabs\LITEC\Lab4\lab4.c:229: stop=1;//stop the car
      000871 75*3E 01         [24] 3235 	mov	_stop,#0x01
      000874 02r09r64         [24] 3236 	ljmp	00121$
      000877                       3237 00118$:
                           000877  3238 	C$lab4.c$232$3$158 ==.
                                   3239 ;	C:\SiLabs\LITEC\Lab4\lab4.c:232: temp=MOTOR_PW;//store pulsewidth
      000877 85*3B*33         [24] 3240 	mov	_temp,_MOTOR_PW
      00087A 85*3C*34         [24] 3241 	mov	(_temp + 1),(_MOTOR_PW + 1)
                           00087D  3242 	C$lab4.c$233$3$158 ==.
                                   3243 ;	C:\SiLabs\LITEC\Lab4\lab4.c:233: MOTOR_PW=PW_NEUT;//stop car
      00087D 85*39*3B         [24] 3244 	mov	_MOTOR_PW,_PW_NEUT
      000880 85*3A*3C         [24] 3245 	mov	(_MOTOR_PW + 1),(_PW_NEUT + 1)
                           000883  3246 	C$lab4.c$234$3$158 ==.
                                   3247 ;	C:\SiLabs\LITEC\Lab4\lab4.c:234: PCA0CP2 = 0xFFFF - MOTOR_PW;
      000883 74 FF            [12] 3248 	mov	a,#0xff
      000885 C3               [12] 3249 	clr	c
      000886 95*3B            [12] 3250 	subb	a,_MOTOR_PW
      000888 F5 EC            [12] 3251 	mov	((_PCA0CP2 >> 0) & 0xFF),a
      00088A 74 FF            [12] 3252 	mov	a,#0xff
      00088C 95*3C            [12] 3253 	subb	a,(_MOTOR_PW + 1)
      00088E F5 FC            [12] 3254 	mov	((_PCA0CP2 >> 8) & 0xFF),a
                           000890  3255 	C$lab4.c$235$3$158 ==.
                                   3256 ;	C:\SiLabs\LITEC\Lab4\lab4.c:235: obstacle++;
      000890 05*3D            [12] 3257 	inc	_obstacle
                           000892  3258 	C$lab4.c$236$3$158 ==.
                                   3259 ;	C:\SiLabs\LITEC\Lab4\lab4.c:236: printf("Obstacle detected. Press 'r' or 'l' to steer around obstacle.");
      000892 74rBF            [12] 3260 	mov	a,#___str_14
      000894 C0 E0            [24] 3261 	push	acc
      000896 74s01            [12] 3262 	mov	a,#(___str_14 >> 8)
      000898 C0 E0            [24] 3263 	push	acc
      00089A 74 80            [12] 3264 	mov	a,#0x80
      00089C C0 E0            [24] 3265 	push	acc
      00089E 12r00r00         [24] 3266 	lcall	_printf
      0008A1 15 81            [12] 3267 	dec	sp
      0008A3 15 81            [12] 3268 	dec	sp
      0008A5 15 81            [12] 3269 	dec	sp
                           0008A7  3270 	C$lab4.c$237$3$158 ==.
                                   3271 ;	C:\SiLabs\LITEC\Lab4\lab4.c:237: input=getchar();//print instructions and get user input
      0008A7 12r00r54         [24] 3272 	lcall	_getchar
      0008AA 85 82*20         [24] 3273 	mov	_input,dpl
                           0008AD  3274 	C$lab4.c$238$3$158 ==.
                                   3275 ;	C:\SiLabs\LITEC\Lab4\lab4.c:238: loopcontrol=0;
      0008AD 75*24 00         [24] 3276 	mov	_loopcontrol,#0x00
                           0008B0  3277 	C$lab4.c$239$5$162 ==.
                                   3278 ;	C:\SiLabs\LITEC\Lab4\lab4.c:239: while(!loopcontrol) {//wait until it gets valid input
      0008B0                       3279 00111$:
      0008B0 E5*24            [12] 3280 	mov	a,_loopcontrol
      0008B2 70 4B            [24] 3281 	jnz	00113$
                           0008B4  3282 	C$lab4.c$240$4$159 ==.
                                   3283 ;	C:\SiLabs\LITEC\Lab4\lab4.c:240: if(input=='l' || input=='L') {//set steering to all the way left
      0008B4 74 6C            [12] 3284 	mov	a,#0x6c
      0008B6 B5*20 02         [24] 3285 	cjne	a,_input,00175$
      0008B9 80 05            [24] 3286 	sjmp	00107$
      0008BB                       3287 00175$:
      0008BB 74 4C            [12] 3288 	mov	a,#0x4c
      0008BD B5*20 0B         [24] 3289 	cjne	a,_input,00108$
      0008C0                       3290 00107$:
                           0008C0  3291 	C$lab4.c$241$5$160 ==.
                                   3292 ;	C:\SiLabs\LITEC\Lab4\lab4.c:241: SERVO_PW = PW_LEFT;
      0008C0 85*29*2B         [24] 3293 	mov	_SERVO_PW,_PW_LEFT
      0008C3 85*2A*2C         [24] 3294 	mov	(_SERVO_PW + 1),(_PW_LEFT + 1)
                           0008C6  3295 	C$lab4.c$242$5$160 ==.
                                   3296 ;	C:\SiLabs\LITEC\Lab4\lab4.c:242: loopcontrol=1;
      0008C6 75*24 01         [24] 3297 	mov	_loopcontrol,#0x01
      0008C9 80 E5            [24] 3298 	sjmp	00111$
      0008CB                       3299 00108$:
                           0008CB  3300 	C$lab4.c$244$4$159 ==.
                                   3301 ;	C:\SiLabs\LITEC\Lab4\lab4.c:244: else if(input=='r' || input=='R') {//set steering to max right
      0008CB 74 72            [12] 3302 	mov	a,#0x72
      0008CD B5*20 02         [24] 3303 	cjne	a,_input,00178$
      0008D0 80 05            [24] 3304 	sjmp	00103$
      0008D2                       3305 00178$:
      0008D2 74 52            [12] 3306 	mov	a,#0x52
      0008D4 B5*20 0B         [24] 3307 	cjne	a,_input,00104$
      0008D7                       3308 00103$:
                           0008D7  3309 	C$lab4.c$245$5$161 ==.
                                   3310 ;	C:\SiLabs\LITEC\Lab4\lab4.c:245: SERVO_PW = PW_RIGHT;
      0008D7 85*27*2B         [24] 3311 	mov	_SERVO_PW,_PW_RIGHT
      0008DA 85*28*2C         [24] 3312 	mov	(_SERVO_PW + 1),(_PW_RIGHT + 1)
                           0008DD  3313 	C$lab4.c$246$5$161 ==.
                                   3314 ;	C:\SiLabs\LITEC\Lab4\lab4.c:246: loopcontrol=1;
      0008DD 75*24 01         [24] 3315 	mov	_loopcontrol,#0x01
      0008E0 80 CE            [24] 3316 	sjmp	00111$
      0008E2                       3317 00104$:
                           0008E2  3318 	C$lab4.c$249$5$162 ==.
                                   3319 ;	C:\SiLabs\LITEC\Lab4\lab4.c:249: printf("Invalid input. Please enter 'l' or 'r'.\n\r");
      0008E2 74rFD            [12] 3320 	mov	a,#___str_15
      0008E4 C0 E0            [24] 3321 	push	acc
      0008E6 74s01            [12] 3322 	mov	a,#(___str_15 >> 8)
      0008E8 C0 E0            [24] 3323 	push	acc
      0008EA 74 80            [12] 3324 	mov	a,#0x80
      0008EC C0 E0            [24] 3325 	push	acc
      0008EE 12r00r00         [24] 3326 	lcall	_printf
      0008F1 15 81            [12] 3327 	dec	sp
      0008F3 15 81            [12] 3328 	dec	sp
      0008F5 15 81            [12] 3329 	dec	sp
                           0008F7  3330 	C$lab4.c$250$5$162 ==.
                                   3331 ;	C:\SiLabs\LITEC\Lab4\lab4.c:250: input=getchar();
      0008F7 12r00r54         [24] 3332 	lcall	_getchar
      0008FA 85 82*20         [24] 3333 	mov	_input,dpl
      0008FD 80 B1            [24] 3334 	sjmp	00111$
      0008FF                       3335 00113$:
                           0008FF  3336 	C$lab4.c$253$3$158 ==.
                                   3337 ;	C:\SiLabs\LITEC\Lab4\lab4.c:253: PCA0CP0 = 0xFFFF - SERVO_PW;
      0008FF 74 FF            [12] 3338 	mov	a,#0xff
      000901 C3               [12] 3339 	clr	c
      000902 95*2B            [12] 3340 	subb	a,_SERVO_PW
      000904 F5 EA            [12] 3341 	mov	((_PCA0CP0 >> 0) & 0xFF),a
      000906 74 FF            [12] 3342 	mov	a,#0xff
      000908 95*2C            [12] 3343 	subb	a,(_SERVO_PW + 1)
      00090A F5 FA            [12] 3344 	mov	((_PCA0CP0 >> 8) & 0xFF),a
                           00090C  3345 	C$lab4.c$254$3$158 ==.
                                   3346 ;	C:\SiLabs\LITEC\Lab4\lab4.c:254: printf("\n\rPress space when the car is around the obstacle\n\r");
      00090C 74r27            [12] 3347 	mov	a,#___str_16
      00090E C0 E0            [24] 3348 	push	acc
      000910 74s02            [12] 3349 	mov	a,#(___str_16 >> 8)
      000912 C0 E0            [24] 3350 	push	acc
      000914 74 80            [12] 3351 	mov	a,#0x80
      000916 C0 E0            [24] 3352 	push	acc
      000918 12r00r00         [24] 3353 	lcall	_printf
      00091B 15 81            [12] 3354 	dec	sp
      00091D 15 81            [12] 3355 	dec	sp
      00091F 15 81            [12] 3356 	dec	sp
                           000921  3357 	C$lab4.c$255$3$158 ==.
                                   3358 ;	C:\SiLabs\LITEC\Lab4\lab4.c:255: MOTOR_PW = temp;
      000921 85*33*3B         [24] 3359 	mov	_MOTOR_PW,_temp
      000924 85*34*3C         [24] 3360 	mov	(_MOTOR_PW + 1),(_temp + 1)
                           000927  3361 	C$lab4.c$256$3$158 ==.
                                   3362 ;	C:\SiLabs\LITEC\Lab4\lab4.c:256: PCA0CP2 = 0xFFFF - MOTOR_PW;
      000927 74 FF            [12] 3363 	mov	a,#0xff
      000929 C3               [12] 3364 	clr	c
      00092A 95*3B            [12] 3365 	subb	a,_MOTOR_PW
      00092C F5 EC            [12] 3366 	mov	((_PCA0CP2 >> 0) & 0xFF),a
      00092E 74 FF            [12] 3367 	mov	a,#0xff
      000930 95*3C            [12] 3368 	subb	a,(_MOTOR_PW + 1)
      000932 F5 FC            [12] 3369 	mov	((_PCA0CP2 >> 8) & 0xFF),a
                           000934  3370 	C$lab4.c$258$3$158 ==.
                                   3371 ;	C:\SiLabs\LITEC\Lab4\lab4.c:258: getchar();//run in that direction until user presses a character
      000934 12r00r54         [24] 3372 	lcall	_getchar
                           000937  3373 	C$lab4.c$260$3$158 ==.
                                   3374 ;	C:\SiLabs\LITEC\Lab4\lab4.c:260: Data[0] = 0x51;                //write 0x51 to reg 0 of the ranger, sets results in cm
      000937 75*21 51         [24] 3375 	mov	_Data,#0x51
                           00093A  3376 	C$lab4.c$261$3$158 ==.
                                   3377 ;	C:\SiLabs\LITEC\Lab4\lab4.c:261: i2c_write_data(0xE0,0,Data,1);    //Write one byte of data to reg 0 at addr
      00093A 75*0Br21         [24] 3378 	mov	_i2c_write_data_PARM_3,#_Data
      00093D 75*0C 00         [24] 3379 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000940 75*0D 40         [24] 3380 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000943 75*0A 00         [24] 3381 	mov	_i2c_write_data_PARM_2,#0x00
      000946 75*0E 01         [24] 3382 	mov	_i2c_write_data_PARM_4,#0x01
      000949 75 82 E0         [24] 3383 	mov	dpl,#0xe0
      00094C 12r03r88         [24] 3384 	lcall	_i2c_write_data
                           00094F  3385 	C$lab4.c$262$3$158 ==.
                                   3386 ;	C:\SiLabs\LITEC\Lab4\lab4.c:262: rcount=0;
      00094F 75*17 00         [24] 3387 	mov	_rcount,#0x00
                           000952  3388 	C$lab4.c$263$3$158 ==.
                                   3389 ;	C:\SiLabs\LITEC\Lab4\lab4.c:263: while(rcount<4);
      000952                       3390 00114$:
      000952 74 FC            [12] 3391 	mov	a,#0x100 - 0x04
      000954 25*17            [12] 3392 	add	a,_rcount
      000956 50 FA            [24] 3393 	jnc	00114$
                           000958  3394 	C$lab4.c$264$3$158 ==.
                                   3395 ;	C:\SiLabs\LITEC\Lab4\lab4.c:264: rangervalue=ReadRanger();//make a read from the ranger that does nothing
      000958 12r07rEB         [24] 3396 	lcall	_ReadRanger
      00095B 85 82*1C         [24] 3397 	mov	_rangervalue,dpl
      00095E 85 83*1D         [24] 3398 	mov	(_rangervalue + 1),dph
                           000961  3399 	C$lab4.c$266$3$158 ==.
                                   3400 ;	C:\SiLabs\LITEC\Lab4\lab4.c:266: rcount=0;
      000961 75*17 00         [24] 3401 	mov	_rcount,#0x00
      000964                       3402 00121$:
                           000964  3403 	C$lab4.c$270$1$154 ==.
                                   3404 ;	C:\SiLabs\LITEC\Lab4\lab4.c:270: if(!SS && !stop) {//if program is running
      000964 20 B7 12         [24] 3405 	jb	_SS,00125$
      000967 E5*3E            [12] 3406 	mov	a,_stop
      000969 70 0E            [24] 3407 	jnz	00125$
                           00096B  3408 	C$lab4.c$273$2$163 ==.
                                   3409 ;	C:\SiLabs\LITEC\Lab4\lab4.c:273: MOTOR_PW = PW_MAX-250;
      00096B E5*37            [12] 3410 	mov	a,_PW_MAX
      00096D 24 06            [12] 3411 	add	a,#0x06
      00096F F5*3B            [12] 3412 	mov	_MOTOR_PW,a
      000971 E5*38            [12] 3413 	mov	a,(_PW_MAX + 1)
      000973 34 FF            [12] 3414 	addc	a,#0xff
      000975 F5*3C            [12] 3415 	mov	(_MOTOR_PW + 1),a
      000977 80 06            [24] 3416 	sjmp	00126$
      000979                       3417 00125$:
                           000979  3418 	C$lab4.c$277$1$154 ==.
                                   3419 ;	C:\SiLabs\LITEC\Lab4\lab4.c:277: MOTOR_PW = PW_NEUT;//motor is stopped
      000979 85*39*3B         [24] 3420 	mov	_MOTOR_PW,_PW_NEUT
      00097C 85*3A*3C         [24] 3421 	mov	(_MOTOR_PW + 1),(_PW_NEUT + 1)
      00097F                       3422 00126$:
                           00097F  3423 	C$lab4.c$279$1$154 ==.
                                   3424 ;	C:\SiLabs\LITEC\Lab4\lab4.c:279: PCA0CP2 = 0xFFFF - MOTOR_PW;
      00097F 74 FF            [12] 3425 	mov	a,#0xff
      000981 C3               [12] 3426 	clr	c
      000982 95*3B            [12] 3427 	subb	a,_MOTOR_PW
      000984 F5 EC            [12] 3428 	mov	((_PCA0CP2 >> 0) & 0xFF),a
      000986 74 FF            [12] 3429 	mov	a,#0xff
      000988 95*3C            [12] 3430 	subb	a,(_MOTOR_PW + 1)
      00098A F5 FC            [12] 3431 	mov	((_PCA0CP2 >> 8) & 0xFF),a
                           00098C  3432 	C$lab4.c$281$1$154 ==.
                           00098C  3433 	XG$Ranger$0$0 ==.
      00098C 22               [24] 3434 	ret
                                   3435 ;------------------------------------------------------------
                                   3436 ;Allocation info for local variables in function 'Steering_Servo'
                                   3437 ;------------------------------------------------------------
                           00098D  3438 	G$Steering_Servo$0$0 ==.
                           00098D  3439 	C$lab4.c$283$1$154 ==.
                                   3440 ;	C:\SiLabs\LITEC\Lab4\lab4.c:283: void Steering_Servo()//function to control the steering with the compass
                                   3441 ;	-----------------------------------------
                                   3442 ;	 function Steering_Servo
                                   3443 ;	-----------------------------------------
      00098D                       3444 _Steering_Servo:
                           00098D  3445 	C$lab4.c$286$1$164 ==.
                                   3446 ;	C:\SiLabs\LITEC\Lab4\lab4.c:286: if(ccount>=2) {//every 40ms read the compass
      00098D 74 FE            [12] 3447 	mov	a,#0x100 - 0x02
      00098F 25*16            [12] 3448 	add	a,_ccount
      000991 50 0E            [24] 3449 	jnc	00102$
                           000993  3450 	C$lab4.c$287$2$165 ==.
                                   3451 ;	C:\SiLabs\LITEC\Lab4\lab4.c:287: print_count++;
      000993 05*1E            [12] 3452 	inc	_print_count
      000995 E4               [12] 3453 	clr	a
      000996 B5*1E 02         [24] 3454 	cjne	a,_print_count,00142$
      000999 05*1F            [12] 3455 	inc	(_print_count + 1)
      00099B                       3456 00142$:
                           00099B  3457 	C$lab4.c$288$2$165 ==.
                                   3458 ;	C:\SiLabs\LITEC\Lab4\lab4.c:288: Read_Compass();
      00099B 12r07rC5         [24] 3459 	lcall	_Read_Compass
                           00099E  3460 	C$lab4.c$289$2$165 ==.
                                   3461 ;	C:\SiLabs\LITEC\Lab4\lab4.c:289: ccount=0;
      00099E 75*16 00         [24] 3462 	mov	_ccount,#0x00
      0009A1                       3463 00102$:
                           0009A1  3464 	C$lab4.c$292$1$164 ==.
                                   3465 ;	C:\SiLabs\LITEC\Lab4\lab4.c:292: error=desired-heading;//calculate error
      0009A1 E5*1A            [12] 3466 	mov	a,_desired
      0009A3 C3               [12] 3467 	clr	c
      0009A4 95*18            [12] 3468 	subb	a,_heading
      0009A6 F5*2D            [12] 3469 	mov	_error,a
      0009A8 E5*1B            [12] 3470 	mov	a,(_desired + 1)
      0009AA 95*19            [12] 3471 	subb	a,(_heading + 1)
      0009AC F5*2E            [12] 3472 	mov	(_error + 1),a
                           0009AE  3473 	C$lab4.c$293$1$164 ==.
                                   3474 ;	C:\SiLabs\LITEC\Lab4\lab4.c:293: if(error>1800)//adjust error if out of bounds
      0009AE C3               [12] 3475 	clr	c
      0009AF 74 08            [12] 3476 	mov	a,#0x08
      0009B1 95*2D            [12] 3477 	subb	a,_error
      0009B3 74 87            [12] 3478 	mov	a,#(0x07 ^ 0x80)
      0009B5 85*2E F0         [24] 3479 	mov	b,(_error + 1)
      0009B8 63 F0 80         [24] 3480 	xrl	b,#0x80
      0009BB 95 F0            [12] 3481 	subb	a,b
      0009BD 50 0E            [24] 3482 	jnc	00106$
                           0009BF  3483 	C$lab4.c$294$1$164 ==.
                                   3484 ;	C:\SiLabs\LITEC\Lab4\lab4.c:294: error-=3600;
      0009BF E5*2D            [12] 3485 	mov	a,_error
      0009C1 24 F0            [12] 3486 	add	a,#0xf0
      0009C3 F5*2D            [12] 3487 	mov	_error,a
      0009C5 E5*2E            [12] 3488 	mov	a,(_error + 1)
      0009C7 34 F1            [12] 3489 	addc	a,#0xf1
      0009C9 F5*2E            [12] 3490 	mov	(_error + 1),a
      0009CB 80 19            [24] 3491 	sjmp	00107$
      0009CD                       3492 00106$:
                           0009CD  3493 	C$lab4.c$295$1$164 ==.
                                   3494 ;	C:\SiLabs\LITEC\Lab4\lab4.c:295: else if(error<-1800)
      0009CD C3               [12] 3495 	clr	c
      0009CE E5*2D            [12] 3496 	mov	a,_error
      0009D0 94 F8            [12] 3497 	subb	a,#0xf8
      0009D2 E5*2E            [12] 3498 	mov	a,(_error + 1)
      0009D4 64 80            [12] 3499 	xrl	a,#0x80
      0009D6 94 78            [12] 3500 	subb	a,#0x78
      0009D8 50 0C            [24] 3501 	jnc	00107$
                           0009DA  3502 	C$lab4.c$296$1$164 ==.
                                   3503 ;	C:\SiLabs\LITEC\Lab4\lab4.c:296: error+=3600;
      0009DA 74 10            [12] 3504 	mov	a,#0x10
      0009DC 25*2D            [12] 3505 	add	a,_error
      0009DE F5*2D            [12] 3506 	mov	_error,a
      0009E0 74 0E            [12] 3507 	mov	a,#0x0e
      0009E2 35*2E            [12] 3508 	addc	a,(_error + 1)
      0009E4 F5*2E            [12] 3509 	mov	(_error + 1),a
      0009E6                       3510 00107$:
                           0009E6  3511 	C$lab4.c$298$1$164 ==.
                                   3512 ;	C:\SiLabs\LITEC\Lab4\lab4.c:298: temp = (float)error*k+PW_CENTER;//calculate pulsewidth
      0009E6 85*2D 82         [24] 3513 	mov	dpl,_error
      0009E9 85*2E 83         [24] 3514 	mov	dph,(_error + 1)
      0009EC 12r00r00         [24] 3515 	lcall	___sint2fs
      0009EF AC 82            [24] 3516 	mov	r4,dpl
      0009F1 AD 83            [24] 3517 	mov	r5,dph
      0009F3 AE F0            [24] 3518 	mov	r6,b
      0009F5 FF               [12] 3519 	mov	r7,a
      0009F6 C0*2F            [24] 3520 	push	_k
      0009F8 C0*30            [24] 3521 	push	(_k + 1)
      0009FA C0*31            [24] 3522 	push	(_k + 2)
      0009FC C0*32            [24] 3523 	push	(_k + 3)
      0009FE 8C 82            [24] 3524 	mov	dpl,r4
      000A00 8D 83            [24] 3525 	mov	dph,r5
      000A02 8E F0            [24] 3526 	mov	b,r6
      000A04 EF               [12] 3527 	mov	a,r7
      000A05 12r00r00         [24] 3528 	lcall	___fsmul
      000A08 AC 82            [24] 3529 	mov	r4,dpl
      000A0A AD 83            [24] 3530 	mov	r5,dph
      000A0C AE F0            [24] 3531 	mov	r6,b
      000A0E FF               [12] 3532 	mov	r7,a
      000A0F E5 81            [12] 3533 	mov	a,sp
      000A11 24 FC            [12] 3534 	add	a,#0xfc
      000A13 F5 81            [12] 3535 	mov	sp,a
      000A15 85*25 82         [24] 3536 	mov	dpl,_PW_CENTER
      000A18 85*26 83         [24] 3537 	mov	dph,(_PW_CENTER + 1)
      000A1B C0 07            [24] 3538 	push	ar7
      000A1D C0 06            [24] 3539 	push	ar6
      000A1F C0 05            [24] 3540 	push	ar5
      000A21 C0 04            [24] 3541 	push	ar4
      000A23 12r00r00         [24] 3542 	lcall	___uint2fs
      000A26 A8 82            [24] 3543 	mov	r0,dpl
      000A28 A9 83            [24] 3544 	mov	r1,dph
      000A2A AA F0            [24] 3545 	mov	r2,b
      000A2C FB               [12] 3546 	mov	r3,a
      000A2D D0 04            [24] 3547 	pop	ar4
      000A2F D0 05            [24] 3548 	pop	ar5
      000A31 D0 06            [24] 3549 	pop	ar6
      000A33 D0 07            [24] 3550 	pop	ar7
      000A35 C0 00            [24] 3551 	push	ar0
      000A37 C0 01            [24] 3552 	push	ar1
      000A39 C0 02            [24] 3553 	push	ar2
      000A3B C0 03            [24] 3554 	push	ar3
      000A3D 8C 82            [24] 3555 	mov	dpl,r4
      000A3F 8D 83            [24] 3556 	mov	dph,r5
      000A41 8E F0            [24] 3557 	mov	b,r6
      000A43 EF               [12] 3558 	mov	a,r7
      000A44 12r00r00         [24] 3559 	lcall	___fsadd
      000A47 AC 82            [24] 3560 	mov	r4,dpl
      000A49 AD 83            [24] 3561 	mov	r5,dph
      000A4B AE F0            [24] 3562 	mov	r6,b
      000A4D FF               [12] 3563 	mov	r7,a
      000A4E E5 81            [12] 3564 	mov	a,sp
      000A50 24 FC            [12] 3565 	add	a,#0xfc
      000A52 F5 81            [12] 3566 	mov	sp,a
      000A54 8C 82            [24] 3567 	mov	dpl,r4
      000A56 8D 83            [24] 3568 	mov	dph,r5
      000A58 8E F0            [24] 3569 	mov	b,r6
      000A5A EF               [12] 3570 	mov	a,r7
      000A5B 12r00r00         [24] 3571 	lcall	___fs2uint
      000A5E 85 82*33         [24] 3572 	mov	_temp,dpl
      000A61 85 83*34         [24] 3573 	mov	(_temp + 1),dph
                           000A64  3574 	C$lab4.c$299$1$164 ==.
                                   3575 ;	C:\SiLabs\LITEC\Lab4\lab4.c:299: if(!SS && !stop) {//if program is running
      000A64 20 B7 32         [24] 3576 	jb	_SS,00115$
      000A67 E5*3E            [12] 3577 	mov	a,_stop
      000A69 70 2E            [24] 3578 	jnz	00115$
                           000A6B  3579 	C$lab4.c$300$2$166 ==.
                                   3580 ;	C:\SiLabs\LITEC\Lab4\lab4.c:300: if(temp>PW_RIGHT)//adjust pulsewidth if out of bounds
      000A6B C3               [12] 3581 	clr	c
      000A6C E5*27            [12] 3582 	mov	a,_PW_RIGHT
      000A6E 95*33            [12] 3583 	subb	a,_temp
      000A70 E5*28            [12] 3584 	mov	a,(_PW_RIGHT + 1)
      000A72 95*34            [12] 3585 	subb	a,(_temp + 1)
      000A74 50 08            [24] 3586 	jnc	00112$
                           000A76  3587 	C$lab4.c$301$2$166 ==.
                                   3588 ;	C:\SiLabs\LITEC\Lab4\lab4.c:301: SERVO_PW=PW_RIGHT;
      000A76 85*27*2B         [24] 3589 	mov	_SERVO_PW,_PW_RIGHT
      000A79 85*28*2C         [24] 3590 	mov	(_SERVO_PW + 1),(_PW_RIGHT + 1)
      000A7C 80 21            [24] 3591 	sjmp	00116$
      000A7E                       3592 00112$:
                           000A7E  3593 	C$lab4.c$302$2$166 ==.
                                   3594 ;	C:\SiLabs\LITEC\Lab4\lab4.c:302: else if(temp<PW_LEFT)
      000A7E C3               [12] 3595 	clr	c
      000A7F E5*33            [12] 3596 	mov	a,_temp
      000A81 95*29            [12] 3597 	subb	a,_PW_LEFT
      000A83 E5*34            [12] 3598 	mov	a,(_temp + 1)
      000A85 95*2A            [12] 3599 	subb	a,(_PW_LEFT + 1)
      000A87 50 08            [24] 3600 	jnc	00109$
                           000A89  3601 	C$lab4.c$303$2$166 ==.
                                   3602 ;	C:\SiLabs\LITEC\Lab4\lab4.c:303: SERVO_PW=PW_LEFT;
      000A89 85*29*2B         [24] 3603 	mov	_SERVO_PW,_PW_LEFT
      000A8C 85*2A*2C         [24] 3604 	mov	(_SERVO_PW + 1),(_PW_LEFT + 1)
      000A8F 80 0E            [24] 3605 	sjmp	00116$
      000A91                       3606 00109$:
                           000A91  3607 	C$lab4.c$305$2$166 ==.
                                   3608 ;	C:\SiLabs\LITEC\Lab4\lab4.c:305: SERVO_PW=temp;
      000A91 85*33*2B         [24] 3609 	mov	_SERVO_PW,_temp
      000A94 85*34*2C         [24] 3610 	mov	(_SERVO_PW + 1),(_temp + 1)
      000A97 80 06            [24] 3611 	sjmp	00116$
      000A99                       3612 00115$:
                           000A99  3613 	C$lab4.c$308$1$164 ==.
                                   3614 ;	C:\SiLabs\LITEC\Lab4\lab4.c:308: SERVO_PW=PW_CENTER;
      000A99 85*25*2B         [24] 3615 	mov	_SERVO_PW,_PW_CENTER
      000A9C 85*26*2C         [24] 3616 	mov	(_SERVO_PW + 1),(_PW_CENTER + 1)
      000A9F                       3617 00116$:
                           000A9F  3618 	C$lab4.c$310$1$164 ==.
                                   3619 ;	C:\SiLabs\LITEC\Lab4\lab4.c:310: PCA0CPL0 = 0xFFFF - SERVO_PW;//set servo
      000A9F AF*2B            [24] 3620 	mov	r7,_SERVO_PW
      000AA1 74 FF            [12] 3621 	mov	a,#0xff
      000AA3 C3               [12] 3622 	clr	c
      000AA4 9F               [12] 3623 	subb	a,r7
      000AA5 F5 EA            [12] 3624 	mov	_PCA0CPL0,a
                           000AA7  3625 	C$lab4.c$311$1$164 ==.
                                   3626 ;	C:\SiLabs\LITEC\Lab4\lab4.c:311: PCA0CPH0 = (0xFFFF - SERVO_PW) >> 8;
      000AA7 74 FF            [12] 3627 	mov	a,#0xff
      000AA9 C3               [12] 3628 	clr	c
      000AAA 95*2B            [12] 3629 	subb	a,_SERVO_PW
      000AAC 74 FF            [12] 3630 	mov	a,#0xff
      000AAE 95*2C            [12] 3631 	subb	a,(_SERVO_PW + 1)
      000AB0 FF               [12] 3632 	mov	r7,a
      000AB1 8F FA            [24] 3633 	mov	_PCA0CPH0,r7
                           000AB3  3634 	C$lab4.c$312$1$164 ==.
                           000AB3  3635 	XG$Steering_Servo$0$0 ==.
      000AB3 22               [24] 3636 	ret
                                   3637 	.area CSEG    (CODE)
                                   3638 	.area CONST   (CODE)
                           000000  3639 Flab4$__str_0$0$0 == .
      000000                       3640 ___str_0:
      000000 0A                    3641 	.db 0x0a
      000001 54 79 70 65 20 64 69  3642 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    3643 	.db 0x00
                           000016  3644 Flab4$__str_1$0$0 == .
      000016                       3645 ___str_1:
      000016 20 20 20 20 20 25 63  3646 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    3647 	.db 0x00
                           000026  3648 Flab4$__str_2$0$0 == .
      000026                       3649 ___str_2:
      000026 25 63                 3650 	.ascii "%c"
      000028 00                    3651 	.db 0x00
                           000029  3652 Flab4$__str_3$0$0 == .
      000029                       3653 ___str_3:
      000029 43 61 72 20 63 6F 6E  3654 	.ascii "Car control menu:"
             74 72 6F 6C 20 6D 65
             6E 75 3A
      00003A 0A                    3655 	.db 0x0a
      00003B 0D                    3656 	.db 0x0d
      00003C 00                    3657 	.db 0x00
                           00003D  3658 Flab4$__str_4$0$0 == .
      00003D                       3659 ___str_4:
      00003D 43 68 6F 6F 73 65 20  3660 	.ascii "Choose a desired heading from the options below:"
             61 20 64 65 73 69 72
             65 64 20 68 65 61 64
             69 6E 67 20 66 72 6F
             6D 20 74 68 65 20 6F
             70 74 69 6F 6E 73 20
             62 65 6C 6F 77 3A
      00006D 0A                    3661 	.db 0x0a
      00006E 0D                    3662 	.db 0x0d
      00006F 00                    3663 	.db 0x00
                           000070  3664 Flab4$__str_5$0$0 == .
      000070                       3665 ___str_5:
      000070 31 29 20 30 20 64 65  3666 	.ascii "1) 0 degrees"
             67 72 65 65 73
      00007C 0A                    3667 	.db 0x0a
      00007D 0D                    3668 	.db 0x0d
      00007E 32 29 20 39 30 20 64  3669 	.ascii "2) 90 degrees"
             65 67 72 65 65 73
      00008B 0A                    3670 	.db 0x0a
      00008C 0D                    3671 	.db 0x0d
      00008D 33 29 20 31 38 30 20  3672 	.ascii "3) 180 degrees"
             64 65 67 72 65 65 73
      00009B 0A                    3673 	.db 0x0a
      00009C 0D                    3674 	.db 0x0d
      00009D 34 29 20 32 37 30 20  3675 	.ascii "4) 270 degrees"
             64 65 67 72 65 65 73
      0000AB 0A                    3676 	.db 0x0a
      0000AC 0D                    3677 	.db 0x0d
      0000AD 00                    3678 	.db 0x00
                           0000AE  3679 Flab4$__str_6$0$0 == .
      0000AE                       3680 ___str_6:
      0000AE 49 6E 76 61 6C 69 64  3681 	.ascii "Invalid input:%u, Please enter valid input."
             20 69 6E 70 75 74 3A
             25 75 2C 20 50 6C 65
             61 73 65 20 65 6E 74
             65 72 20 76 61 6C 69
             64 20 69 6E 70 75 74
             2E
      0000D9 0A                    3682 	.db 0x0a
      0000DA 0D                    3683 	.db 0x0d
      0000DB 00                    3684 	.db 0x00
                           0000DC  3685 Flab4$__str_7$0$0 == .
      0000DC                       3686 ___str_7:
      0000DC 4E 6F 77 20 75 73 65  3687 	.ascii "Now use the potentiometer to select a steering gain."
             20 74 68 65 20 70 6F
             74 65 6E 74 69 6F 6D
             65 74 65 72 20 74 6F
             20 73 65 6C 65 63 74
             20 61 20 73 74 65 65
             72 69 6E 67 20 67 61
             69 6E 2E
      000110 0A                    3688 	.db 0x0a
      000111 0D                    3689 	.db 0x0d
      000112 00                    3690 	.db 0x00
                           000113  3691 Flab4$__str_8$0$0 == .
      000113                       3692 ___str_8:
      000113 53 77 69 74 63 68 20  3693 	.ascii "Switch the slide switch when finished."
             74 68 65 20 73 6C 69
             64 65 20 73 77 69 74
             63 68 20 77 68 65 6E
             20 66 69 6E 69 73 68
             65 64 2E
      000139 0A                    3694 	.db 0x0a
      00013A 0D                    3695 	.db 0x0d
      00013B 00                    3696 	.db 0x00
                           00013C  3697 Flab4$__str_9$0$0 == .
      00013C                       3698 ___str_9:
      00013C 43 75 72 72 65 6E 74  3699 	.ascii "Current value*100: %d"
             20 76 61 6C 75 65 2A
             31 30 30 3A 20 25 64
      000151 0A                    3700 	.db 0x0a
      000152 0D                    3701 	.db 0x0d
      000153 00                    3702 	.db 0x00
                           000154  3703 Flab4$__str_10$0$0 == .
      000154                       3704 ___str_10:
      000154 46 69 6E 61 6C 20 67  3705 	.ascii "Final gain*100:%d"
             61 69 6E 2A 31 30 30
             3A 25 64
      000165 0A                    3706 	.db 0x0a
      000166 0D                    3707 	.db 0x0d
      000167 00                    3708 	.db 0x00
                           000168  3709 Flab4$__str_11$0$0 == .
      000168                       3710 ___str_11:
      000168 48 65 61 64 69 6E 67  3711 	.ascii "Heading: %u"
             3A 20 25 75
      000173 0A                    3712 	.db 0x0a
      000174 52 61 6E 67 65 72 20  3713 	.ascii "Ranger Value: %u"
             56 61 6C 75 65 3A 20
             25 75
      000184 00                    3714 	.db 0x00
                           000185  3715 Flab4$__str_12$0$0 == .
      000185                       3716 ___str_12:
      000185 0A                    3717 	.db 0x0a
      000186 0D                    3718 	.db 0x0d
      000187 48 65 61 64 69 6E 67  3719 	.ascii "Heading: %u"
             3A 20 25 75
      000192 09                    3720 	.db 0x09
      000193 09                    3721 	.db 0x09
      000194 52 61 6E 67 65 72 20  3722 	.ascii "Ranger Value: %u"
             56 61 6C 75 65 3A 20
             25 75
      0001A4 0A                    3723 	.db 0x0a
      0001A5 0D                    3724 	.db 0x0d
      0001A6 00                    3725 	.db 0x00
                           0001A7  3726 Flab4$__str_13$0$0 == .
      0001A7                       3727 ___str_13:
      0001A7 53 65 63 6F 6E 64 20  3728 	.ascii "Second obstacle found"
             6F 62 73 74 61 63 6C
             65 20 66 6F 75 6E 64
      0001BC 0A                    3729 	.db 0x0a
      0001BD 0D                    3730 	.db 0x0d
      0001BE 00                    3731 	.db 0x00
                           0001BF  3732 Flab4$__str_14$0$0 == .
      0001BF                       3733 ___str_14:
      0001BF 4F 62 73 74 61 63 6C  3734 	.ascii "Obstacle detected. Press 'r' or 'l' to steer around obstacle"
             65 20 64 65 74 65 63
             74 65 64 2E 20 50 72
             65 73 73 20 27 72 27
             20 6F 72 20 27 6C 27
             20 74 6F 20 73 74 65
             65 72 20 61 72 6F 75
             6E 64 20 6F 62 73 74
             61 63 6C 65
      0001FB 2E                    3735 	.ascii "."
      0001FC 00                    3736 	.db 0x00
                           0001FD  3737 Flab4$__str_15$0$0 == .
      0001FD                       3738 ___str_15:
      0001FD 49 6E 76 61 6C 69 64  3739 	.ascii "Invalid input. Please enter 'l' or 'r'."
             20 69 6E 70 75 74 2E
             20 50 6C 65 61 73 65
             20 65 6E 74 65 72 20
             27 6C 27 20 6F 72 20
             27 72 27 2E
      000224 0A                    3740 	.db 0x0a
      000225 0D                    3741 	.db 0x0d
      000226 00                    3742 	.db 0x00
                           000227  3743 Flab4$__str_16$0$0 == .
      000227                       3744 ___str_16:
      000227 0A                    3745 	.db 0x0a
      000228 0D                    3746 	.db 0x0d
      000229 50 72 65 73 73 20 73  3747 	.ascii "Press space when the car is around the obstacle"
             70 61 63 65 20 77 68
             65 6E 20 74 68 65 20
             63 61 72 20 69 73 20
             61 72 6F 75 6E 64 20
             74 68 65 20 6F 62 73
             74 61 63 6C 65
      000258 0A                    3748 	.db 0x0a
      000259 0D                    3749 	.db 0x0d
      00025A 00                    3750 	.db 0x00
                                   3751 	.area XINIT   (CODE)
                                   3752 	.area CABS    (ABS,CODE)
